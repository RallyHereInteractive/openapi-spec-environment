{
  "openapi": "3.0.3",
  "info": {
    "title": "Rally Here Sandbox APIs",
    "description": "Rally Here Sandbox APIs",
    "version": "0.1.0"
  },
  "servers": [],
  "tags": [
    {
      "name": "ad",
      "description": "Operations on ad"
    },
    {
      "name": "Friends V1",
      "description": "Operations to fetch and modify a player's friends. Note: V1 and V2 are not be be used together. Once you begin using V2, you must not use V1 anymore."
    },
    {
      "name": "Friends V2",
      "description": "Operations to fetch and modify a player's friends using player uuids"
    },
    {
      "name": "Blocked V1",
      "description": "Operations to fetch and modify a player's blocked list. Note: V1 and V2 are not be be used together. Once you begin using V2, you must not use V1 anymore."
    },
    {
      "name": "Blocked V2",
      "description": "Operations to fetch and modify a player's blocked list using player uuids"
    },
    {
      "name": "Configuration V1",
      "description": "Operations to view configuration for friends and blocked lists"
    },
    {
      "name": "settings",
      "description": "\nEndpoints to get setting configuration and player settings\n\nPlayer Settings are meant to be used as a document storage for players settings.\n\nSettings are organized around Setting Types.  Each Setting Type can contain one or more Setting Versions.  Each Type+Version pair includes a jsonschema that is used to validate any update that apply to the setting.  This does NOT validate data for the get endpoints.  If the data is invalid, the get endpoint will return the data as it was stored.\n"
    },
    {
      "name": "auth",
      "description": "RallyHere Authentication API\n\nThis API is used by clients to retrieve an access token to be used when accessing other RallyHere APIs.\n\n## User-based Client Logins\n\nThe /v1/login endpoint supports user-based authentication for a variety of platforms by \"wrapping\" a user's platform\naccess token using a multi-step process:\n\n1. The client must authenticate the user and retrieve an access token for their respective platform.\n2. The client must subsequently authenticate the user using the /v1/login endpoint by setting the `grant_type` to the\nappropriate platform, and setting the `portal_access_token` to the access token retrieved above, which will return a\nnew access token to be used for RallyHere APIs.\n\n## OAuth\n\n### Version 1\n\nThe /v1/oauth endpoints support user-based client authentication for a variety of different platforms, utilizing secure\nredirects to third-party authentication URLs. The OAuth flow allows authentication to the RallyHere APIs without the use\nof a game client.\n\n### Version 2\n\nCurrently, the /v2/oauth endpoints only support a `grant_type` value of `client_credentials`, for the purposes of\nuser-less client authentication, utilizing Basic authentication containing a RallyHere client ID and client secret. This\ntype of authentication enables trusted clients (such as backend game instances) to access the RallyHere APIs without\nuser-specific authentication.\n\nThe /v2/oauth endpoint will be updated in the future to include user-based authentication modes.\n\n"
    },
    {
      "name": "Sessions",
      "description": "\nThis API is for the creation and management of sessions, which are just generic groups of players, and operations\non those sessions, such as joining matchmaking.\n"
    },
    {
      "name": "Queues",
      "description": "\nThe queue endpoints are for requesting information and configuration about queues, instance launch templates, and\nmatchmaking profiles\n"
    },
    {
      "name": "Regions",
      "description": "\nRegion endpoints for clients to request client visible regions and configuration around them\n"
    },
    {
      "name": "Inventory",
      "description": "Operations on inventory data"
    },
    {
      "name": "Catalog",
      "description": "Operations on catalog data"
    },
    {
      "name": "Entitlements",
      "description": "Operations on entitlements. Key Entitlements are used to grant Players Key Claims for an external Marketing Campaign."
    },
    {
      "name": "Key Claims",
      "description": "Operations to Fetch and Claim Key Claims. Key Claims are used to give Players keys as a reward to fulfilling the requirements of an external Marketing Campaign. Examples: Beta Keys, Extra Game keys for Friends, etc."
    },
    {
      "name": "Marketing",
      "description": "Operations on Market Campaigns. There is currently no way to add Market Campaigns via API. Reach out to your Rally Here representative to add a new campaign."
    },
    {
      "name": "presence",
      "description": "RallyHere Presence API\n\nThis API is intended to generally store presence information and be used in order to track the concurrent users for the game as a whole.\n\n## Basic Usage\n\nOn login, a client should go through the following steps.\n\n1. Get any existing current presence data and store that locally using GET `/v1/player/me/presence`.\n2. Mark online by patching their own presence with an empty update using PATCH `/v1/player/presence`.\n3. Request the client visible settings using GET `/v1/settings` and store them.\n4. Every `self_ping_interval_seconds` the client should mark online again by patching their own presence with an empty update using PATCH `/v1/player/presence`\n\n## Setting Presence\n\nWhen updating your presence the `display_name` and `platform` are not set directly. They are instead derived from the JWT provided by the users-api.\n\nThe presence you set is considered public, so do not set any values that should be considered private data in either the `status_message` or the\n`custom_data`.\n\n## Fetching Presence\n\nYou may fetch the presence of another user by either their `player_id` or `player_uuid`. You should prefer the `player_uuid` whenever it is available\nas the `player_id` is deprecated.\n\n\n## Private Presence Data\n\n`last_seen` is only available when requesting presence for yourself or as an admin.\n\n## Concurrent Users Updates\nIt's expected that users of this API will regularly patch their own presence with an empty update. This will signal that they are still online without\nchanging any of their presence information. This should be done on a cycle based on the `self_ping_interval_setting` settings provided by the API on\nthe `/v1/settings` endpoint conforming to the `ClientVisibleSettings` schema.\n\nIf a client takes longer than the `last_seen_age_considered_offline_seconds` setting to perform this update they will be considered offline by other\nclients. This setting is provided by the API on the `/v1/settings` endpoint conforming to the `ClientVisibleSettings` schema.\n"
    },
    {
      "name": "presence-admin",
      "description": "RallyHere Presence Admin API\n\nThis API is only available to administrators. It provides access to CCU data and to set specific values for presence that aren't available to\nunprivileged clients.\n\nEach time a user interacts with this API their uuid is added to a time-keyed HyperLogLog. This enables us to track the number of users stochastically\nrather than having to create a complete entry for every interaction. Their uuid is also added to a HyperLogLog keyed by both time and the platform the\nuser authenticated on.\n\nThe three actions CCU tracks are total, updating, and requesting. Comparing the numbers between the three will help identify if there are users who are\nscanning the API rather than using it for normal presence operations.\n\nWhen requesting the CCU you generally have two major options: Combined and Individual.\n\nThe Combined methods count up the number of users internally and therefor handle duplicates correctly.\n\nThe Individual methods return the individual counts for each timestamp. This data can be useful, but can't be summed up directly unless you're okay\nwith counting players multiple times.\n\nFor example, if you want to know the 24-hour CCU you should *not* get the Individual CCUs and add them up yourself. You should request the Combined\nCCU over that time period.\n"
    },
    {
      "name": "player-notification",
      "description": "Operations on Player Notifications"
    },
    {
      "name": "player-id-notification",
      "description": "Operations on Player Notifications"
    },
    {
      "name": "instance-notification",
      "description": "Operations on Instance Notifications"
    },
    {
      "name": "RallyHere Rank API",
      "description": "\n\nThis API is used to update players ranks after matches\n\n"
    },
    {
      "name": "config",
      "description": "Getting client and server app settings"
    },
    {
      "name": "discovery",
      "description": "Discovery endpoint for MCTS compatible games"
    },
    {
      "name": "sites",
      "description": "Endpoint for getting site settings"
    },
    {
      "name": "time",
      "description": "Endpoint for UTC now time"
    }
  ],
  "paths": {
    "/ad/v1/session": {
      "post": {
        "tags": [
          "ad"
        ],
        "summary": "Begin New Session",
        "operationId": "begin_new_session",
        "parameters": [
          {
            "description": "Optional header to make calling the endpoint faster by not requiring a new token to be generated.",
            "required": false,
            "schema": {
              "title": "X-Hz-Ad-Api-Token",
              "type": "string",
              "description": "Optional header to make calling the endpoint faster by not requiring a new token to be generated."
            },
            "name": "x-hz-ad-api-token",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_begin_new_session_v1_session_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "x-hz-ad-api-token": {
                "description": "Provide this token to future requests for the same user to make their requests faster (as a new token doesn't need to be generated)",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "x-hz-ad-api-token": {
                "description": "Provide this token to future requests for the same user to make their requests faster (as a new token doesn't need to be generated)",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/ad/v1/opportunity": {
      "post": {
        "tags": [
          "ad"
        ],
        "summary": "Find Opportunities",
        "operationId": "find_opportunities",
        "parameters": [
          {
            "description": "Optional header to make calling the endpoint faster by not requiring a new token to be generated.",
            "required": false,
            "schema": {
              "title": "X-Hz-Ad-Api-Token",
              "type": "string",
              "description": "Optional header to make calling the endpoint faster by not requiring a new token to be generated."
            },
            "name": "x-hz-ad-api-token",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_find_opportunities_v1_opportunity_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "x-hz-ad-api-token": {
                "description": "Provide this token to future requests for the same user to make their requests faster (as a new token doesn't need to be generated)",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdOpportunities"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "x-hz-ad-api-token": {
                "description": "Provide this token to future requests for the same user to make their requests faster (as a new token doesn't need to be generated)",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/ad/v1/opportunity/{opportunity_id}": {
      "post": {
        "tags": [
          "ad"
        ],
        "summary": "Update Opportunity By Id",
        "operationId": "update_opportunity_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Opportunity Id",
              "minLength": 1,
              "type": "string"
            },
            "name": "opportunity_id",
            "in": "path"
          },
          {
            "description": "Optional header to make calling the endpoint faster by not requiring a new token to be generated.",
            "required": false,
            "schema": {
              "title": "X-Hz-Ad-Api-Token",
              "type": "string",
              "description": "Optional header to make calling the endpoint faster by not requiring a new token to be generated."
            },
            "name": "x-hz-ad-api-token",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_opportunity_by_id_v1_opportunity__opportunity_id__post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "x-hz-ad-api-token": {
                "description": "Provide this token to future requests for the same user to make their requests faster (as a new token doesn't need to be generated)",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {
              "x-hz-ad-api-token": {
                "description": "Provide this token to future requests for the same user to make their requests faster (as a new token doesn't need to be generated)",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/ad/v1/unity/ad/watched": {
      "get": {
        "tags": [
          "ad"
        ],
        "summary": "Unity Ad Watched",
        "description": "Callback URL for the Unity Ad API. Docs here https://docs.unity.com/ads/ImplementingS2SRedeemCallbacks.html",
        "operationId": "unity_ad_watched",
        "parameters": [
          {
            "description": "Product ID in the Unity console",
            "required": true,
            "schema": {
              "title": "Productid",
              "type": "integer",
              "description": "Product ID in the Unity console"
            },
            "name": "productid",
            "in": "query"
          },
          {
            "description": "Server ID that contains custom data. Expected to be a comma separated list of platform and player ID",
            "required": true,
            "schema": {
              "title": "Sid",
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "description": "Server ID that contains custom data. Expected to be a comma separated list of platform and player ID"
            },
            "example": "ios,12345",
            "name": "sid",
            "in": "query"
          },
          {
            "description": "Unique ID for the ad view generated by Unity",
            "required": true,
            "schema": {
              "title": "Oid",
              "type": "string",
              "description": "Unique ID for the ad view generated by Unity"
            },
            "name": "oid",
            "in": "query"
          },
          {
            "description": "The HMAC-MD5 hash of the parameter string used to validate the request",
            "required": true,
            "schema": {
              "title": "Hmac",
              "type": "string",
              "description": "The HMAC-MD5 hash of the parameter string used to validate the request"
            },
            "name": "hmac",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ad/v1/unity/mediation/watched": {
      "get": {
        "tags": [
          "ad"
        ],
        "summary": "Unity Mediation Ad Watched",
        "description": "Callback URL for the Unity Ad API. Docs here https://docs.unity.com/mediation/S2SRedeemCallbacks.html",
        "operationId": "unity_mediation_ad_watched",
        "parameters": [
          {
            "description": "Custom data provide by client. Expected to be client type",
            "required": true,
            "schema": {
              "title": "Customized Data",
              "type": "string",
              "description": "Custom data provide by client. Expected to be client type"
            },
            "example": "android",
            "name": "customized_data",
            "in": "query"
          },
          {
            "description": "User ID provided by the client",
            "required": true,
            "schema": {
              "title": "Userid",
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "description": "User ID provided by the client"
            },
            "name": "userId",
            "in": "query"
          },
          {
            "description": "Unique ID for the ad view generated by Unity",
            "required": true,
            "schema": {
              "title": "Eventid",
              "type": "string",
              "description": "Unique ID for the ad view generated by Unity"
            },
            "name": "eventId",
            "in": "query"
          },
          {
            "description": "Timestamp of an ad event in Unix format",
            "required": true,
            "schema": {
              "title": "Timestamp",
              "type": "integer",
              "description": "Timestamp of an ad event in Unix format"
            },
            "name": "timestamp",
            "in": "query"
          },
          {
            "description": "The HMAC-MD5 hash of the parameter string used to validate the request",
            "required": true,
            "schema": {
              "title": "Signature",
              "type": "string",
              "description": "The HMAC-MD5 hash of the parameter string used to validate the request"
            },
            "name": "signature",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/friends/v2/player/{player_uuid}/friend": {
      "get": {
        "tags": [
          "Friends V2"
        ],
        "summary": "Get Friends List For Player V2",
        "description": "Fetch the friend's list for the Player and their relationship status with those friends. <br /><br />\n                    <b>Note:</b> This API supports etags and will return the etag header when with the response. \n                    Clients can utilize the <i>if-none-match</i> header to avoid having to reload the response if it has not changed.",
        "operationId": "get_friends_list_for_player_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendsList"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Friends V2"
        ],
        "summary": "Delete Friends V2",
        "description": "Remove the friend's relationship status with the other players",
        "operationId": "delete_friends_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Friends"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/friends/v2/player/{player_uuid}/friend/{other_player_uuid}": {
      "get": {
        "tags": [
          "Friends V2"
        ],
        "summary": "Get Friend Relationship V2",
        "description": "Get the relationship status with the other Player. <br /> <br />\n                    <b>Note:</b> This API supports etags and will return the etag header when with the response. \n                    Clients and then utilize the <i>if-none-match</i> header to avoid having to reload the response if \n                    it has not changed or to use it to modify the relationship without loosing updates. \n                    <br/><br />Permissions Required: friend:friend_list:read",
        "operationId": "get_friend_relationship_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Other Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "other_player_uuid",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendRelationship"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Friends V2"
        ],
        "summary": "Add Friend V2",
        "description": "Update the friend's relationship status with the other Player. There is a max number of friends that can be added for a Player.\n                    The limit can determined using [this API](/#/Configuration%20V1/get_friends_and_block_limits). This API allows you optionally update \n                    the player's notes for the other player. If you do not want to update or set the notes when adding the other player, then do not \n                    include a body.<br /><br />\n                    <b>Note:</b> This API supports etags and will return the etag header when with the response and will match the etag value \n                    provided when [fetching Friend Relationship between these two players](/#/Friends%20V1/get_friend_relationship). <b>It is highly \n                    recommended to provide the etag value with the <i> if-match </i> header to avoid lost updates. \n                    <br/><br />Permissions Required: friend:friend_list:write",
        "operationId": "add_friend_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Other Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "other_player_uuid",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed.",
            "required": false,
            "schema": {
              "title": "If-Match",
              "type": "string",
              "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed."
            },
            "name": "if-match",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Notes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendRelationship"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource's Etag does not match the Etag provided. Get the Etag from the Get request and try again"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Friends V2"
        ],
        "summary": "Delete Friend V2",
        "description": "Remove the friend's relationship status with the other Player. \n                    This should be used for declining Friend requests, deleting sent Friends Requests, and deleting Friends <br /><br />\n                    <b>Note:</b> This API supports etags and will return the etag header when with the response and will match the etag value \n                    provided when [fetching Friend Relationship between these two players](#/Friends V1/get_friend_relationship). <b>It is highly \n                    recommended to provide the etag value with the <i> if-match </i> header to avoid lost updates. \n                    <br/><br />Permissions Required: friend:friend_list:write",
        "operationId": "delete_friend_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Other Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "other_player_uuid",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed.",
            "required": false,
            "schema": {
              "title": "If-Match",
              "type": "string",
              "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed."
            },
            "name": "if-match",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource's Etag does not match the Etag provided. Get the Etag from the Get request and try again"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/friends/v2/player/{player_uuid}/friend/{other_player_uuid}/notes": {
      "put": {
        "tags": [
          "Friends V2"
        ],
        "summary": "Add Notes V2",
        "description": "Update Player's notes on the other player. Players can only add notes for players they have relationship's with. \n                    The notes will be removed when the relationship is ended.\n                    <br/><br />Permissions Required: friend:friend_list:write",
        "operationId": "add_notes_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Other Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "other_player_uuid",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed.",
            "required": false,
            "schema": {
              "title": "If-Match",
              "type": "string",
              "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed."
            },
            "name": "if-match",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Notes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendRelationship"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Friends V2"
        ],
        "summary": "Delete Notes V2",
        "description": "Remove the Player's notes on the other player. Players can only add notes for players they have relationship's with. \n                    The notes will be removed when the relationship is ended.\n                    <br/><br />Permissions Required: {FriendPermissions.FRIEND_LIST_WRITE}",
        "operationId": "delete_notes_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Other Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "other_player_uuid",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed.",
            "required": false,
            "schema": {
              "title": "If-Match",
              "type": "string",
              "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed."
            },
            "name": "if-match",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/friends/v1/player/{player_id}/friend": {
      "get": {
        "tags": [
          "Friends V1"
        ],
        "summary": "Get Friends List For Player",
        "description": "Fetch the friend's list for the Player and their relationship status with those friends. <br /><br />\n                <b>Note:</b> This API supports etags and will return the etag header when with the response. \n                Clients and then utilize the <i>if-none-match</i> header to avoid having to reload the response if it has not changed. \n                <br/><br />Permissions Required: friend:friend_list:read",
        "operationId": "get_friends_list_for_player",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendsListV1"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Friends V1"
        ],
        "summary": "Delete Friends",
        "description": "Remove the friend's relationship status with the other players <br/><br />Permissions Required: friend:friend_list:write",
        "operationId": "delete_friends",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FriendsV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/friends/v1/player/{player_id}/friend/{other_player_id}": {
      "get": {
        "tags": [
          "Friends V1"
        ],
        "summary": "Get Friend Relationship",
        "description": "Get the relationship status with the other Player. <br /> <br />\n                <b>Note:</b> This API supports etags and will return the etag header when with the response. \n                Clients can utilize the <i>if-none-match</i> header to avoid having to reload the response if \n                it has not changed or to use it to modify the relationship without loosing updates. \n                <br/><br />Permissions Required: friend:friend_list:read",
        "operationId": "get_friend_relationship",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Other Player Id",
              "type": "integer"
            },
            "name": "other_player_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendRelationshipV1"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Friends V1"
        ],
        "summary": "Add Friend",
        "description": "Update the friend's relationship status with the other Player. There is a max number of friends that can be added for a Player.\n                The limit can determined using [this API](/#/Configuration%20V1/get_friends_and_block_limits). This API allows you optionally update \n                the player's notes for the other player. If you do not want to update or set the notes when adding the other player, then do not \n                include a body.<br /><br /> <b>Note:</b> This API supports etags and will return the etag header when with the response and will match the etag value \n                provided when [fetching Friend Relationship between these two players](/#/Friends%20V1/get_friend_relationship). <b>It is highly \n                recommended to provide the etag value with the <i> if-match </i> header to avoid lost updates. \n                <br/><br />Permissions Required: friend:friend_list:write",
        "operationId": "add_friend",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Other Player Id",
              "type": "integer"
            },
            "name": "other_player_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "title": "If-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed."
            },
            "name": "if-match",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Notes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendRelationshipV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource's Etag does not match the Etag provided. Get the Etag from the Get request and try again"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Friends V1"
        ],
        "summary": "Delete Friend",
        "description": "Remove the friend's relationship status with the other Player. \n                This should be used for declining Friend requests, deleting sent Friends Requests, and deleting Friends <br /><br />\n                <b>Note:</b> This API supports etags and will return the etag header when with the response and will match the etag value \n                provided when [fetching Friend Relationship between these two players](#/Friends V1/get_friend_relationship). <b>It is highly \n                recommended to provide the etag value with the <i> if-match </i> header to avoid lost updates. \n                <br/><br />Permissions Required: friend:friend_list:write",
        "operationId": "delete_friend",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Other Player Id",
              "type": "integer"
            },
            "name": "other_player_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed.",
            "required": false,
            "schema": {
              "title": "If-Match",
              "type": "string",
              "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed."
            },
            "name": "if-match",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource's Etag does not match the Etag provided. Get the Etag from the Get request and try again"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/friends/v1/player/{player_id}/friend/{other_player_id}/notes": {
      "put": {
        "tags": [
          "Friends V1"
        ],
        "summary": "Add Notes",
        "description": "Update Player's notes on the other player. Players can only add notes for players they have relationship's with. \n    The notes will be removed when the relationship is ended.\n    <br/><br />Permissions Required: friend:friend_list:write",
        "operationId": "add_notes",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Other Player Id",
              "type": "integer"
            },
            "name": "other_player_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed.",
            "required": false,
            "schema": {
              "title": "If-Match",
              "type": "string",
              "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed."
            },
            "name": "if-match",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Notes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendRelationshipV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Friends V1"
        ],
        "summary": "Delete Notes",
        "description": "Remove the Player's notes on the other player. Players can only add notes for players they have relationship's with. \n    The notes will be removed when the relationship is ended.\n    <br/><br />Permissions Required: friend:friend_list:write",
        "operationId": "delete_notes",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Other Player Id",
              "type": "integer"
            },
            "name": "other_player_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed.",
            "required": false,
            "schema": {
              "title": "If-Match",
              "type": "string",
              "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed."
            },
            "name": "if-match",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/friends/v2/player/{player_uuid}/block": {
      "get": {
        "tags": [
          "Blocked V2"
        ],
        "summary": "Get Blocked List For Player V2",
        "description": "Fetch the blocked list for the Player. <br /><br />\n                        <b>Note:</b> This API supports etags and will return the etag header when with the response. \n                        Clients can utilize the <i>if-none-match</i> header to avoid having to reload the response if it has not changed.\n                        <br/><br />Permissions Required: friend:block_list:read",
        "operationId": "get_blocked_list_for_player_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedList"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/friends/v2/player/{player_uuid}/block/{other_player_uuid}": {
      "get": {
        "tags": [
          "Blocked V2"
        ],
        "summary": "Get Blocked V2",
        "description": "Get the Blocked Player <br/><br />Permissions Required: friend:block_list:read",
        "operationId": "get_blocked_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Other Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "other_player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedPlayer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Blocked V2"
        ],
        "summary": "Block V2",
        "description": "Block the other Player. There is a max number of Players that can be blocked per Player.\n                    The limit can determined using [this API](/#/Configuration%20V1/get_friends_and_block_limits).\n                    <br/><br />Permissions Required: friend:block_list:write",
        "operationId": "block_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Other Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "other_player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedPlayer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Blocked V2"
        ],
        "summary": "Unblock V2",
        "description": "Unblock the other Player <br/><br />Permissions Required: friend:block_list:write",
        "operationId": "unblock_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Other Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "other_player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/friends/v1/player/{player_id}/block": {
      "get": {
        "tags": [
          "Blocked V1"
        ],
        "summary": "Get Blocked List For Player",
        "description": "Fetch the blocked list for the Player. <br /><br />\n                        <b>Note:</b> This API supports etags and will return the etag header when with the response. \n                        Clients can utilize the <i>if-none-match</i> header to avoid having to reload the response if it has not changed. \n                        <br/><br />Permissions Required: friend:block_list:read",
        "operationId": "get_blocked_list_for_player",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page",
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedListV1"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/friends/v1/player/{player_id}/block/{other_player_id}": {
      "get": {
        "tags": [
          "Blocked V1"
        ],
        "summary": "Get Blocked",
        "description": "Get the Blocked Player<br/><br />Permissions Required: friend:block_list:read",
        "operationId": "get_blocked",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Other Player Id",
              "type": "integer"
            },
            "name": "other_player_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedPlayerV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Blocked V1"
        ],
        "summary": "Block",
        "description": "Block the other Player. There is a max number of Players that can be blocked per Player.\n                    The limit can determined using [this API](/#/Configuration%20V1/get_friends_and_block_limits).\n                    <br/><br />Permissions Required: friend:block_list:write",
        "operationId": "block",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Other Player Id",
              "type": "integer"
            },
            "name": "other_player_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedPlayerV1"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Blocked V1"
        ],
        "summary": "Unblock",
        "description": "Unblock the other Player<br/><br />Permissions Required: friend:block_list:write",
        "operationId": "unblock",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Other Player Id",
              "type": "integer"
            },
            "name": "other_player_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/friends/v1/configuration": {
      "get": {
        "tags": [
          "Configuration V1"
        ],
        "summary": "Get Friends And Block Limits",
        "description": "Fetch the configuration used by Friends API, e.g. friend_limit, block_limit, etc.",
        "operationId": "get_friends_and_block_limits",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendsApiConfig"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/settings/v1/player/{player_id}/setting_type/{setting_type_id}/key": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get All Player Id Settings For Setting Type",
        "description": "Get a list of all player settings for a specific Setting Type.\n\nRequired Permissions: `setting:read` for any player.  `setting:read:self` for the player of the access token.\n\n**DEPRECATED** - Use v2 instead",
        "operationId": "get_all_player_id_settings_for_setting_type",
        "parameters": [
          {
            "description": "Player to get settings for",
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer",
              "description": "Player to get settings for"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "description": "Setting Type to get settings for. Must be one of the known setting types",
            "required": true,
            "schema": {
              "title": "Setting Type Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "description": "Setting Type to get settings for. Must be one of the known setting types"
            },
            "name": "setting_type_id",
            "in": "path"
          },
          {
            "description": "Setting Key to get settings for. If not specified, all settings for the setting type will be returned",
            "required": false,
            "schema": {
              "title": "Key",
              "type": "array",
              "items": {
                "maxLength": 256,
                "minLength": 1,
                "type": "string"
              },
              "description": "Setting Key to get settings for. If not specified, all settings for the setting type will be returned"
            },
            "name": "key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get All Player Id Settings For Setting Type",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/SettingData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "settings"
        ],
        "summary": "Delete All Player Id Settings For Setting Type",
        "description": "Delete all player setting for a specific type\n\nRequired Permissions: `setting:write` for any player.  `setting:write:self` for the player of the access token.\n\n**DEPRECATED** - Use v2 instead",
        "operationId": "delete_all_player_id_settings_for_setting_type",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Setting Type Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "setting_type_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `does_not_exist` - Setting Key(s) do not exist\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/settings/v2/player/me/setting_type/{setting_type_id}/key": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get All Player Uuid Settings For Setting Type Self",
        "description": "Get a list of all player settings for a specific Setting Type\n\nRequired Permissions: `setting:read` or `setting:read:self`",
        "operationId": "get_all_player_uuid_settings_for_setting_type_self",
        "parameters": [
          {
            "description": "Setting Type to get settings for. Must be one of the known setting types",
            "required": true,
            "schema": {
              "title": "Setting Type Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "description": "Setting Type to get settings for. Must be one of the known setting types"
            },
            "name": "setting_type_id",
            "in": "path"
          },
          {
            "description": "Setting Key to get settings for. If not specified, all settings for the setting type will be returned",
            "required": false,
            "schema": {
              "title": "Key",
              "type": "array",
              "items": {
                "maxLength": 256,
                "minLength": 1,
                "type": "string"
              },
              "description": "Setting Key to get settings for. If not specified, all settings for the setting type will be returned"
            },
            "name": "key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get All Player Uuid Settings For Setting Type Self",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/SettingData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "settings"
        ],
        "summary": "Delete All Player Uuid Settings For Setting Type Self",
        "description": "Delete all player setting for a specific type\n\nRequired Permissions: `setting:write` or `setting:write:self`",
        "operationId": "delete_all_player_uuid_settings_for_setting_type_self",
        "parameters": [
          {
            "description": "Setting Type to delete settings for.  Must be one of the known setting types",
            "required": true,
            "schema": {
              "title": "Setting Type Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "description": "Setting Type to delete settings for.  Must be one of the known setting types"
            },
            "name": "setting_type_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `does_not_exist` - Setting Key(s) do not exist\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/settings/v2/player/{player_uuid}/setting_type/{setting_type_id}/key": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get All Player Uuid Settings For Setting Type",
        "description": "Get a list of all player settings for a specific Setting Type\n\nRequired Permissions: `setting:read` for any player.  `setting:read:self` for the player of the access token.",
        "operationId": "get_all_player_uuid_settings_for_setting_type",
        "parameters": [
          {
            "description": "Player to get settings for",
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "description": "Player to get settings for",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "description": "Setting Type to get settings for. Must be one of the known setting types",
            "required": true,
            "schema": {
              "title": "Setting Type Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "description": "Setting Type to get settings for. Must be one of the known setting types"
            },
            "name": "setting_type_id",
            "in": "path"
          },
          {
            "description": "Setting Key to get settings for. If not specified, all settings for the setting type will be returned",
            "required": false,
            "schema": {
              "title": "Key",
              "type": "array",
              "items": {
                "maxLength": 256,
                "minLength": 1,
                "type": "string"
              },
              "description": "Setting Key to get settings for. If not specified, all settings for the setting type will be returned"
            },
            "name": "key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get All Player Uuid Settings For Setting Type",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/SettingData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "settings"
        ],
        "summary": "Delete All Player Uuid Settings For Setting Type",
        "description": "Delete all player setting for a specific type\n\nRequired Permissions: `setting:write` for any player.  `setting:write:self` for the player of the access token.",
        "operationId": "delete_all_player_uuid_settings_for_setting_type",
        "parameters": [
          {
            "description": "Player to delete setting for",
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "description": "Player to delete setting for",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "description": "Setting Type to delete settings for.  Must be one of the known setting types",
            "required": true,
            "schema": {
              "title": "Setting Type Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "description": "Setting Type to delete settings for.  Must be one of the known setting types"
            },
            "name": "setting_type_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `does_not_exist` - Setting Key(s) do not exist\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/settings/v2/player/me/setting_type/{setting_type_id}/key/{key}": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get Single Player Uuid Setting Self",
        "description": "Get a single player setting\n\nRequired Permissions: `setting:read` or `setting:read:self`",
        "operationId": "get_single_player_uuid_setting_self",
        "parameters": [
          {
            "description": "Setting Type to get settings for. Must be one of the known setting types",
            "required": true,
            "schema": {
              "title": "Setting Type Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "description": "Setting Type to get settings for. Must be one of the known setting types"
            },
            "name": "setting_type_id",
            "in": "path"
          },
          {
            "description": "Setting Key to get settings for",
            "required": true,
            "schema": {
              "title": "Key",
              "maxLength": 256,
              "minLength": 1,
              "type": "string",
              "description": "Setting Key to get settings for"
            },
            "name": "key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingData"
                }
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `not_found` - The setting key was not found\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "settings"
        ],
        "summary": "Set Single Player Uuid Setting Self",
        "description": "Update the value of a single player setting.\n    \nRequired Permissions: `setting:write` or `setting:write:self`\n\nIf Legacy types are enabled, to maintain compatibility with legacy applications, the following settings have special-case handling:\n* Setting Type `case` - Version `1` - key `create` - creates a new case set and returns the new key and data in the response. \n* Setting Type `case` - Version `1` - key is integer - Modify an existing case set.  If it does not exist, a 404 response with the `does_not_exist` error code. \n* Setting Type `loadout` - Version `1` - key `create` - creates a new loadout and returns the new key and data in the response.  All items keys will be given a new key \n* Setting Type `loadout` - Version `1` - key is integer - Modify an existing loadout.  If it does not exist, a 404 response with the `does_not_exist` error code.  When modifying loadout items, item keys that convert into integers/longs are treated as updates (and will error the update if they are not valid), all others are treated as creates and will be given a new key.",
        "operationId": "set_single_player_uuid_setting_self",
        "parameters": [
          {
            "description": "Setting Type to update settings for. Must be one of the known setting types",
            "required": true,
            "schema": {
              "title": "Setting Type Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "description": "Setting Type to update settings for. Must be one of the known setting types"
            },
            "name": "setting_type_id",
            "in": "path"
          },
          {
            "description": "Setting Key to update setting for.  Must conform to the setting type key format",
            "required": true,
            "schema": {
              "title": "Key",
              "maxLength": 256,
              "minLength": 1,
              "type": "string",
              "description": "Setting Key to update setting for.  Must conform to the setting type key format"
            },
            "name": "key",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetSinglePlayerSettingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Set Single Player Uuid Setting Self",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/SettingData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n- `setting_version_invalid` - Setting Version is not valid for the provided type\n- `update_not_enabled` - Setting Type Version has updates disabled\n- `setting_key_invalid` - Setting Key does not meet requirements for that type/version\n- `setting_value_invalid` - Setting value failed validation against the jsonschema defined for the type/version.  See response description for more details\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `does_not_exist` - Setting Key(s) do not exist - This will only occur for legacy setting types.\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "\nError Codes:\n- `setting_type_version_schema_invalid` - Setting type/version jsonschema is invalid and could not be used to validate the setting value.  See response description for more details.\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "settings"
        ],
        "summary": "Delete Single Player Uuid Setting Self",
        "description": "Delete a single player setting\n\nRequired Permissions: `setting:write` or `setting:write:self`",
        "operationId": "delete_single_player_uuid_setting_self",
        "parameters": [
          {
            "description": "Setting Type to delete settings for.  Must be one of the known setting types",
            "required": true,
            "schema": {
              "title": "Setting Type Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "description": "Setting Type to delete settings for.  Must be one of the known setting types"
            },
            "name": "setting_type_id",
            "in": "path"
          },
          {
            "description": "Setting Key to delete setting for",
            "required": true,
            "schema": {
              "title": "Key",
              "maxLength": 256,
              "minLength": 1,
              "type": "string",
              "description": "Setting Key to delete setting for"
            },
            "name": "key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `does_not_exist` - Setting Key(s) do not exist\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/settings/v2/player/{player_uuid}/setting_type/{setting_type_id}/key/{key}": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get Single Player Uuid Setting",
        "description": "Get a single player setting\n\nRequired Permissions: `setting:read` for any player.  `setting:read:self` for the player of the access token.",
        "operationId": "get_single_player_uuid_setting",
        "parameters": [
          {
            "description": "Player to get settings for",
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "description": "Player to get settings for",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "description": "Setting Type to get settings for. Must be one of the known setting types",
            "required": true,
            "schema": {
              "title": "Setting Type Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "description": "Setting Type to get settings for. Must be one of the known setting types"
            },
            "name": "setting_type_id",
            "in": "path"
          },
          {
            "description": "Setting Key to get settings for",
            "required": true,
            "schema": {
              "title": "Key",
              "maxLength": 256,
              "minLength": 1,
              "type": "string",
              "description": "Setting Key to get settings for"
            },
            "name": "key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingData"
                }
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `not_found` - The setting key was not found\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "settings"
        ],
        "summary": "Set Single Player Uuid Setting",
        "description": "Update the value of a single player setting.\n    \nRequired Permissions: `setting:write` for any player.  `setting:write:self` for the player of the access token.\n\nIf Legacy types are enabled, to maintain compatibility with legacy applications, the following settings have special-case handling:\n* Setting Type `case` - Version `1` - key `create` - creates a new case set and returns the new key and data in the response. \n* Setting Type `case` - Version `1` - key is integer - Modify an existing case set.  If it does not exist, a 404 response with the `does_not_exist` error code. \n* Setting Type `loadout` - Version `1` - key `create` - creates a new loadout and returns the new key and data in the response.  All items keys will be given a new key \n* Setting Type `loadout` - Version `1` - key is integer - Modify an existing loadout.  If it does not exist, a 404 response with the `does_not_exist` error code.  When modifying loadout items, item keys that convert into integers/longs are treated as updates (and will error the update if they are not valid), all others are treated as creates and will be given a new key.",
        "operationId": "set_single_player_uuid_setting",
        "parameters": [
          {
            "description": "Player to update setting for",
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "description": "Player to update setting for",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "description": "Setting Type to update settings for. Must be one of the known setting types",
            "required": true,
            "schema": {
              "title": "Setting Type Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "description": "Setting Type to update settings for. Must be one of the known setting types"
            },
            "name": "setting_type_id",
            "in": "path"
          },
          {
            "description": "Setting Key to update setting for.  Must conform to the setting type key format",
            "required": true,
            "schema": {
              "title": "Key",
              "maxLength": 256,
              "minLength": 1,
              "type": "string",
              "description": "Setting Key to update setting for.  Must conform to the setting type key format"
            },
            "name": "key",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetSinglePlayerSettingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Set Single Player Uuid Setting",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/SettingData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n- `setting_version_invalid` - Setting Version is not valid for the provided type\n- `update_not_enabled` - Setting Type Version has updates disabled\n- `setting_key_invalid` - Setting Key does not meet requirements for that type/version\n- `setting_value_invalid` - Setting value failed validation against the jsonschema defined for the type/version.  See response description for more details\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `does_not_exist` - Setting Key(s) do not exist - This will only occur for legacy setting types.\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "\nError Codes:\n- `setting_type_version_schema_invalid` - Setting type/version jsonschema is invalid and could not be used to validate the setting value.  See response description for more details.\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "settings"
        ],
        "summary": "Delete Single Player Uuid Setting",
        "description": "Delete a single player setting\n\nRequired Permissions: `setting:write` for any player.  `setting:write:self` for the player of the access token.",
        "operationId": "delete_single_player_uuid_setting",
        "parameters": [
          {
            "description": "Player to delete setting for",
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "description": "Player to delete setting for",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "description": "Setting Type to delete settings for.  Must be one of the known setting types",
            "required": true,
            "schema": {
              "title": "Setting Type Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "description": "Setting Type to delete settings for.  Must be one of the known setting types"
            },
            "name": "setting_type_id",
            "in": "path"
          },
          {
            "description": "Setting Key to delete setting for",
            "required": true,
            "schema": {
              "title": "Key",
              "maxLength": 256,
              "minLength": 1,
              "type": "string",
              "description": "Setting Key to delete setting for"
            },
            "name": "key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `does_not_exist` - Setting Key(s) do not exist\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/settings/v1/player/{player_id}/setting_type/{setting_type_id}/key/{key}": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get Single Player Id Setting",
        "description": "Get a single player setting\n\nRequired Permissions: `setting:read` for any player.  `setting:read:self` for the player of the access token.\n\n**DEPRECATED** - Use v2 instead",
        "operationId": "get_single_player_id_setting",
        "parameters": [
          {
            "description": "Player to get settings for",
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer",
              "description": "Player to get settings for"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "description": "Setting Type to get settings for. Must be one of the known setting types",
            "required": true,
            "schema": {
              "title": "Setting Type Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "description": "Setting Type to get settings for. Must be one of the known setting types"
            },
            "name": "setting_type_id",
            "in": "path"
          },
          {
            "description": "Setting Key to get settings for",
            "required": true,
            "schema": {
              "title": "Key",
              "maxLength": 256,
              "minLength": 1,
              "type": "string",
              "description": "Setting Key to get settings for"
            },
            "name": "key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingData"
                }
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `not_found` - The setting key was not found\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "settings"
        ],
        "summary": "Set Single Player Id Setting",
        "description": "Update the value of a single player setting.\n\nRequired Permissions: `setting:write` for any player.  `setting:write:self` for the player of the access token.\n\nIf Legacy types are enabled, to maintain compatibility with legacy applications, the following settings have special-case handling:\n* Setting Type `case` - Version `1` - key `create` - creates a new case set and returns the new key and data in the response. \n* Setting Type `case` - Version `1` - key is integer - Modify an existing case set.  If it does not exist, a 404 response with the `does_not_exist` error code. \n* Setting Type `loadout` - Version `1` - key `create` - creates a new loadout and returns the new key and data in the response.  All items keys will be given a new key \n* Setting Type `loadout` - Version `1` - key is integer - Modify an existing loadout.  If it does not exist, a 404 response with the `does_not_exist` error code.  When modifying loadout items, item keys that convert into integers/longs are treated as updates (and will error the update if they are not valid), all others are treated as creates and will be given a new key. \n\n**DEPRECATED** - Use the v2 endpoint instead.  This endpoint will be removed in a future release.",
        "operationId": "set_single_player_id_setting",
        "parameters": [
          {
            "description": "Player to update setting for",
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer",
              "description": "Player to update setting for"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "description": "Setting Type to update settings for. Must be one of the known setting types",
            "required": true,
            "schema": {
              "title": "Setting Type Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "description": "Setting Type to update settings for. Must be one of the known setting types"
            },
            "name": "setting_type_id",
            "in": "path"
          },
          {
            "description": "Setting Key to update setting for.  Must conform to the setting type key format",
            "required": true,
            "schema": {
              "title": "Key",
              "maxLength": 256,
              "minLength": 1,
              "type": "string",
              "description": "Setting Key to update setting for.  Must conform to the setting type key format"
            },
            "name": "key",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetSinglePlayerSettingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Set Single Player Id Setting",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/SettingData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n- `setting_version_invalid` - Setting Version is not valid for the provided type\n- `update_not_enabled` - Setting Type Version has updates disabled\n- `setting_key_invalid` - Setting Key does not meet requirements for that type/version\n- `setting_value_invalid` - Setting value failed validation against the jsonschema defined for the type/version.  See response description for more details\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `does_not_exist` - Setting Key(s) do not exist - This will only occur for legacy setting types.\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "\nError Codes:\n- `setting_type_version_schema_invalid` - Setting type/version jsonschema is invalid and could not be used to validate the setting value.  See response description for more details.\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "settings"
        ],
        "summary": "Delete Single Player Id Setting",
        "description": "Delete a single player setting\n    \nRequired Permissions: `setting:write` for any player.  `setting:write:self` for the player of the access token.\n    \n**DEPRECATED** - Use v2 instead",
        "operationId": "delete_single_player_id_setting",
        "parameters": [
          {
            "description": "Player to delete setting for",
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer",
              "description": "Player to delete setting for"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "description": "Setting Type to delete settings for.  Must be one of the known setting types",
            "required": true,
            "schema": {
              "title": "Setting Type Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "description": "Setting Type to delete settings for.  Must be one of the known setting types"
            },
            "name": "setting_type_id",
            "in": "path"
          },
          {
            "description": "Setting Key to delete setting for",
            "required": true,
            "schema": {
              "title": "Key",
              "maxLength": 256,
              "minLength": 1,
              "type": "string",
              "description": "Setting Key to delete setting for"
            },
            "name": "key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `does_not_exist` - Setting Key(s) do not exist\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/settings/v1/setting_type": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get Config For All Setting Types",
        "description": "Get all setting types and their configuration.\n    \nRequired Permissions: `setting-config:read`",
        "operationId": "get_config_for_all_setting_types",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Config For All Setting Types",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/SettingType"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/settings/v1/setting_type/{setting_type_id}/v": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get Config For Single Setting Type All Versions",
        "description": "Get a configuration and all versions for a given setting type ID.\n    \nRequired Permissions: `setting-config:read`",
        "operationId": "get_config_for_single_setting_type_all_versions",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Setting Type Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "setting_type_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Config For Single Setting Type All Versions",
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/SettingTypeVersion"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/settings/v1/setting_type/{setting_type_id}/v/{setting_version_id}": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get Config For Single Setting Type And Version",
        "description": "Get a specific version of a specific setting type.",
        "operationId": "get_config_for_single_setting_type_and_version",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Setting Type Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "setting_type_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Setting Version Id",
              "type": "integer"
            },
            "name": "setting_version_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingTypeVersion"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `setting_version_id_not_found` - The setting Version was not found for that type\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v1/verify": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Verify",
        "operationId": "verify",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v1/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login",
        "operationId": "login",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "User-Agent",
              "type": "string"
            },
            "name": "user-agent",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Forwarded-For",
              "type": "string"
            },
            "name": "x-forwarded-for",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgreementMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/users/v1/portaltoken/details": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Get Portal Token Details",
        "operationId": "get_portal_token_details",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortalTokenDetailsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Portal Token Details V1 Portaltoken Details Post",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/v1/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout",
        "operationId": "logout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/v1/publickeys": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get All Public Keys",
        "description": "Get all the current public keys.\n\nIt is encouraged to get keys by id, rather than all at once (to more easily allow new keys to cycle though)",
        "operationId": "get_all_public_keys",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicKeyList"
                }
              }
            }
          }
        }
      }
    },
    "/users/v1/publickeys/{key_id}": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get Public Key By Id",
        "operationId": "get_public_key_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Key Id",
              "type": "string"
            },
            "name": "key_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicKey"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/v1/generateKey": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Generate Key",
        "description": "Generate and return a new key that matches the configuration required for private keys.\n\nThis does NOT add the key to any internal list, and is purely for convenience for maintainers",
        "operationId": "generate_key",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/users/v1/player/me/uuid": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Player Uuid From Player Id For Self",
        "description": "Get a player's uuid from their id for the active player on the access token.",
        "operationId": "get_player_uuid_from_player_id_for_self",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Player Uuid From Player Id For Self V1 Player Me Uuid Get",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v1/player/{player_id}/uuid": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Player Uuid From Player Id",
        "description": "Get a player's uuid from their id.",
        "operationId": "get_player_uuid_from_player_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Player Uuid From Player Id V1 Player  Player Id  Uuid Get",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v2/player/me/uuid": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Player Uuid From Player Id For Self V2",
        "description": "Get a player's uuid from their id for the active player on the access token.",
        "operationId": "get_player_uuid_from_player_id_for_self_v2",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerUuidFromId"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v2/player/{player_id}/uuid": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Player Uuid From Player Id V2",
        "description": "Get a player's uuid from their id.",
        "operationId": "get_player_uuid_from_player_id_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerUuidFromId"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v2/player/me/id": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Player Id From Player Uuid For Self",
        "description": "Get a player's id from their uuid for the active player on the access token.",
        "operationId": "get_player_id_from_player_uuid_for_self",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerIdWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v2/player/{player_uuid}/id": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Player Id From Player Uuid",
        "description": "Get a player's id from their uuid.",
        "operationId": "get_player_id_from_player_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerIdWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v2/player/me/links": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Player Links For Self",
        "description": "Get a player's linked portals for the active player on the access token.",
        "operationId": "get_player_links_for_self",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerLinkedPortalsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v2/player/{player_uuid}/links": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Player Links",
        "description": "Get a player's linked portals.",
        "operationId": "get_player_links",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerLinkedPortalsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v1/player/{player_id}/linked_portals": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Player Linked Portals",
        "description": "Get a player's linked portals.",
        "operationId": "get_player_linked_portals",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerLinkedPortalsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v1/player": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Lookup Player",
        "description": "Lookup players by various parameters.  Note that this does NOT find the active player, or other metadata about the resulting players.  It is suggested to call `/v1/player/{player_id}/linked_portals` for each player for that info, if necessary.",
        "operationId": "lookup_player",
        "parameters": [
          {
            "description": "Lookup players by display names",
            "required": false,
            "schema": {
              "title": "Display Name",
              "type": "array",
              "items": {
                "maxLength": 256,
                "type": "string"
              },
              "description": "Lookup players by display names",
              "default": []
            },
            "name": "display_name",
            "in": "query"
          },
          {
            "description": "Lookup players by their portal identity for this platform",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Portal"
                }
              ],
              "description": "Lookup players by their portal identity for this platform"
            },
            "name": "identity_platform",
            "in": "query"
          },
          {
            "description": "Lookup players by their Portal Identity",
            "required": false,
            "schema": {
              "title": "Identities",
              "type": "array",
              "items": {
                "maxLength": 2048,
                "type": "string"
              },
              "description": "Lookup players by their Portal Identity",
              "default": []
            },
            "name": "identities",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupResults"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v2/player:iterate": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Players Paged",
        "description": "Iterate over all players.  This is a paginated API, so you will need to call it multiple times to get all players.\nThere is no guaranteed ordering of players.  So if you need to run multiple iterations for comparison, you will need to sort the results.",
        "operationId": "get_players_paged",
        "parameters": [
          {
            "description": "cursor to continue iteration.  Leaving this empty will begin a new query",
            "required": false,
            "schema": {
              "title": "Cursor",
              "maxLength": 4096,
              "type": "string",
              "description": "cursor to continue iteration.  Leaving this empty will begin a new query",
              "default": ""
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "number of players to return",
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "description": "number of players to return",
              "default": 100
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerIterateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v1/person/me/info": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Person For Self",
        "description": "Get information for the person on the access token.",
        "operationId": "get_person_for_self",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonInfoResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Update Person For Self",
        "description": "Update information for the person on the access token.",
        "operationId": "update_person_for_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePersonInfoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v1/person/{person_id}/info": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Person",
        "description": "Get information for a person.",
        "operationId": "get_person",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Person Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "person_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonInfoResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Update Person",
        "description": "Update the information for a person.",
        "operationId": "update_person",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Person Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "person_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePersonInfoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v1/person/me/email/list": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Person Email List For Self",
        "description": "Get the email list ids for a person on the access token",
        "operationId": "get_person_email_list_for_self",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonEmailListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Update Person Email List For Self",
        "description": "Update the email list for person on the access token.  This is used to control which emails a person receives.",
        "operationId": "update_person_email_list_for_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonEmailListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v1/person/{person_id}/email/list": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Person Email List",
        "description": "Get the email list ids for a person",
        "operationId": "get_person_email_list",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Person Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "person_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonEmailListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Update Person Email List",
        "description": "Update the email list for a person.  This is used to control which emails a person receives.",
        "operationId": "update_person_email_list",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Person Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "person_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonEmailListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v1/person/me/purge": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Queue Purge Status For Me",
        "description": "Get the purge status for a person of the access token.",
        "operationId": "get_queue_purge_status_for_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurgeResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Queue Me For Purge",
        "description": "Queue person on the access token for purging. This can occur up to a configured amount of time in the future or can occur immediately depending on `suggested_purge_time`.",
        "operationId": "queue_me_for_purge",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurgeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurgeResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Dequeue Me For Purge",
        "description": "Dequeue the active person of the access token if they are queued to be purged. This will only work if the purge has not already begun.",
        "operationId": "dequeue_me_for_purge",
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v1/person/{person_id}/purge": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Queue Purge Status For Person",
        "description": "Get the purge status for a person. Requires permission: purge:person:admin",
        "operationId": "get_queue_purge_status_for_person",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Person Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "person_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurgeResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Queue Person For Purge",
        "description": "Queue a person for purging. This can occur up to a configured amount of time in the future or can occur immediately depending on `suggested_purge_time`. Requires permission: purge:person:admin",
        "operationId": "queue_person_for_purge",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Person Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "person_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurgeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurgeResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Dequeue Person For Purge",
        "description": "Dequeue a Person that is queued to be purged. This will only work if the purge has not already begun. Requires permission: purge:person:admin",
        "operationId": "dequeue_person_for_purge",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Person Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "person_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v1/oauth/login/{platform}": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Oauth Login",
        "operationId": "oauth_login",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OAuthPortal"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "State",
              "maxLength": 4096,
              "type": "string"
            },
            "name": "state",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Redirect Uri",
              "type": "string"
            },
            "name": "redirect_uri",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "User-Agent",
              "type": "string"
            },
            "name": "user-agent",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Forwarded-For",
              "type": "string"
            },
            "name": "x-forwarded-for",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/v1/oauth/response/{platform}": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Oauth Response",
        "operationId": "oauth_response",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OAuthPortal"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Code",
              "type": "string",
              "default": ""
            },
            "name": "code",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "State",
              "type": "string",
              "default": ""
            },
            "name": "state",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "User-Agent",
              "type": "string"
            },
            "name": "user-agent",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Forwarded-For",
              "type": "string"
            },
            "name": "x-forwarded-for",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/v1/oauth/token": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Oauth Token Exchange",
        "operationId": "oauth_token_exchange",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "User-Agent",
              "type": "string"
            },
            "name": "user-agent",
            "in": "header"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Forwarded-For",
              "type": "string"
            },
            "name": "x-forwarded-for",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuthTokenExchange"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthTokenResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/v2/oauth/token": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Token",
        "description": "OAuth2 Token Endpoint. For more information see: <a href=\"https://datatracker.ietf.org/doc/html/rfc6749#section-3.2\" target=\"_blank\">Token Endpoint Spec</a>.",
        "operationId": "token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/users/v1/link": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Link",
        "operationId": "link",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HTTPAuthorizationCredentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v1/unlink": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Unlink",
        "operationId": "unlink",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v1/cross-progression/enable": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Enable Cross Progression",
        "operationId": "enable_cross_progression",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v1/cross-progression/disable": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Disable Cross Progression",
        "operationId": "disable_cross_progression",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/users/v1/sendinblue/contact": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Upsert Contact",
        "description": "Create or update a contact with SendInBlue, Requires permission: user:sendinblue:write",
        "operationId": "upsert_contact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendInBlueContact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOnly"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/template": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get All Session Templates",
        "description": "Get the config about all session templates\n\nRequired Auth Permissions: `session:read:config`\n\nRequired Session Permissions: None",
        "operationId": "get_all_session_templates",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionTemplates"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/template/{session_type}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Session Template By Type",
        "description": "Get config about a session template by ID\n\nRequired Auth Permissions: `{AuthPermissions.SESSION_READ_CONFIG}`\n\nRequired Session Permissions: None",
        "operationId": "get_session_template_by_type",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Type",
              "type": "string"
            },
            "name": "session_type",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionTemplate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/browser": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Browser Sessions By Type",
        "description": "Get all public sessions of a specific type\n\nRequired Auth Permissions: `session:read:browser`\n\nRequired Permissions: None",
        "operationId": "get_browser_sessions_by_type",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Type",
              "type": "string"
            },
            "name": "session_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Cursor",
              "type": "integer",
              "default": 0
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/session": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create Or Join Session",
        "description": "Join the first publicly available session of given type. If there is no public session, and the session type\npermits player made sessions, create a new session and put the player in it\n\nRequired Auth Permissions: `session:update:self`\n\nRequired Session Permissions: None",
        "operationId": "create_or_join_session",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrJoinRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionJoinResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/session/{session_id}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Session By Id",
        "description": "Get Session by ID. This request will return limited results for non-members of the session, such as excluding info for \nhow to connect to the instance. Elevated permissions can bypass that restriction\n\nRequired Auth Permissions: `session:read:self` for users requesting complete data about sessions they are in\n`session:read:any` for users requesting complete data about sessions they are not in\n\nRequired Session Permissions: None for limited results. `SessionPermissions.active_in_session` to get complete results for users who do not have the `session:read:any` auth permission",
        "operationId": "get_session_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Session By Id",
        "description": "Update session info by session id\n\nRequired Auth Permissions: `session:update:self` for users patching sessions they are in.\n`session:update:any` for users patching sessions they are not in.\n\nRequired Session Permissions: `SessionPermissions.session_admin` for users who do not have the `session:update:any` auth permission",
        "operationId": "update_session_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/session/allocation/{allocation_id}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Session By Allocation Id",
        "description": "Get session by allocation ID. Returns the same limited results as getting the session by session id\n\nRequired Auth Permissions: `session:read:allocation`\n\nRequired Session Permissions: None",
        "operationId": "get_session_by_allocation_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Allocation Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "allocation_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/session/{session_id}/browser": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Post Browser Info",
        "description": "Register session in the public browser\n\nRequired Auth Permissions: `session:update:self` for users registering sessions they are in \n`session:update:any` for users registering any session\n\nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:update:any` auth permission",
        "operationId": "post_browser_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrowserInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowserInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Delete Browser Info",
        "description": "Delete the session from the public browser\n\nRequired Auth Permissions: `session:update:self` for users deleting sessions they are in from the browser\n`session:update:any` for users deleting any session from the browser\n\nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:update:any` auth permission",
        "operationId": "delete_browser_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Browser Info",
        "description": "Update the browser info for the session\n\nRequired Auth Permissions: `session:update:self` for users patching sessions they are in\n`session:update:any` for users patching any session\n\nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:update:any` auth permission",
        "operationId": "update_browser_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrowserInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowserInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/session/{session_id}/instance": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Handle Instance Request",
        "description": "Request an instance be spawned for the session, or register self as a host of the instance\n\nRequired Auth Permissions: `session:update:self` for users requesting instances for sessions they are in \n`session:update:any` for users requesting instances for any session\n             \nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:update:any` auth permission",
        "operationId": "handle_instance_request",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "End Instance",
        "description": "Unregister the instance from the session.\n\nRequired Auth Permissions: `session:update:self` for users deleting instances for sessions they are in \n`session:update:any` for users deleting instances for any session\n             \nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:update:any` auth permission",
        "operationId": "end_instance",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "204": {
            "description": "No Content",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Instance Info",
        "description": "Update info about the instance\n\nRequired Auth Permissions: `session:update:self` for users patching instances for sessions they are in \n`session:update:any` for users patching instances for any session\n             \nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:update:any` auth permission",
        "operationId": "update_instance_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceInfoUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/session/{session_id}/match": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Start Match",
        "description": "Begin a new match for the current session, on the current instance\n\nRequired Auth Permissions: `session:update:self` for users starting matches for sessions they are in \n`session:update:any` for users starting matches for any session\n             \nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:update:any` auth permission",
        "operationId": "start_match",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "End Match",
        "description": "Unregister the match from the session.\n               \nRequired Auth Permissions: `session:update:self` for users deleting matches for sessions they are in \n`session:update:any` for users deleting matches for any session\n             \nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:update:any` auth permission",
        "operationId": "end_match",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Match Info",
        "description": "Update info about a match\n\nRequired Auth Permissions: `session:update:self` for users patching matches for sessions they are in \n`session:update:any` for users patching matches for any session\n             \nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:update:any` auth permission",
        "operationId": "update_match_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/session/{session_id}/player/me": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Join Session By Id Self",
        "description": "Join a session with currently authed player\n\nRequired Auth Permissions: `session:update:self`\n\nRequired Session Permissions: None",
        "operationId": "join_session_by_id_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelfSessionPlayerUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPlayerUpdateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Leave Session By Id Self",
        "description": "Leave a session with currently authed player\n\nRequired Auth Permissions: `session:update:self`\n\nRequired Permissions: None",
        "operationId": "leave_session_by_id_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/session/{session_id}/player/uuid/{player_uuid}": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Session Player By Uuid",
        "description": "Add or invite a player to the session, or change the status of a player already in the session\n\nRequired Auth Permissions: `session:update:self` for users acting on themselves, or inviting to a session they are in\n`session:update:any` for users acting on others, or sessions they are not in\n\nRequired Session Permissions: None if session is publicly joinable or the player has been invited. \n`SessionPermissions.session_admin` for other operations",
        "operationId": "update_session_player_by_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionPlayerUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPlayerUpdateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Kick Player From Session By Uuid",
        "description": "Kick or Remove a player from a session, or cancel an invite for a player to the session\n\nRequired Auth Permissions: `session:update:self` for users operating on themselves or sessions they are in\n`session:update:any` for operating on sessions the user is not in\n\nRequired Session Permissions: None for users operating on themselves. \n`SessionPermissions.session_admin` for operating on other players in your session",
        "operationId": "kick_player_from_session_by_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/session/{session_id}/player/id/{player_id}": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Session Player By Id",
        "description": "Add or invite a player to the session, or change the status of a player already in the session\n\nRequired Auth Permissions: `session:update:self` for users acting on themselves, or inviting to a session they are in\n`session:update:any` for users acting on others, or sessions they are not in\n\nRequired Session Permissions: None if session is publicly joinable or the player has been invited.\n`SessionPermissions.session_admin` for other operations\n\n**DEPRECATED** - Use the player/uuid endpoint instead",
        "operationId": "update_session_player_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionPlayerUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPlayerUpdateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Kick Player From Session By Id",
        "description": "Kick or Remove a player from a session, or cancel an invite for a player to the session\n\nRequired Auth Permissions: `session:update:self` for users operating on sessions they are in.\n`session:update:any` for users operating on sessions they are not in\n\nRequired Session Permissions: None for players operating on themselves.\n`SessionPermissions.session_admin` for operating on other players in your session\n\n**DEPRECATED** - Use the player/uuid endpoint instead",
        "operationId": "kick_player_from_session_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/session/{session_id}/event": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Session Events",
        "description": "Get all events for the session.  Empty list means there is no event history for it.\n\nRequired Auth Permissions: `session:read-event:active` for users getting events about sessions they are in.\n`session:read-event:any` for users getting events about sessions they are not in\n\nRequired Session Permissions: `SessionPermissions.active_in_session` for users that do not have the `session:read-event:any` auth permission",
        "operationId": "get_session_events",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page Num",
              "minimum": 0,
              "type": "integer",
              "default": 0
            },
            "name": "page_num",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionEvents"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create Session Event",
        "description": "Create an event in the log for this session.\nInternal session operations will create new events that are accessible from the get request.\n\nPlayer clients and instances are expected to create events here when something occurs on their clients that is\nrelevant.\n\nRequired Auth Permissions: `session:update-event:active` for users posting events about sessions they are in.\n`session:update-event:any` for users posting events about sessions they are not in\n\nRequired Session Permissions: `SessionPermissions.active_in_session` for users that do not have the `session:update-event:any` auth permission",
        "operationId": "create_session_event",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionEventCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/platform/{platform_id}/session/{platform_session_id_base64}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Platform Session Info",
        "description": "Get information about a platform session\n\nRequired Auth Permissions: `session:read:self` for users requesting data about platform sessions they are in\n`session:read:any` for users requesting data about platform sessions they are not in\n\nRequired Session Permissions: `SessionPermissions.active_in_session` for users that do not have the `session:read:any` auth permission",
        "operationId": "get_platform_session_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PlatformID"
            },
            "name": "platform_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Platform Session Id Base64",
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "name": "platform_session_id_base64",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSession"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Platform Session doesn't exist.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/platform/{platform_id}/session/{platform_session_id_base64}/player/me": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Join Session By Platform Session Id Self",
        "description": "Join a platform session by ID, and the parent session\n\nRequired Auth Permissions: `session:update:self`\n\nRequired Session Permissions: None",
        "operationId": "join_session_by_platform_session_id_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Platform Session Id Base64",
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "name": "platform_session_id_base64",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PlatformID"
            },
            "name": "platform_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/platform/{platform_id}/session/{platform_session_id_base64}/player/uuid/{player_uuid}": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Join Session By Platform Session By Uuid",
        "description": "Join a platform session by platform ID and parent platform session id\n\nRequired Auth Permissions: `session:update:self` for users acting on themselves\n`session:update:any` for users who are updating a different user\n\nRequired Session Permissions: None",
        "operationId": "join_session_by_platform_session_by_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Platform Session Id Base64",
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "name": "platform_session_id_base64",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "integer"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PlatformID"
            },
            "name": "platform_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/platform/{platform_id}/session/{platform_session_id_base64}/player/id/{player_id}": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Join Session By Platform Session Id",
        "description": "Join a platform session by platform ID and parent platform session id\n\nRequired Auth Permissions: `session:update:self` for users acting on themselves\n`session:update:any` for users who are updating a different user\n\nRequired Session Permissions: None\n\n**DEPRECATED** - Use player/uuid endpoint instead",
        "operationId": "join_session_by_platform_session_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Platform Session Id Base64",
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "name": "platform_session_id_base64",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PlatformID"
            },
            "name": "platform_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/player/me/session": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Player Sessions Self",
        "description": "Get Sessions associated the current player\n\nRequired Auth Permissions: `session:read:self`\n            \nRequired Session Permissions: None",
        "operationId": "get_player_sessions_self",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerSessions"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/player/uuid/{player_uuid}/session": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Player Sessions By Uuid",
        "description": "Get Sessions associated with a player by uuid\n\nRequired Auth Permissions: `session:read:self` for users requesting data about themselves\n`session:read:any` for users requesting data about others\n\nRequired Session Permissions: None",
        "operationId": "get_player_sessions_by_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerSessions"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/player/id/{player_id}/session": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Player Sessions",
        "description": "Get Sessions associated with a player by id\n\nRequired Auth Permissions: `session:read:self` for users requesting data about themselves\n`session:read:any` for users requesting data about others\n\nRequired Session Permissions: None\n\n**DEPRECATED** - Use player/uuid endpoint instead",
        "operationId": "get_player_sessions",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerSessions"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/connection-info": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Connection Info Self",
        "description": "Get public connection info for self\n\nRequired Auth Permissions: `session:read:self`\n\nRequired Permissions: None",
        "operationId": "get_connection_info_self",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "X-Forwarded-For",
              "type": "string",
              "default": ""
            },
            "name": "x-forwarded-for",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/session/{session_id}/queue": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Join Queue",
        "description": "Add session to a matchmaking queue\n\nRequired Permissions: `SessionPermissions.session_admin`",
        "operationId": "join_queue",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueueJoinRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueJoinResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Leave Queue",
        "description": "Remove session from a matchmaking queue\n               \nRequired Permissions: `SessionPermissions.session_admin`",
        "operationId": "leave_queue",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/match-made-session": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create Match",
        "description": "Create a match session based on matchmaking results. Only used by the matchmaking system, and not players\n\nRequired Permissions: `SessionPermissions.session_admin`",
        "operationId": "create_match",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingSessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/queues": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "Get All Queue Info",
        "description": "Get all the available and active queues that sessions can try to join\n\nRequired Permissions: None",
        "operationId": "get_all_queue_info",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Cursor",
              "type": "integer",
              "default": 0
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueuesResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/instance-launch-templates/{instance_launch_template_id}": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "Get All Map Game Info",
        "description": "Get the config used to launch an instance by the launch template id. Launch template ID can be found in\nMatchMakingProfiles that are return by the `/v1/match-making-templates/` endpoint\n\nRequired Permissions: None",
        "operationId": "get_all_map_game_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Instance Launch Template Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "instance_launch_template_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceLaunchTemplate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/match-making-templates/{template_group_id}": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "Get Match Making Templates",
        "description": "Get match making templates, rules, and profiles for a template group. Groups can be found on the queue information\nfrom the `/v1/queues` endpoint\n            \nRequired Permissions: None",
        "operationId": "get_match_making_templates",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Template Group Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "template_group_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingTemplateGroup"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/session/{session_id}/instance/fubar": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Report Fubar",
        "description": "Report an instance as fubar with a reason and optional metadata. Results will be graphed on your product's grafana page\n\nRequired Permissions: `SessionPermissions.session_admin`",
        "operationId": "report_fubar",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Session Id",
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceFubar"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FubarResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/session/v1/regions": {
      "get": {
        "tags": [
          "Regions"
        ],
        "summary": "Get All Regions",
        "description": "Get all of the enabled regions and their configuration",
        "operationId": "get_all_regions",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Cursor",
              "type": "integer",
              "default": 0
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegionsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/catalog": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog All",
        "operationId": "get_catalog_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/catalog/xp": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Xp All",
        "operationId": "get_catalog_xp_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XpTables"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/catalog/xp/{xp_table_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Xp Table",
        "operationId": "get_catalog_xp_table",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Xp Table Id",
              "type": "integer"
            },
            "name": "xp_table_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XpTable"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/catalog/portal-use-ruleset": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Portal Use Rulesets All",
        "operationId": "get_catalog_portal_use_rulesets_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalUseRulesets"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/catalog/portal-use-ruleset/{portal_use_ruleset_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Portal Use Ruleset",
        "operationId": "get_catalog_portal_use_ruleset",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Portal Use Ruleset Id",
              "type": "integer"
            },
            "name": "portal_use_ruleset_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalUseRuleset"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/catalog/inventory-bucket-use-rule-set": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Inventory Bucket Use Rule Sets All",
        "operationId": "get_catalog_inventory_bucket_use_rule_sets_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryBucketUseRuleSets"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/catalog/inventory-bucket-use-rule-set/{inventory_bucket_use_ruleset_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Inventory Bucket Use Rule Set",
        "operationId": "get_catalog_inventory_bucket_use_rule_set",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Inventory Bucket Use Ruleset Id",
              "type": "string"
            },
            "name": "inventory_bucket_use_ruleset_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryBucketUseRuleSet"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/catalog/price-point": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Price Points All",
        "operationId": "get_catalog_price_points_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricePoints"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/catalog/price-point/{price_point_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Price Point",
        "operationId": "get_catalog_price_point",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Price Point Id",
              "minLength": 1,
              "type": "string"
            },
            "name": "price_point_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricePoint"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/catalog/item": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Items All",
        "operationId": "get_catalog_items_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Items"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/catalog/item/{item_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Item",
        "operationId": "get_catalog_item",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Item Id",
              "type": "integer"
            },
            "name": "item_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/catalog/vendor": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Vendors All",
        "operationId": "get_catalog_vendors_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendors"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/catalog/vendor/{vendor_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Vendor",
        "operationId": "get_catalog_vendor",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Vendor Id",
              "type": "integer"
            },
            "name": "vendor_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/catalog/loot": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Loots All",
        "operationId": "get_catalog_loots_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Loots"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/catalog/loot/{loot_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Loot",
        "operationId": "get_catalog_loot",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Loot Id",
              "type": "integer"
            },
            "name": "loot_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Loot"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/catalog/time-frame": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Time Frames All",
        "operationId": "get_catalog_time_frames_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeFrames"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/catalog/time-frame/{time_frame_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Time Frame",
        "operationId": "get_catalog_time_frame",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Time Frame Id",
              "type": "integer"
            },
            "name": "time_frame_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeFrame"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/me/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Inventory Uuid Self",
        "operationId": "get_player_inventory_uuid_self",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Item Ids",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "default": []
            },
            "name": "item_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryContextResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "503": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request, when the server should have the resource available",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Many Player Inventory Uuid Self",
        "operationId": "modify_many_player_inventory_uuid_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create Player Inventory Uuid Self",
        "operationId": "create_player_inventory_uuid_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/{player_uuid}/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Inventory Uuid",
        "operationId": "get_player_inventory_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Item Ids",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "default": []
            },
            "name": "item_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryContextResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "503": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request, when the server should have the resource available",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Many Player Inventory Uuid",
        "operationId": "modify_many_player_inventory_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create Player Inventory Uuid",
        "operationId": "create_player_inventory_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/player/me/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Inventory Self",
        "operationId": "get_player_inventory_self",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Item Ids",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "default": []
            },
            "name": "item_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryContextResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "503": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request, when the server should have the resource available",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Many Player Inventory Self",
        "operationId": "modify_many_player_inventory_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create Player Inventory Self",
        "operationId": "create_player_inventory_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/player/{player_id}/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Inventory",
        "operationId": "get_player_inventory",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Item Ids",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "default": []
            },
            "name": "item_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryContextResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "503": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request, when the server should have the resource available",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Many Player Inventory",
        "operationId": "modify_many_player_inventory",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create Player Inventory",
        "operationId": "create_player_inventory",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/me/inventory/{inventory_id}": {
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Player Inventory Uuid Self",
        "operationId": "modify_player_inventory_uuid_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Inventory Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "inventory_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/{player_uuid}/inventory/{inventory_id}": {
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Player Inventory Uuid",
        "operationId": "modify_player_inventory_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Inventory Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "inventory_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/player/me/inventory/{inventory_id}": {
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Player Inventory Self",
        "operationId": "modify_player_inventory_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Inventory Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "inventory_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/player/{player_id}/inventory/{inventory_id}": {
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Player Inventory",
        "operationId": "modify_player_inventory",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Inventory Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "inventory_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/me/session": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Inventory Session Info By Player Uuid Self",
        "operationId": "get_inventory_session_info_by_player_uuid_self",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySession"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Inventory Session By Player Uuid Self",
        "operationId": "create_new_inventory_session_by_player_uuid_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventorySessionCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySessionCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/{player_uuid}/session": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Inventory Session Info By Player Uuid",
        "operationId": "get_inventory_session_info_by_player_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySession"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Inventory Session By Player Uuid",
        "operationId": "create_new_inventory_session_by_player_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventorySessionCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySessionCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/player/me/session": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Inventory Session Info Self",
        "operationId": "get_inventory_session_info_self",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySession"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Inventory Session Self",
        "operationId": "create_new_inventory_session_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventorySessionCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySessionCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/player/{player_id}/session": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Inventory Session Info",
        "operationId": "get_inventory_session_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySession"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Inventory Session",
        "operationId": "create_new_inventory_session",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventorySessionCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySessionCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/me/entitlement": {
      "post": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Process Platform Entitlement For Me",
        "description": "Process platform entitlements, consuming from the platform inventory where possible and generating orders.  \n\nNote that some orders may not be fulfilled at the completion of this request and need to be polled separately for results",
        "operationId": "process_platform_entitlement_for_me",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformEntitlementProcessRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformEntitlementProcessResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/{player_uuid}/entitlement": {
      "post": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Process Platform Entitlements By Player Uuid",
        "description": "Process platform entitlements, consuming from the platform inventory where possible and generating orders.  \n\nNote that some orders may not be fulfilled at the completion of this request and need to be polled separately for results",
        "operationId": "process_platform_entitlements_by_player_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformEntitlementProcessRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformEntitlementProcessResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/me/entitlement/request/{request_id}": {
      "get": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Retrieve Entitlements For Me",
        "description": "Get the status of a platform entitlement request by request id",
        "operationId": "retrieve_entitlements_for_me",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Request Id",
              "type": "string"
            },
            "name": "request_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformEntitlementProcessResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/{player_uuid}/entitlement/request/{request_id}": {
      "get": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Retrieve Entitlements By Player Uuid",
        "description": "Get the status of a platform entitlement request by request id",
        "operationId": "retrieve_entitlements_by_player_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Request Id",
              "type": "string"
            },
            "name": "request_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformEntitlementProcessResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/me/order": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Uuid Orders Self",
        "description": "Get recent player orders about a player. Empty results means there were no recent orders.If starting_position and cursor are given, starting_position will be ignored in favor of cursor",
        "operationId": "get_player_uuid_orders_self",
        "parameters": [
          {
            "description": "Inclusive starting time for the first order",
            "required": false,
            "schema": {
              "title": "Time Zone Aware Datetime",
              "type": "string",
              "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
              "format": "date-time"
            },
            "name": "starting_position",
            "in": "query"
          },
          {
            "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored",
            "required": false,
            "schema": {
              "title": "Cursor",
              "type": "string",
              "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The direction to search.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "The direction to search.",
              "default": "asc"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "The number of Orders to return",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of Orders to return",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrdersResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Player Uuid Order Self",
        "operationId": "create_new_player_uuid_order_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerOrderCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/{player_uuid}/order": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Uuid Orders",
        "description": "Get recent player orders about a player. Empty results means there were no recent orders.If starting_position and cursor are given, starting_position will be ignored in favor of cursor",
        "operationId": "get_player_uuid_orders",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "description": "Inclusive starting time for the first order",
            "required": false,
            "schema": {
              "title": "Time Zone Aware Datetime",
              "type": "string",
              "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
              "format": "date-time"
            },
            "name": "starting_position",
            "in": "query"
          },
          {
            "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored",
            "required": false,
            "schema": {
              "title": "Cursor",
              "type": "string",
              "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The direction to search.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "The direction to search.",
              "default": "asc"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "The number of Orders to return",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of Orders to return",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrdersResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Player Uuid Order",
        "operationId": "create_new_player_uuid_order",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerOrderCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/player/me/order": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Orders Self",
        "description": "Get recent player orders about a player. Empty results means there were no recent orders.If starting_position and cursor are given, starting_position will be ignored in favor of cursor",
        "operationId": "get_player_orders_self",
        "parameters": [
          {
            "description": "Inclusive starting time for the first order",
            "required": false,
            "schema": {
              "title": "Time Zone Aware Datetime",
              "type": "string",
              "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
              "format": "date-time"
            },
            "name": "starting_position",
            "in": "query"
          },
          {
            "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored",
            "required": false,
            "schema": {
              "title": "Cursor",
              "type": "string",
              "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The direction to search.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "The direction to search.",
              "default": "asc"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "The number of Orders to return",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of Orders to return",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrdersResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Player Order Self",
        "operationId": "create_new_player_order_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerOrderCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/player/{player_id}/order": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Orders",
        "description": "Get recent player orders about a player. Empty results means there were no recent orders.If starting_position and cursor are given, starting_position will be ignored in favor of cursor",
        "operationId": "get_player_orders",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "description": "Inclusive starting time for the first order",
            "required": false,
            "schema": {
              "title": "Time Zone Aware Datetime",
              "type": "string",
              "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
              "format": "date-time"
            },
            "name": "starting_position",
            "in": "query"
          },
          {
            "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored",
            "required": false,
            "schema": {
              "title": "Cursor",
              "type": "string",
              "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The direction to search.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "The direction to search.",
              "default": "asc"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "The number of Orders to return",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of Orders to return",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrdersResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Player Order",
        "operationId": "create_new_player_order",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerOrderCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/me/order/{order_id}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Uuid Order By Id Self",
        "description": "Get a single Order for a player by order id. This API only returns recent Orders for Players",
        "operationId": "get_player_uuid_order_by_id_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Order Id",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Order was not found for player",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/{player_uuid}/order/{order_id}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Uuid Order By Id",
        "description": "Get a single Order for a player by order id. This API only returns recent Orders for Players",
        "operationId": "get_player_uuid_order_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Order Id",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Order was not found for player",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/player/me/order/{order_id}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Order By Id Self",
        "description": "Get a single Order for a player by order id. This API only returns recent Orders for Players",
        "operationId": "get_player_order_by_id_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Order Id",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Order was not found for player",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/player/{player_id}/order/{order_id}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Order By Id",
        "description": "Get a single Order for a player by order id. This API only returns recent Orders for Players",
        "operationId": "get_player_order_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Order Id",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Order was not found for player",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/me/portal/{portal_id}/processKeyEntitlements": {
      "post": {
        "tags": [
          "Key Entitlements"
        ],
        "summary": "Process Player Uuid Entitlements Self",
        "description": "Process entitlements for the current player with the given Platform. The end result will consume entitlements from the Platform and grant unclaimed Key Claims to the player.",
        "operationId": "process_player_uuid_entitlements_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/InventoryPortal"
            },
            "name": "portal_id",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/{player_uuid}/portal/{portal_id}/processKeyEntitlements": {
      "post": {
        "tags": [
          "Key Entitlements"
        ],
        "summary": "Process Key Entitlements Player Uuid",
        "description": "Process entitlements for the given player with the given portal. The end result will consume entitlements from the Platform and grant unclaimed Key Claims to the player.",
        "operationId": "process_key_entitlements_player_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/InventoryPortal"
            },
            "name": "portal_id",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/player/me/portal/{portal_id}/processKeyEntitlements": {
      "post": {
        "tags": [
          "Key Entitlements"
        ],
        "summary": "Process Key Entitlements Self",
        "description": "Process entitlements for the given player with the given portal. The end result will consume entitlements from the Platform and grant unclaimed Key Claims to the player.",
        "operationId": "process_key_entitlements_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/InventoryPortal"
            },
            "name": "portal_id",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/player/{player_id}/portal/{portal_id}/processKeyEntitlements": {
      "post": {
        "tags": [
          "Key Entitlements"
        ],
        "summary": "Process Key Entitlements",
        "description": "Process entitlements for the given player with the given portal. The end result will consume entitlements from the Platform and grant unclaimed Key Claims to the player.",
        "operationId": "process_key_entitlements",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/InventoryPortal"
            },
            "name": "portal_id",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/me/keyClaim": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Key Claims For My Uuid",
        "description": "Get All Key Claims for all external Key campaigns for the current player.",
        "operationId": "get_key_claims_for_my_uuid",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaims"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/{player_uuid}/keyClaim": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Player Uuid Key Claims",
        "description": "Get All Key Claims for all external Key campaigns for the given player.",
        "operationId": "get_player_uuid_key_claims",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaims"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/player/me/keyClaim": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Key Claims For Me",
        "description": "Get All Key Claims for all external Key campaigns for the current player.",
        "operationId": "get_key_claims_for_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaims"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/player/{player_id}/keyClaim": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Key Claims",
        "description": "Get All Key Claims for all external Key campaigns for the given player.",
        "operationId": "get_key_claims",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaims"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/me/keyClaim/{key_claim_uuid}": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Player Uuid Key Claim Self",
        "description": "Get Key Claim by uuid for the current player.",
        "operationId": "get_player_uuid_key_claim_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Claim Player Uuid Unclaimed Key Claim For Me",
        "description": "Claim the Key Claim by uuid for the current player. The external_key will be set to a value if any key matching the external_key_type is available.",
        "operationId": "claim_player_uuid_unclaimed_key_claim_for_me",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v2/player/{player_uuid}/keyClaim/{key_claim_uuid}": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Player Uuid Key Claim",
        "description": "Get Key Claim by uuid for the given player.",
        "operationId": "get_player_uuid_key_claim",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Claim Player Uuid Unclaimed Key Claim",
        "description": "Claim the Key Claim by uuid for the given player. The external_key will be set to a value if any key matching the external_key_type is available.",
        "operationId": "claim_player_uuid_unclaimed_key_claim",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/player/me/keyClaim/{key_claim_uuid}": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Key Claim For Me",
        "description": "Get Key Claim by uuid for the current player.",
        "operationId": "get_key_claim_for_me",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Claim Unclaimed Key Claim For Me",
        "description": "Claim the Key Claim by uuid for the current player. The external_key will be set to a value if any key matching the external_key_type is available.",
        "operationId": "claim_unclaimed_key_claim_for_me",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/player/{player_id}/keyClaim/{key_claim_uuid}": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Key Claim",
        "description": "Get Key Claim by uuid for the given player.",
        "operationId": "get_key_claim",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Claim Unclaimed Key Claim",
        "description": "Claim the Key Claim by uuid for the given player. The external_key will be set to a value if any key matching the external_key_type is available.",
        "operationId": "claim_unclaimed_key_claim",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/inventory/v1/marketing/campaign": {
      "get": {
        "tags": [
          "Marketing"
        ],
        "summary": "Get Marketing Campaigns",
        "description": "Get all marketing campaigns. There is currently no way to add Market Campaigns via API. Reach out to your Rally Here representative to add a new campaign.",
        "operationId": "get_marketing_campaigns",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketingCampaigns"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/player/me/presence": {
      "get": {
        "tags": [
          "presence"
        ],
        "summary": "Get Player Presence Self",
        "description": "Get the player's presence information. The status reflects the true value and is not modified before it\nis returned.",
        "operationId": "get_player_presence_self",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerPresence"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "patch": {
        "tags": [
          "presence"
        ],
        "summary": "Update Player Presence Self",
        "description": "Update the player's online status and other presence data.\nIf the player reports their online status as online or away, their \"last_seen\" presence info is updated.\nPlayer clients are expected to send requests to this endpoint on an interval of self_ping_interval_seconds.\nOtherwise they will be considered offline.",
        "operationId": "update_player_presence_self",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerPresenceUpdateSelf"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/player/uuid/{player_uuid}/presence": {
      "get": {
        "tags": [
          "presence"
        ],
        "summary": "Get Player Presence Public By Uuid",
        "description": "Get the player's presence information. The status will be modified based on the following rules:\n- A status of invisible will be reported as offline\n- The status will become offline if older than the configured age",
        "operationId": "get_player_presence_public_by_uuid",
        "parameters": [
          {
            "description": "A valid UUID identifying a player. Rejects integer player identification.",
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "description": "A valid UUID identifying a player. Rejects integer player identification.",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerPresence"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/player/id/{player_id}/presence": {
      "get": {
        "tags": [
          "presence"
        ],
        "summary": "Get Player Presence Public By Id",
        "description": "Get the player's presence information. The status will be modified based on the following rules:\n- A status of invisible will be reported as offline\n- The status will become offline if older than the configured age",
        "operationId": "get_player_presence_public_by_id",
        "parameters": [
          {
            "description": "A valid integer identifying a player. Rejects UUID player identification.",
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer",
              "description": "A valid integer identifying a player. Rejects UUID player identification."
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerPresence"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/settings": {
      "get": {
        "tags": [
          "presence"
        ],
        "summary": "Get Presence Settings",
        "description": "Settings which help tell the client how it should interact with this service.",
        "operationId": "get_presence_settings",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientVisibleSettings"
                }
              }
            }
          }
        }
      }
    },
    "/presence/v1/admin/player/uuid/{player_uuid}/last_seen": {
      "patch": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Update Player Last Seen",
        "description": "Forcibly update the player's last_seen with the specified values. This enables an admin to set the last_seen time\nto something specific for testing.",
        "operationId": "admin_update_player_last_seen",
        "parameters": [
          {
            "description": "A valid UUID identifying a player. Rejects integer player identification.",
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "description": "A valid UUID identifying a player. Rejects integer player identification.",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerLastSeenUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/player/id/{player_id}/last_seen": {
      "patch": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Update Player Last Seen Id",
        "description": "Forcibly update the player's last_seen with the specified values. This enables an admin to set the last_seen time\nto something specific for testing.",
        "operationId": "admin_update_player_last_seen_id",
        "parameters": [
          {
            "description": "A valid integer identifying a player. Rejects UUID player identification.",
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer",
              "description": "A valid integer identifying a player. Rejects UUID player identification."
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerLastSeenUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/player/uuid/{player_uuid}/presence": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Player Presence",
        "description": "Get the player's presence information. The status reflects the true value and is not modified before it\nis returned.",
        "operationId": "admin_get_player_presence",
        "parameters": [
          {
            "description": "A valid UUID identifying a player. Rejects integer player identification.",
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "description": "A valid UUID identifying a player. Rejects integer player identification.",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerPresence"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/player/id/{player_id}/presence": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Player Presence Id",
        "description": "Get the player's presence information. The status reflects the true value and is not modified before it\nis returned.",
        "operationId": "admin_get_player_presence_id",
        "parameters": [
          {
            "description": "A valid integer identifying a player. Rejects UUID player identification.",
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer",
              "description": "A valid integer identifying a player. Rejects UUID player identification."
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerPresence"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/ccu/total/combined": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Total Ccu",
        "description": "Get the combined CCU over the requested time period. This call results in one number which should exclude most duplicates across the given time\nperiod. This stands in contrast to the individual request endpoint.\n\nFor example, if you request the CCU over an hour you'll receive one number in which players that were around over that time period will only be\ncounted once.",
        "operationId": "admin_get_total_ccu",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "begin",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "end",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/ccu/total/individual": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Total Ccu Individual",
        "description": "Get the individual CCU counts over the requested time period. This call results in a count per time period within the requested range. These\nvalues should not be combined directly unless you've accounted for duplicates in some other way. The combined endpoint allows you to combine\nthe values within a time range without counting the same player multiple times.",
        "operationId": "admin_get_total_ccu_individual",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "begin",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "end",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/ccu/requesting/combined": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Requesting Ccu",
        "description": "Get the combined CCU for requesters over the requested time period. This call results in one number which should exclude most duplicates across\nthe given time period. This stands in contrast to the individual request endpoint.\n\nFor example, if you request the CCU over an hour you'll receive one number in which players that were around over that time period will only be\ncounted once.",
        "operationId": "admin_get_requesting_ccu",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "begin",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "end",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/ccu/requesting/individual": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Requesting Ccu Individual",
        "description": "Get the individual CCU counts for requesters over the requested time period. This call results in a count per time period within the requested\nrange. These values should not be combined directly unless you've accounted for duplicates in some other way. The combined endpoint allows you to\ncombine the values within a time range without counting the same player multiple times.",
        "operationId": "admin_get_requesting_ccu_individual",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "begin",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "end",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/ccu/updating/combined": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Updating Ccu",
        "description": "Get the combined CCU for updaters over the requested time period. This call results in one number which should exclude most duplicates across\nthe given time period. This stands in contrast to the individual request endpoint.\n\nFor example, if you request the CCU over an hour you'll receive one number in which players that were around over that time period will only be\ncounted once.",
        "operationId": "admin_get_updating_ccu",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "begin",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "end",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/ccu/updating/individual": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Updating Ccu Individual",
        "description": "Get the individual CCU counts for updaters over the requested time period. This call results in a count per time period within the requested\nrange. These values should not be combined directly unless you've accounted for duplicates in some other way. The combined endpoint allows you to\ncombine the values within a time range without counting the same player multiple times.",
        "operationId": "admin_get_updating_ccu_individual",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "begin",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "end",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/ccu/platforms": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Known Platforms",
        "description": "Get all of the platforms that presence has been told about by players updating their presence",
        "operationId": "admin_get_known_platforms",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/ccu/total/allplatforms/individual": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Total Ccu All Platform Individual",
        "operationId": "admin_get_total_ccu_all_platform_individual",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "begin",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "end",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/ccu/total/allplatforms/combined": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Total Ccu All Platform Combined",
        "operationId": "admin_get_total_ccu_all_platform_combined",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "begin",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "end",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/ccu/requesting/allplatforms/individual": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Requesting Ccu All Platform Individual",
        "operationId": "admin_get_requesting_ccu_all_platform_individual",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "begin",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "end",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/ccu/requesting/allplatforms/combined": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Requesting Ccu All Platform Combined",
        "operationId": "admin_get_requesting_ccu_all_platform_combined",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "begin",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "end",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/ccu/updating/allplatforms/individual": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Updating Ccu All Platform Individual",
        "operationId": "admin_get_updating_ccu_all_platform_individual",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "begin",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "end",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/ccu/updating/allplatforms/combined": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Updating Ccu All Platform Combined",
        "operationId": "admin_get_updating_ccu_all_platform_combined",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "begin",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "end",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/ccu/total/platform/{platform}/individual": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Total Ccu Platform Individual",
        "operationId": "admin_get_total_ccu_platform_individual",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Platform",
              "type": "string"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "begin",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "end",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/ccu/total/platform/{platform}/combined": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Total Ccu Platform Combined",
        "operationId": "admin_get_total_ccu_platform_combined",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Platform",
              "type": "string"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "begin",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "end",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/ccu/requesting/platform/{platform}/individual": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Requesting Ccu Platform Individual",
        "operationId": "admin_get_requesting_ccu_platform_individual",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Platform",
              "type": "string"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "begin",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "end",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/ccu/requesting/platform/{platform}/combined": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Requesting Ccu Platform Combined",
        "operationId": "admin_get_requesting_ccu_platform_combined",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Platform",
              "type": "string"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "begin",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "end",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/ccu/updating/platform/{platform}/individual": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Updating Ccu Platform Individual",
        "operationId": "admin_get_updating_ccu_platform_individual",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Platform",
              "type": "string"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "begin",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "end",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/presence/v1/admin/ccu/updating/platform/{platform}/combined": {
      "get": {
        "tags": [
          "presence-admin"
        ],
        "summary": "Admin Get Updating Ccu Platform Combined",
        "operationId": "admin_get_updating_ccu_platform_combined",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Platform",
              "type": "string"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "begin",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "TZAware",
              "type": "string",
              "description": "A date-time with timezone data.",
              "format": "date-time"
            },
            "name": "end",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Use Cache",
              "type": "boolean",
              "default": true
            },
            "name": "use_cache",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/notification/v1/playerid/me/stream/notification/lp": {
      "get": {
        "tags": [
          "player-id-notification"
        ],
        "summary": "Long Poll For Notifications Self",
        "description": "This endpoint will return notifications newer than `exclude_before`.  This endpoint returns notifications\nfrom older to newer, which is the opposite of the paging API.\n\nThis operation is a long-poll.  That means we will keep the connection open until we get any notification\nor until the passed in deadline (to the best of our ability).  Once one of these happens, we will return\nthe notifications found.\n\nRequires permissions: Any of `notification:playerid:*`,`notification:playerid:read`",
        "operationId": "playerid_long_poll_for_notifications_self",
        "parameters": [
          {
            "description": "Max number of entries to return at one time",
            "required": false,
            "schema": {
              "title": "Max Page Size",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Max number of entries to return at one time",
              "default": 10
            },
            "name": "max_page_size",
            "in": "query"
          },
          {
            "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque",
            "required": false,
            "schema": {
              "title": "Exclude Before",
              "type": "string",
              "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque"
            },
            "name": "exclude_before",
            "in": "query"
          },
          {
            "description": "When `exclude_before` is not found in the stream or not given, begin streaming messages from the earliest/latest message",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OffsetReset"
                }
              ],
              "description": "When `exclude_before` is not found in the stream or not given, begin streaming messages from the earliest/latest message",
              "default": "latest"
            },
            "name": "offset_reset_strategy",
            "in": "query"
          },
          {
            "description": "We will try to the best of our ability to return by this deadline, even when we have no notifications.  Value should be in seconds",
            "required": false,
            "schema": {
              "title": "Deadline",
              "maximum": 900,
              "minimum": 0,
              "type": "integer",
              "description": "We will try to the best of our ability to return by this deadline, even when we have no notifications.  Value should be in seconds",
              "default": 30
            },
            "name": "deadline",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notifications"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- insufficient_role - Insufficient Role access\n- auth_malformed_access - Invalid Authorization - malformed access token\n- auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token\n- auth_token_format - Invalid Authorization - {}\n- auth_not_jwt - Invalid Authorization\n- auth_invalid_version - Invalid Authorization - version\n- auth_token_expired - Token is expired\n- auth_token_sig_invalid - Token Signature is invalid\n- auth_token_unknown - Failed to parse token\n- auth_token_invalid_claim - Token contained invalid claim value: {}\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/notification/v1/playerid/{player_id}/stream/notification/lp": {
      "get": {
        "tags": [
          "player-id-notification"
        ],
        "summary": "Long Poll For Notifications",
        "description": "This endpoint will return notifications newer than `exclude_before`.  This endpoint returns notifications\nfrom older to newer, which is the opposite of the paging API.\n\nThis operation is a long-poll.  That means we will keep the connection open until we get any notification\nor until the passed in deadline (to the best of our ability).  Once one of these happens, we will return\nthe notifications found.\n\nThis version can be used for any client provided its id (with proper permissions)\n\nRequires permissions: Any of `notification:playerid:*`,`notification:playerid:read`",
        "operationId": "playerid_long_poll_for_notifications",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "description": "Max number of entries to return at one time",
            "required": false,
            "schema": {
              "title": "Max Page Size",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Max number of entries to return at one time",
              "default": 10
            },
            "name": "max_page_size",
            "in": "query"
          },
          {
            "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque",
            "required": false,
            "schema": {
              "title": "Exclude Before",
              "type": "string",
              "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque"
            },
            "name": "exclude_before",
            "in": "query"
          },
          {
            "description": "When `exclude_before` is not found in the stream or not given, begin streaming messages from the earliest/latest message",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OffsetReset"
                }
              ],
              "description": "When `exclude_before` is not found in the stream or not given, begin streaming messages from the earliest/latest message",
              "default": "latest"
            },
            "name": "offset_reset_strategy",
            "in": "query"
          },
          {
            "description": "We will try to the best of our ability to return by this deadline, even when we have no notifications.  Value should be in seconds",
            "required": false,
            "schema": {
              "title": "Deadline",
              "maximum": 900,
              "minimum": 0,
              "type": "integer",
              "description": "We will try to the best of our ability to return by this deadline, even when we have no notifications.  Value should be in seconds",
              "default": 30
            },
            "name": "deadline",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notifications"
                }
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- bad_id - Passed client id is not a valid id\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- insufficient_role - Insufficient Role access\n- auth_malformed_access - Invalid Authorization - malformed access token\n- auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token\n- auth_token_format - Invalid Authorization - {}\n- auth_not_jwt - Invalid Authorization\n- auth_invalid_version - Invalid Authorization - version\n- auth_token_expired - Token is expired\n- auth_token_sig_invalid - Token Signature is invalid\n- auth_token_unknown - Failed to parse token\n- auth_token_invalid_claim - Token contained invalid claim value: {}\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/notification/v1/playerid/me/notification": {
      "get": {
        "tags": [
          "player-id-notification"
        ],
        "summary": "Get Notifications Page Self",
        "description": "Get recent notifications ordered from the newest to the oldest.\n\nIt is important to stress that this endpoint returns notifications in reverse order compared to the streaming API.\nThe first notification returned from this will be the newest one we can find, and older ones will be further down\nthe page (or on later pages).\n\nThis API is useful for displaying a list of the most recent notifications to the user, only requesting further\npages when the user requests a bigger list.\n\nClient are expected to poll this endpoint regularly.\n\nRequires permissions: Any of `notification:playerid:*`,`notification:playerid:read`",
        "operationId": "playerid_get_notifications_page_self",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Return results starting at this index (inclusive).  If none provided then will start at the latest notification.  You cannot depend on the format of this string, and it must be considered opaque",
            "required": false,
            "schema": {
              "title": "Start At",
              "type": "string",
              "description": "Return results starting at this index (inclusive).  If none provided then will start at the latest notification.  You cannot depend on the format of this string, and it must be considered opaque"
            },
            "name": "start_at",
            "in": "query"
          },
          {
            "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque",
            "required": false,
            "schema": {
              "title": "Exclude Before",
              "type": "string",
              "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque"
            },
            "name": "exclude_before",
            "in": "query"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed"
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notifications"
                }
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "\nError Codes:\n- insufficient_role - Insufficient Role access\n- auth_malformed_access - Invalid Authorization - malformed access token\n- auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token\n- auth_token_format - Invalid Authorization - {}\n- auth_not_jwt - Invalid Authorization\n- auth_invalid_version - Invalid Authorization - version\n- auth_token_expired - Token is expired\n- auth_token_sig_invalid - Token Signature is invalid\n- auth_token_unknown - Failed to parse token\n- auth_token_invalid_claim - Token contained invalid claim value: {}\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/notification/v1/playerid/{player_id}/notification": {
      "get": {
        "tags": [
          "player-id-notification"
        ],
        "summary": "Get Notifications Page",
        "description": "Get recent notifications ordered from the newest to the oldest.\n\nIt is important to stress that this endpoint returns notifications in reverse order compared to the streaming API.\nThe first notification returned from this will be the newest one we can find, and older ones will be further down\nthe page (or on later pages).\n\nThis API is useful for displaying a list of the most recent notifications to the user, only requesting further\npages when the user requests a bigger list.\n\nClient are expected to poll this endpoint regularly.\n\nThis version can be used for any client provided its id (with proper permissions)\n\nRequires permissions: Any of `notification:playerid:*`,`notification:playerid:read`",
        "operationId": "playerid_get_notifications_page",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Return results starting at this index (inclusive).  If none provided then will start at the latest notification.  You cannot depend on the format of this string, and it must be considered opaque",
            "required": false,
            "schema": {
              "title": "Start At",
              "type": "string",
              "description": "Return results starting at this index (inclusive).  If none provided then will start at the latest notification.  You cannot depend on the format of this string, and it must be considered opaque"
            },
            "name": "start_at",
            "in": "query"
          },
          {
            "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque",
            "required": false,
            "schema": {
              "title": "Exclude Before",
              "type": "string",
              "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque"
            },
            "name": "exclude_before",
            "in": "query"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed"
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notifications"
                }
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "\nError Codes:\n- bad_id - Passed client id is not a valid id\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- insufficient_role - Insufficient Role access\n- auth_malformed_access - Invalid Authorization - malformed access token\n- auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token\n- auth_token_format - Invalid Authorization - {}\n- auth_not_jwt - Invalid Authorization\n- auth_invalid_version - Invalid Authorization - version\n- auth_token_expired - Token is expired\n- auth_token_sig_invalid - Token Signature is invalid\n- auth_token_unknown - Failed to parse token\n- auth_token_invalid_claim - Token contained invalid claim value: {}\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "player-id-notification"
        ],
        "summary": "Create Notification",
        "description": "Create new notification for client.  Requires permission to create for a different client\n\nRequires permissions: Any of `notification:playerid:*`, `notification:playerid:write`",
        "operationId": "playerid_create_notification",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationCreates"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationCreateResult"
                }
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- bad_id - Passed client id is not a valid id\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- insufficient_role - Insufficient Role access\n- auth_malformed_access - Invalid Authorization - malformed access token\n- auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token\n- auth_token_format - Invalid Authorization - {}\n- auth_not_jwt - Invalid Authorization\n- auth_invalid_version - Invalid Authorization - version\n- auth_token_expired - Token is expired\n- auth_token_sig_invalid - Token Signature is invalid\n- auth_token_unknown - Failed to parse token\n- auth_token_invalid_claim - Token contained invalid claim value: {}\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/notification/v1/playerid/me/notification/{notification_id}": {
      "get": {
        "tags": [
          "player-id-notification"
        ],
        "summary": "Get Notification By Id Self",
        "description": "Retrieve a single notification by id\n\nRequires permissions: Any of `notification:playerid:*`,`notification:playerid:read`",
        "operationId": "playerid_get_notification_by_id_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Notification Id",
              "type": "string"
            },
            "name": "notification_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- insufficient_role - Insufficient Role access\n- auth_malformed_access - Invalid Authorization - malformed access token\n- auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token\n- auth_token_format - Invalid Authorization - {}\n- auth_not_jwt - Invalid Authorization\n- auth_invalid_version - Invalid Authorization - version\n- auth_token_expired - Token is expired\n- auth_token_sig_invalid - Token Signature is invalid\n- auth_token_unknown - Failed to parse token\n- auth_token_invalid_claim - Token contained invalid claim value: {}\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- resource_not_found - Notification could not be found\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/notification/v1/playerid/{player_id}/notification/{notification_id}": {
      "get": {
        "tags": [
          "player-id-notification"
        ],
        "summary": "Get Notification By Id",
        "description": "Retrieve a single notification by id\n\nThis version can be used for any client provided its id (with proper permissions)\n\nRequires permissions: Any of `notification:playerid:*`,`notification:playerid:read`",
        "operationId": "playerid_get_notification_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Notification Id",
              "type": "string"
            },
            "name": "notification_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- bad_id - Passed client id is not a valid id\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- insufficient_role - Insufficient Role access\n- auth_malformed_access - Invalid Authorization - malformed access token\n- auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token\n- auth_token_format - Invalid Authorization - {}\n- auth_not_jwt - Invalid Authorization\n- auth_invalid_version - Invalid Authorization - version\n- auth_token_expired - Token is expired\n- auth_token_sig_invalid - Token Signature is invalid\n- auth_token_unknown - Failed to parse token\n- auth_token_invalid_claim - Token contained invalid claim value: {}\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- resource_not_found - Notification could not be found\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/notification/v1/player/me/stream/notification/lp": {
      "get": {
        "tags": [
          "player-notification"
        ],
        "summary": "Long Poll For Notifications Self",
        "description": "This endpoint will return notifications newer than `exclude_before`.  This endpoint returns notifications\nfrom older to newer, which is the opposite of the paging API.\n\nThis operation is a long-poll.  That means we will keep the connection open until we get any notification\nor until the passed in deadline (to the best of our ability).  Once one of these happens, we will return\nthe notifications found.\n\nRequires permissions: Any of `notification:player:*`,`notification:player:read`",
        "operationId": "player_long_poll_for_notifications_self",
        "parameters": [
          {
            "description": "Max number of entries to return at one time",
            "required": false,
            "schema": {
              "title": "Max Page Size",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Max number of entries to return at one time",
              "default": 10
            },
            "name": "max_page_size",
            "in": "query"
          },
          {
            "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque",
            "required": false,
            "schema": {
              "title": "Exclude Before",
              "type": "string",
              "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque"
            },
            "name": "exclude_before",
            "in": "query"
          },
          {
            "description": "When `exclude_before` is not found in the stream or not given, begin streaming messages from the earliest/latest message",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OffsetReset"
                }
              ],
              "description": "When `exclude_before` is not found in the stream or not given, begin streaming messages from the earliest/latest message",
              "default": "latest"
            },
            "name": "offset_reset_strategy",
            "in": "query"
          },
          {
            "description": "We will try to the best of our ability to return by this deadline, even when we have no notifications.  Value should be in seconds",
            "required": false,
            "schema": {
              "title": "Deadline",
              "maximum": 900,
              "minimum": 0,
              "type": "integer",
              "description": "We will try to the best of our ability to return by this deadline, even when we have no notifications.  Value should be in seconds",
              "default": 30
            },
            "name": "deadline",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notifications"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- insufficient_role - Insufficient Role access\n- auth_malformed_access - Invalid Authorization - malformed access token\n- auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token\n- auth_token_format - Invalid Authorization - {}\n- auth_not_jwt - Invalid Authorization\n- auth_invalid_version - Invalid Authorization - version\n- auth_token_expired - Token is expired\n- auth_token_sig_invalid - Token Signature is invalid\n- auth_token_unknown - Failed to parse token\n- auth_token_invalid_claim - Token contained invalid claim value: {}\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/notification/v1/player/{player_uuid}/stream/notification/lp": {
      "get": {
        "tags": [
          "player-notification"
        ],
        "summary": "Long Poll For Notifications",
        "description": "This endpoint will return notifications newer than `exclude_before`.  This endpoint returns notifications\nfrom older to newer, which is the opposite of the paging API.\n\nThis operation is a long-poll.  That means we will keep the connection open until we get any notification\nor until the passed in deadline (to the best of our ability).  Once one of these happens, we will return\nthe notifications found.\n\nThis version can be used for any client provided its id (with proper permissions)\n\nRequires permissions: Any of `notification:player:*`,`notification:player:read`",
        "operationId": "player_long_poll_for_notifications",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "description": "Max number of entries to return at one time",
            "required": false,
            "schema": {
              "title": "Max Page Size",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Max number of entries to return at one time",
              "default": 10
            },
            "name": "max_page_size",
            "in": "query"
          },
          {
            "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque",
            "required": false,
            "schema": {
              "title": "Exclude Before",
              "type": "string",
              "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque"
            },
            "name": "exclude_before",
            "in": "query"
          },
          {
            "description": "When `exclude_before` is not found in the stream or not given, begin streaming messages from the earliest/latest message",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OffsetReset"
                }
              ],
              "description": "When `exclude_before` is not found in the stream or not given, begin streaming messages from the earliest/latest message",
              "default": "latest"
            },
            "name": "offset_reset_strategy",
            "in": "query"
          },
          {
            "description": "We will try to the best of our ability to return by this deadline, even when we have no notifications.  Value should be in seconds",
            "required": false,
            "schema": {
              "title": "Deadline",
              "maximum": 900,
              "minimum": 0,
              "type": "integer",
              "description": "We will try to the best of our ability to return by this deadline, even when we have no notifications.  Value should be in seconds",
              "default": 30
            },
            "name": "deadline",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notifications"
                }
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- bad_id - Passed client id is not a valid id\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- insufficient_role - Insufficient Role access\n- auth_malformed_access - Invalid Authorization - malformed access token\n- auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token\n- auth_token_format - Invalid Authorization - {}\n- auth_not_jwt - Invalid Authorization\n- auth_invalid_version - Invalid Authorization - version\n- auth_token_expired - Token is expired\n- auth_token_sig_invalid - Token Signature is invalid\n- auth_token_unknown - Failed to parse token\n- auth_token_invalid_claim - Token contained invalid claim value: {}\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/notification/v1/player/me/notification": {
      "get": {
        "tags": [
          "player-notification"
        ],
        "summary": "Get Notifications Page Self",
        "description": "Get recent notifications ordered from the newest to the oldest.\n\nIt is important to stress that this endpoint returns notifications in reverse order compared to the streaming API.\nThe first notification returned from this will be the newest one we can find, and older ones will be further down\nthe page (or on later pages).\n\nThis API is useful for displaying a list of the most recent notifications to the user, only requesting further\npages when the user requests a bigger list.\n\nClient are expected to poll this endpoint regularly.\n\nRequires permissions: Any of `notification:player:*`,`notification:player:read`",
        "operationId": "player_get_notifications_page_self",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Return results starting at this index (inclusive).  If none provided then will start at the latest notification.  You cannot depend on the format of this string, and it must be considered opaque",
            "required": false,
            "schema": {
              "title": "Start At",
              "type": "string",
              "description": "Return results starting at this index (inclusive).  If none provided then will start at the latest notification.  You cannot depend on the format of this string, and it must be considered opaque"
            },
            "name": "start_at",
            "in": "query"
          },
          {
            "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque",
            "required": false,
            "schema": {
              "title": "Exclude Before",
              "type": "string",
              "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque"
            },
            "name": "exclude_before",
            "in": "query"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed"
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notifications"
                }
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "403": {
            "description": "\nError Codes:\n- insufficient_role - Insufficient Role access\n- auth_malformed_access - Invalid Authorization - malformed access token\n- auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token\n- auth_token_format - Invalid Authorization - {}\n- auth_not_jwt - Invalid Authorization\n- auth_invalid_version - Invalid Authorization - version\n- auth_token_expired - Token is expired\n- auth_token_sig_invalid - Token Signature is invalid\n- auth_token_unknown - Failed to parse token\n- auth_token_invalid_claim - Token contained invalid claim value: {}\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/notification/v1/player/{player_uuid}/notification": {
      "get": {
        "tags": [
          "player-notification"
        ],
        "summary": "Get Notifications Page",
        "description": "Get recent notifications ordered from the newest to the oldest.\n\nIt is important to stress that this endpoint returns notifications in reverse order compared to the streaming API.\nThe first notification returned from this will be the newest one we can find, and older ones will be further down\nthe page (or on later pages).\n\nThis API is useful for displaying a list of the most recent notifications to the user, only requesting further\npages when the user requests a bigger list.\n\nClient are expected to poll this endpoint regularly.\n\nThis version can be used for any client provided its id (with proper permissions)\n\nRequires permissions: Any of `notification:player:*`,`notification:player:read`",
        "operationId": "player_get_notifications_page",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Return results starting at this index (inclusive).  If none provided then will start at the latest notification.  You cannot depend on the format of this string, and it must be considered opaque",
            "required": false,
            "schema": {
              "title": "Start At",
              "type": "string",
              "description": "Return results starting at this index (inclusive).  If none provided then will start at the latest notification.  You cannot depend on the format of this string, and it must be considered opaque"
            },
            "name": "start_at",
            "in": "query"
          },
          {
            "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque",
            "required": false,
            "schema": {
              "title": "Exclude Before",
              "type": "string",
              "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque"
            },
            "name": "exclude_before",
            "in": "query"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed"
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notifications"
                }
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "\nError Codes:\n- bad_id - Passed client id is not a valid id\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- insufficient_role - Insufficient Role access\n- auth_malformed_access - Invalid Authorization - malformed access token\n- auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token\n- auth_token_format - Invalid Authorization - {}\n- auth_not_jwt - Invalid Authorization\n- auth_invalid_version - Invalid Authorization - version\n- auth_token_expired - Token is expired\n- auth_token_sig_invalid - Token Signature is invalid\n- auth_token_unknown - Failed to parse token\n- auth_token_invalid_claim - Token contained invalid claim value: {}\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "player-notification"
        ],
        "summary": "Create Notification",
        "description": "Create new notification for client.  Requires permission to create for a different client\n\nRequires permissions: Any of `notification:player:write`, `notification:player:*`",
        "operationId": "player_create_notification",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationCreates"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationCreateResult"
                }
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- bad_id - Passed client id is not a valid id\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- insufficient_role - Insufficient Role access\n- auth_malformed_access - Invalid Authorization - malformed access token\n- auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token\n- auth_token_format - Invalid Authorization - {}\n- auth_not_jwt - Invalid Authorization\n- auth_invalid_version - Invalid Authorization - version\n- auth_token_expired - Token is expired\n- auth_token_sig_invalid - Token Signature is invalid\n- auth_token_unknown - Failed to parse token\n- auth_token_invalid_claim - Token contained invalid claim value: {}\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/notification/v1/player/me/notification/{notification_id}": {
      "get": {
        "tags": [
          "player-notification"
        ],
        "summary": "Get Notification By Id Self",
        "description": "Retrieve a single notification by id\n\nRequires permissions: Any of `notification:player:*`,`notification:player:read`",
        "operationId": "player_get_notification_by_id_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Notification Id",
              "type": "string"
            },
            "name": "notification_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- insufficient_role - Insufficient Role access\n- auth_malformed_access - Invalid Authorization - malformed access token\n- auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token\n- auth_token_format - Invalid Authorization - {}\n- auth_not_jwt - Invalid Authorization\n- auth_invalid_version - Invalid Authorization - version\n- auth_token_expired - Token is expired\n- auth_token_sig_invalid - Token Signature is invalid\n- auth_token_unknown - Failed to parse token\n- auth_token_invalid_claim - Token contained invalid claim value: {}\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- resource_not_found - Notification could not be found\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/notification/v1/player/{player_uuid}/notification/{notification_id}": {
      "get": {
        "tags": [
          "player-notification"
        ],
        "summary": "Get Notification By Id",
        "description": "Retrieve a single notification by id\n\nThis version can be used for any client provided its id (with proper permissions)\n\nRequires permissions: Any of `notification:player:*`,`notification:player:read`",
        "operationId": "player_get_notification_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Notification Id",
              "type": "string"
            },
            "name": "notification_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- bad_id - Passed client id is not a valid id\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- insufficient_role - Insufficient Role access\n- auth_malformed_access - Invalid Authorization - malformed access token\n- auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token\n- auth_token_format - Invalid Authorization - {}\n- auth_not_jwt - Invalid Authorization\n- auth_invalid_version - Invalid Authorization - version\n- auth_token_expired - Token is expired\n- auth_token_sig_invalid - Token Signature is invalid\n- auth_token_unknown - Failed to parse token\n- auth_token_invalid_claim - Token contained invalid claim value: {}\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- resource_not_found - Notification could not be found\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/notification/v1/instance/{instance_id}/stream/notification/lp": {
      "get": {
        "tags": [
          "instance-notification"
        ],
        "summary": "Long Poll For Notifications",
        "description": "This endpoint will return notifications newer than `exclude_before`.  This endpoint returns notifications\nfrom older to newer, which is the opposite of the paging API.\n\nThis operation is a long-poll.  That means we will keep the connection open until we get any notification\nor until the passed in deadline (to the best of our ability).  Once one of these happens, we will return\nthe notifications found.\n\nThis version can be used for any client provided its id (with proper permissions)\n\nRequires permissions: Any of `notification:instance:read`,`notification:instance:*`",
        "operationId": "instance_long_poll_for_notifications",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Instance Id",
              "type": "string"
            },
            "name": "instance_id",
            "in": "path"
          },
          {
            "description": "Max number of entries to return at one time",
            "required": false,
            "schema": {
              "title": "Max Page Size",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Max number of entries to return at one time",
              "default": 10
            },
            "name": "max_page_size",
            "in": "query"
          },
          {
            "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque",
            "required": false,
            "schema": {
              "title": "Exclude Before",
              "type": "string",
              "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque"
            },
            "name": "exclude_before",
            "in": "query"
          },
          {
            "description": "When `exclude_before` is not found in the stream or not given, begin streaming messages from the earliest/latest message",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OffsetReset"
                }
              ],
              "description": "When `exclude_before` is not found in the stream or not given, begin streaming messages from the earliest/latest message",
              "default": "latest"
            },
            "name": "offset_reset_strategy",
            "in": "query"
          },
          {
            "description": "We will try to the best of our ability to return by this deadline, even when we have no notifications.  Value should be in seconds",
            "required": false,
            "schema": {
              "title": "Deadline",
              "maximum": 900,
              "minimum": 0,
              "type": "integer",
              "description": "We will try to the best of our ability to return by this deadline, even when we have no notifications.  Value should be in seconds",
              "default": 30
            },
            "name": "deadline",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notifications"
                }
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- bad_id - Passed client id is not a valid id\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- insufficient_role - Insufficient Role access\n- auth_malformed_access - Invalid Authorization - malformed access token\n- auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token\n- auth_token_format - Invalid Authorization - {}\n- auth_not_jwt - Invalid Authorization\n- auth_invalid_version - Invalid Authorization - version\n- auth_token_expired - Token is expired\n- auth_token_sig_invalid - Token Signature is invalid\n- auth_token_unknown - Failed to parse token\n- auth_token_invalid_claim - Token contained invalid claim value: {}\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/notification/v1/instance/{instance_id}/notification": {
      "get": {
        "tags": [
          "instance-notification"
        ],
        "summary": "Get Notifications Page",
        "description": "Get recent notifications ordered from the newest to the oldest.\n\nIt is important to stress that this endpoint returns notifications in reverse order compared to the streaming API.\nThe first notification returned from this will be the newest one we can find, and older ones will be further down\nthe page (or on later pages).\n\nThis API is useful for displaying a list of the most recent notifications to the user, only requesting further\npages when the user requests a bigger list.\n\nClient are expected to poll this endpoint regularly.\n\nThis version can be used for any client provided its id (with proper permissions)\n\nRequires permissions: Any of `notification:instance:read`,`notification:instance:*`",
        "operationId": "instance_get_notifications_page",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Instance Id",
              "type": "string"
            },
            "name": "instance_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Page Size",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "default": 10
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Return results starting at this index (inclusive).  If none provided then will start at the latest notification.  You cannot depend on the format of this string, and it must be considered opaque",
            "required": false,
            "schema": {
              "title": "Start At",
              "type": "string",
              "description": "Return results starting at this index (inclusive).  If none provided then will start at the latest notification.  You cannot depend on the format of this string, and it must be considered opaque"
            },
            "name": "start_at",
            "in": "query"
          },
          {
            "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque",
            "required": false,
            "schema": {
              "title": "Exclude Before",
              "type": "string",
              "description": "All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque"
            },
            "name": "exclude_before",
            "in": "query"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed"
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notifications"
                }
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "400": {
            "description": "\nError Codes:\n- bad_id - Passed client id is not a valid id\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- insufficient_role - Insufficient Role access\n- auth_malformed_access - Invalid Authorization - malformed access token\n- auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token\n- auth_token_format - Invalid Authorization - {}\n- auth_not_jwt - Invalid Authorization\n- auth_invalid_version - Invalid Authorization - version\n- auth_token_expired - Token is expired\n- auth_token_sig_invalid - Token Signature is invalid\n- auth_token_unknown - Failed to parse token\n- auth_token_invalid_claim - Token contained invalid claim value: {}\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "instance-notification"
        ],
        "summary": "Create Notification",
        "description": "Create new notification for client.  Requires permission to create for a different client\n\nRequires permissions: Any of `notification:instance:*`, `notification:instance:write`",
        "operationId": "instance_create_notification",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Instance Id",
              "type": "string"
            },
            "name": "instance_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationCreates"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationCreateResult"
                }
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- bad_id - Passed client id is not a valid id\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- insufficient_role - Insufficient Role access\n- auth_malformed_access - Invalid Authorization - malformed access token\n- auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token\n- auth_token_format - Invalid Authorization - {}\n- auth_not_jwt - Invalid Authorization\n- auth_invalid_version - Invalid Authorization - version\n- auth_token_expired - Token is expired\n- auth_token_sig_invalid - Token Signature is invalid\n- auth_token_unknown - Failed to parse token\n- auth_token_invalid_claim - Token contained invalid claim value: {}\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/notification/v1/instance/{instance_id}/notification/{notification_id}": {
      "get": {
        "tags": [
          "instance-notification"
        ],
        "summary": "Get Notification By Id",
        "description": "Retrieve a single notification by id\n\nThis version can be used for any client provided its id (with proper permissions)\n\nRequires permissions: Any of `notification:instance:read`,`notification:instance:*`",
        "operationId": "instance_get_notification_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Notification Id",
              "type": "string"
            },
            "name": "notification_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Instance Id",
              "type": "string"
            },
            "name": "instance_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- bad_id - Passed client id is not a valid id\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- insufficient_role - Insufficient Role access\n- auth_malformed_access - Invalid Authorization - malformed access token\n- auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token\n- auth_token_format - Invalid Authorization - {}\n- auth_not_jwt - Invalid Authorization\n- auth_invalid_version - Invalid Authorization - version\n- auth_token_expired - Token is expired\n- auth_token_sig_invalid - Token Signature is invalid\n- auth_token_unknown - Failed to parse token\n- auth_token_invalid_claim - Token contained invalid claim value: {}\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- resource_not_found - Notification could not be found\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/rank/v1/rank:calculate-trueskill": {
      "post": {
        "tags": [
          "rank"
        ],
        "summary": "Update Rankings Trueskill V1",
        "description": "Run Trueskill V1 rank update on players and persist their new ranks\nRequires at least two teams, and the player's trueskill values before the last match was played\n\nRequired Permissions: `rank:update:any`",
        "operationId": "update_rankings_trueskill_v1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrueskillUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerRankUpdateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/rank/v1/player/me/rank/{rank_id}": {
      "get": {
        "tags": [
          "rank"
        ],
        "summary": "Get Player Uuid Rank Self",
        "description": "Get current player's rank for a specific rank id\n            \nRequired Permissions: `rank:read:self`",
        "operationId": "get_player_uuid_rank_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rank Id",
              "exclusiveMinimum": 0,
              "type": "integer"
            },
            "name": "rank_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerRankRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "rank"
        ],
        "summary": "Update Player Uuid Rank Self",
        "description": "Update current player's ranks to those that are provided. Ranks are taken as is \n\nRequired Permissions: `rank:update:self`",
        "operationId": "update_player_uuid_rank_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rank Id",
              "exclusiveMinimum": 0,
              "type": "integer"
            },
            "name": "rank_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerRankUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerRankUpdateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/rank/v1/player/{player_uuid}/rank/{rank_id}": {
      "get": {
        "tags": [
          "rank"
        ],
        "summary": "Get Player Uuid Rank",
        "description": "Get a specific player's rank for a specific rank id\n            \nRequired Permissions: `rank:read:self` for players acting on themselves, \notherwise `rank:read:any`",
        "operationId": "get_player_uuid_rank",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rank Id",
              "exclusiveMinimum": 0,
              "type": "integer"
            },
            "name": "rank_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerRankRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "rank"
        ],
        "summary": "Update Player Uuid Rank",
        "description": "Update a specific player's ranks to those that are provided. Ranks are taken as is\n\nRequired Permissions: `rank:update:self` for players acting on themselves, \notherwise `rank:update:any`",
        "operationId": "update_player_uuid_rank",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Rank Id",
              "exclusiveMinimum": 0,
              "type": "integer"
            },
            "name": "rank_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerRankUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerRankUpdateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/rank/v1/player/me/rank": {
      "get": {
        "tags": [
          "rank"
        ],
        "summary": "Get All Player Uuid Ranks Self",
        "description": "Get all of current player's ranks\n\nRequired Permissions: `rank:read:self`",
        "operationId": "get_all_player_uuid_ranks_self",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerRankRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/rank/v1/player/{player_uuid}/rank": {
      "get": {
        "tags": [
          "rank"
        ],
        "summary": "Get All Player Uuid Ranks",
        "description": "Get all of a specific player's ranks\n\nRequired Permissions: `rank:read:self` for players acting on themselves,\notherwise `rank:read:any`",
        "operationId": "get_all_player_uuid_ranks",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerRankRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/rank/v1/rank": {
      "get": {
        "tags": [
          "rank"
        ],
        "summary": "Get All Rank Config",
        "description": "Get all rank configuration\n\nRequired Permissions: `rank:read:config`",
        "operationId": "get_all_rank_config",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RankConfigRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/rank/v1/rank/{rank_id}": {
      "get": {
        "tags": [
          "rank"
        ],
        "summary": "Get Rank Config",
        "description": "Get rank configuration for specific rank id\n\nRequired Permissions: `rank:read:config`",
        "operationId": "get_rank_config",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Rank Id",
              "exclusiveMinimum": 0,
              "type": "integer"
            },
            "name": "rank_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RankConfigRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/config/v1/app_settings/server": {
      "get": {
        "tags": [
          "config"
        ],
        "summary": "Get App Settings Server",
        "description": "Returns app settings that are configured to be available to the server. Requires permission: config:app_settings:server:read",
        "operationId": "get_app_settings_server",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get App Settings Server V1 App Settings Server Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppSetting"
                  }
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/config/v1/app_settings/client": {
      "get": {
        "tags": [
          "config"
        ],
        "summary": "Get App Settings Client",
        "description": "Returns app settings that are configured to be available to the client.",
        "operationId": "get_app_settings_client",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get App Settings Client V1 App Settings Client Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppSetting"
                  }
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/config/v1/discovery": {
      "get": {
        "tags": [
          "discovery"
        ],
        "summary": "Get Discovery",
        "description": "Returns the configured connection manager IPs for the game client to connect to. Deprecated as there is no longer a need for this endpoint after MCTS was removed.",
        "operationId": "get_discovery",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/config/v1/site": {
      "get": {
        "tags": [
          "site"
        ],
        "summary": "Get Site Settings",
        "description": "Returns a list of all the enabled Sites/Regions. \n            Deprecated as this endpoint has moved to the session api.",
        "operationId": "get_site_settings",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Site Settings V1 Site Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SiteSettings"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/config/v1/time/utc": {
      "get": {
        "tags": [
          "time"
        ],
        "summary": "Get Utc Time",
        "description": "Returns the current UTC time for use by the game client. Allows a game client with a incorrect local time to compare against the API's time and create a offset to act upon.",
        "operationId": "get_utc_time",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Utc Time V1 Time Utc Get",
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "HTTPBearerHeadersOrCookie": {
        "type": "http",
        "scheme": "bearer"
      },
      "HTTPBasic": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "AdOpportunities": {
        "title": "AdOpportunities",
        "required": [
          "opportunities"
        ],
        "type": "object",
        "properties": {
          "opportunities": {
            "title": "Opportunities",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdOpportunity"
            }
          }
        }
      },
      "AdOpportunity": {
        "title": "AdOpportunity",
        "required": [
          "ad_url",
          "seconds",
          "opportunity_id"
        ],
        "type": "object",
        "properties": {
          "ad_url": {
            "title": "Ad Url",
            "type": "string"
          },
          "seconds": {
            "title": "Seconds",
            "minimum": 0,
            "type": "integer"
          },
          "opportunity_id": {
            "title": "Opportunity Id",
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "Body_begin_new_session_v1_session_post": {
        "title": "Body_begin_new_session_v1_session_post",
        "required": [
          "country_code"
        ],
        "type": "object",
        "properties": {
          "country_code": {
            "title": "Country Code",
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "[ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code for the user"
          },
          "device_id": {
            "title": "Device Id",
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "Unique Identifier for the device a session is started on.  E.g should be the same for multiple users on the same device."
          }
        }
      },
      "Body_find_opportunities_v1_opportunity_post": {
        "title": "Body_find_opportunities_v1_opportunity_post",
        "required": [
          "country_code",
          "language_code"
        ],
        "type": "object",
        "properties": {
          "screen_pixel_width": {
            "title": "Screen Pixel Width",
            "type": "integer"
          },
          "screen_pixel_height": {
            "title": "Screen Pixel Height",
            "type": "integer"
          },
          "country_code": {
            "title": "Country Code",
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "[ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code for the user"
          },
          "language_code": {
            "title": "Language Code",
            "maxLength": 3,
            "minLength": 2,
            "type": "string",
            "description": "[ISO 639-2](https://www.loc.gov/standards/iso639-2/php/code_list.php) language code"
          },
          "device_id": {
            "title": "Device Id",
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "Unique Identifier for the device a session is started on.  E.g should be the same for multiple users on the same device."
          }
        }
      },
      "Body_update_opportunity_by_id_v1_opportunity__opportunity_id__post": {
        "title": "Body_update_opportunity_by_id_v1_opportunity__opportunity_id__post",
        "required": [
          "state"
        ],
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/OpportunityState"
          },
          "abort_reason": {
            "$ref": "#/components/schemas/OpportunityAbortReason"
          },
          "abort_seconds": {
            "title": "Abort Seconds",
            "minimum": 0,
            "type": "integer",
            "description": "Number of seconds into the video when the abort happened"
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "HzApiErrorModel": {
        "title": "HzApiErrorModel",
        "required": [
          "error_code",
          "desc"
        ],
        "type": "object",
        "properties": {
          "auth_success": {
            "title": "Auth Success",
            "type": "boolean",
            "default": true
          },
          "error_code": {
            "title": "Error Code",
            "type": "string"
          },
          "desc": {
            "title": "Desc",
            "type": "string"
          }
        }
      },
      "OpportunityAbortReason": {
        "title": "OpportunityAbortReason",
        "enum": [
          "cancel",
          "other"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "CANCEL",
          "OTHER"
        ],
        "x-enum-descriptions": [
          "Ad was closed by the user",
          "Ad was closed from a misc cause"
        ]
      },
      "OpportunityState": {
        "title": "OpportunityState",
        "enum": [
          "start",
          "complete",
          "abort"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "START",
          "COMPLETE",
          "ABORT"
        ],
        "x-enum-descriptions": [
          "User started watching the ad",
          "User finished watching the ad",
          "User stopped watching the ad partway through"
        ]
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "BlockedList": {
        "title": "BlockedList",
        "required": [
          "player_uuid",
          "blocked",
          "page"
        ],
        "type": "object",
        "properties": {
          "player_uuid": {
            "title": "Player's UUID",
            "type": "string",
            "format": "uuid"
          },
          "blocked": {
            "title": "Player's Block list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockedPlayer"
            }
          },
          "page": {
            "$ref": "#/components/schemas/PageMeta"
          }
        },
        "description": "The list of players that is blocked."
      },
      "BlockedListV1": {
        "title": "BlockedListV1",
        "required": [
          "player_id",
          "player_uuid",
          "blocked",
          "page"
        ],
        "type": "object",
        "properties": {
          "player_id": {
            "title": "Player's ID",
            "type": "integer"
          },
          "player_uuid": {
            "title": "Player's UUID",
            "type": "string",
            "format": "uuid"
          },
          "blocked": {
            "title": "Player's Block list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlockedPlayerV1"
            }
          },
          "page": {
            "$ref": "#/components/schemas/PageMeta"
          }
        },
        "description": "The list of players that is blocked. V1 includes player_id and player_uuid."
      },
      "BlockedPlayer": {
        "title": "BlockedPlayer",
        "required": [
          "blocked_player_uuid",
          "last_modified_on"
        ],
        "type": "object",
        "properties": {
          "blocked_player_uuid": {
            "title": "Player UUID of Blocked Player",
            "type": "string",
            "format": "uuid"
          },
          "last_modified_on": {
            "title": "The time when the friends relationship was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "The player that is being blocked."
      },
      "BlockedPlayerV1": {
        "title": "BlockedPlayerV1",
        "required": [
          "blocked_player_id",
          "blocked_player_uuid",
          "last_modified_on"
        ],
        "type": "object",
        "properties": {
          "blocked_player_id": {
            "title": "Blocked Player's ID",
            "type": "integer"
          },
          "blocked_player_uuid": {
            "title": "Friend's Player ID",
            "type": "string",
            "format": "uuid"
          },
          "last_modified_on": {
            "title": "The time when the friends relationship was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "The player that is being blocked. V1 includes player_id and player_uuid."
      },
      "FriendRelationship": {
        "title": "FriendRelationship",
        "required": [
          "friends_player_uuid",
          "status",
          "last_modified_on"
        ],
        "type": "object",
        "properties": {
          "friends_player_uuid": {
            "title": "Player UUID of Friend",
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "$ref": "#/components/schemas/FriendshipStatus"
          },
          "notes": {
            "title": "Player's notes about the other player",
            "type": "string"
          },
          "last_modified_on": {
            "title": "The time when the friends relationship was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Represents the relationship with a potential friend."
      },
      "FriendRelationshipV1": {
        "title": "FriendRelationshipV1",
        "required": [
          "friends_player_uuid",
          "friends_player_id",
          "status",
          "last_modified_on"
        ],
        "type": "object",
        "properties": {
          "friends_player_uuid": {
            "title": "Player UUID of Friend",
            "type": "string",
            "format": "uuid"
          },
          "friends_player_id": {
            "title": "Player ID of Friend",
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/FriendshipStatus"
          },
          "notes": {
            "title": "Player's notes about the other player",
            "type": "string"
          },
          "last_modified_on": {
            "title": "The time when the friends relationship was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "Represents the relationship with a potential friend. V1 includes player_id and player_uuid."
      },
      "Friends": {
        "title": "Friends",
        "required": [
          "friends"
        ],
        "type": "object",
        "properties": {
          "friends": {
            "title": "List of Player UUIDs to operate on",
            "maxItems": 50,
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "description": "List of player_uuids to operate on."
      },
      "FriendsApiConfig": {
        "title": "FriendsApiConfig",
        "type": "object",
        "properties": {
          "friend_limit": {
            "title": "Friend Limit",
            "type": "integer",
            "description": "Maximum number of friends a user can have",
            "default": 10000
          },
          "block_limit": {
            "title": "Block Limit",
            "type": "integer",
            "description": "Maximum number of blocked users a user can have",
            "default": 10000
          }
        }
      },
      "FriendsList": {
        "title": "FriendsList",
        "required": [
          "player_uuid",
          "friends",
          "page"
        ],
        "type": "object",
        "properties": {
          "player_uuid": {
            "title": "Player's UUID",
            "type": "string",
            "format": "uuid"
          },
          "friends": {
            "title": "Players Friend list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FriendRelationship"
            }
          },
          "page": {
            "$ref": "#/components/schemas/PageMeta"
          }
        },
        "description": "List of the player's friends. Includes sent friend requests and received friends requests."
      },
      "FriendsListV1": {
        "title": "FriendsListV1",
        "required": [
          "player_uuid",
          "player_id",
          "friends",
          "page"
        ],
        "type": "object",
        "properties": {
          "player_uuid": {
            "title": "Player's UUID",
            "type": "string",
            "format": "uuid"
          },
          "player_id": {
            "title": "Player's ID",
            "type": "integer"
          },
          "friends": {
            "title": "Players Friend list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FriendRelationshipV1"
            }
          },
          "page": {
            "$ref": "#/components/schemas/PageMeta"
          }
        },
        "description": "List of the player's friends. Includes sent friend requests and received friends requests."
      },
      "FriendsV1": {
        "title": "FriendsV1",
        "required": [
          "friends"
        ],
        "type": "object",
        "properties": {
          "friends": {
            "title": "List of Player IDs to operate on",
            "maxItems": 50,
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "description": "List of player_ids to operate on."
      },
      "FriendshipStatus": {
        "title": "FriendshipStatus",
        "enum": [
          "NONE",
          "FRIENDS",
          "FRIEND_REQUEST_SENT",
          "FRIEND_REQUEST_PENDING",
          "FRIEND_REQUEST_DECLINED_BY_OTHER"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "Notes": {
        "title": "Notes",
        "type": "object",
        "properties": {
          "notes": {
            "title": "Notes to set for the Player's friend. If you don't want to modify notes, no not include a body when adding a friend.",
            "maxLength": 4000,
            "minLength": 1,
            "type": "string"
          }
        },
        "description": "Notes to set for the Player's friend. If you don't want to modify notes, no not include in body when adding a friend."
      },
      "PageMeta": {
        "title": "PageMeta",
        "required": [
          "page",
          "limit",
          "total"
        ],
        "type": "object",
        "properties": {
          "page": {
            "title": "Requested page",
            "type": "integer"
          },
          "limit": {
            "title": "Page size",
            "type": "integer"
          },
          "total": {
            "title": "Total collection size",
            "type": "integer"
          }
        }
      },
      "SetSinglePlayerSettingRequest": {
        "title": "SetSinglePlayerSettingRequest",
        "required": [
          "v",
          "value"
        ],
        "type": "object",
        "properties": {
          "v": {
            "title": "V",
            "type": "integer",
            "description": "Setting Type Version to update setting for.  Must be a valid version for the setting type"
          },
          "value": {
            "title": "Value",
            "description": "New value for the setting.  Must conform to the jsonschema defined for the setting type+version"
          }
        },
        "description": "Updatable contents of a setting for a player"
      },
      "SettingData": {
        "title": "SettingData",
        "required": [
          "v"
        ],
        "type": "object",
        "properties": {
          "v": {
            "title": "V",
            "type": "integer",
            "description": "Setting Version"
          },
          "value": {
            "title": "Value",
            "description": "Setting Value document"
          }
        },
        "description": "Setting version/value data from a specific setting type/key for a player"
      },
      "SettingType": {
        "title": "SettingType",
        "required": [
          "versions"
        ],
        "type": "object",
        "properties": {
          "versions": {
            "title": "Versions",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SettingTypeVersion"
            },
            "description": "Map of setting type version ids to the version"
          }
        }
      },
      "SettingTypeVersion": {
        "title": "SettingTypeVersion",
        "required": [
          "value_jsonschema"
        ],
        "type": "object",
        "properties": {
          "allow_update": {
            "title": "Allow Update",
            "type": "boolean",
            "description": "Are players allowed to set/update keys to this version of the setting type?  Does not affect getting or deleting existing settings.",
            "default": true
          },
          "key_regex": {
            "title": "Key Regex",
            "type": "string",
            "description": "Regex that is used to verify keys at assignment time",
            "default": "^.+$"
          },
          "value_jsonschema": {
            "title": "Value Jsonschema",
            "type": "object",
            "description": "[jsonschema](https://json-schema.org/understanding-json-schema/index.html) that is used to verify values at assignment time"
          }
        }
      },
      "AgreementMessage": {
        "title": "AgreementMessage",
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "title": "Message",
            "type": "string"
          },
          "needs_eula": {
            "title": "Needs Eula",
            "type": "boolean",
            "default": false
          },
          "needs_tos": {
            "title": "Needs Tos",
            "type": "boolean",
            "default": false
          },
          "needs_privacy_policy": {
            "title": "Needs Privacy Policy",
            "type": "boolean",
            "default": false
          }
        }
      },
      "GrantType": {
        "title": "GrantType",
        "enum": [
          "google",
          "apple",
          "refresh",
          "epic",
          "xboxlive",
          "ps4_v1",
          "ps4_v3",
          "ps5_v3",
          "nintendo",
          "nintendo_switch",
          "steam",
          "basic",
          "anon"
        ],
        "type": "string",
        "description": "Supported grant types for V1 Login Flow",
        "x-enum-varnames": [
          "GOOGLE",
          "APPLE",
          "REFRESH",
          "EPIC",
          "XBOXLIVE",
          "PS4_V1",
          "PS4_V3",
          "PS5_V3",
          "NINTENDO",
          "NINTENDO_SWITCH",
          "STEAM",
          "BASIC",
          "ANON"
        ],
        "x-enum-descriptions": [
          "Google Grant Type",
          "Apple Grant Type",
          "Refresh Grant Type",
          "Epic Grant Type",
          "Xbox Live Grant Type",
          "Playstation 4 Version 1 Grant Type",
          "Playstation 4 Version 1 Grant Type",
          "Playstation 5 Version 3 Grant Type",
          "Nintendo Grant Type",
          "Nintendo Switch Grant Type",
          "Steam Grant Type",
          "Basic Grant Type",
          "Anonymous Grant Type"
        ]
      },
      "HTTPAuthorizationCredentials": {
        "title": "HTTPAuthorizationCredentials",
        "required": [
          "scheme",
          "credentials"
        ],
        "type": "object",
        "properties": {
          "scheme": {
            "title": "Scheme",
            "type": "string"
          },
          "credentials": {
            "title": "Credentials",
            "type": "string"
          }
        }
      },
      "LoginRequestV1": {
        "title": "LoginRequestV1",
        "required": [
          "grant_type",
          "portal_access_token"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GrantType"
              }
            ],
            "description": "The grant type to use for authentication"
          },
          "portal_access_token": {
            "title": "Portal Access Token",
            "type": "string",
            "description": "Token or secret used to authenticate the provided grant type"
          },
          "portal_display_name": {
            "title": "Portal Display Name",
            "type": "string",
            "description": "Some grant types support client-provided names",
            "default": ""
          },
          "portal_parent_access_token": {
            "title": "Portal Parent Access Token",
            "type": "string",
            "description": "Some grant types have 2 tier authentication and require a second token/secret",
            "default": ""
          },
          "portal_parent_display_name": {
            "title": "Portal Parent Display Name",
            "type": "string",
            "description": "Some grant types have 2 tier authentication and support a second display name",
            "default": ""
          },
          "include_refresh": {
            "title": "Include Refresh",
            "type": "boolean",
            "description": "Indicates if the client wants a refresh token returned",
            "default": false
          },
          "accept_eula": {
            "title": "Accept Eula",
            "type": "boolean",
            "description": "If true, the user has accepted the EULA",
            "default": false
          },
          "accept_tos": {
            "title": "Accept Tos",
            "type": "boolean",
            "description": "If true, the user has accepted the Terms of Service",
            "default": false
          },
          "accept_privacy_policy": {
            "title": "Accept Privacy Policy",
            "type": "boolean",
            "description": "If true, the user has accepted the Privacy Policy",
            "default": false
          }
        }
      },
      "LoginResult": {
        "title": "LoginResult",
        "required": [
          "portal_id",
          "portal_user_id",
          "display_name",
          "active_player_id",
          "person_id",
          "publisher_uuid",
          "tenant_uuid",
          "config_elector_uuid",
          "client_uuid"
        ],
        "type": "object",
        "properties": {
          "portal_id": {
            "title": "Portal Id",
            "type": "integer"
          },
          "portal_user_id": {
            "title": "Portal User Id",
            "type": "string"
          },
          "display_name": {
            "title": "Display Name",
            "type": "string"
          },
          "portal_parent_auth_result": {
            "$ref": "#/components/schemas/PortalUserInfo"
          },
          "permissions": {
            "title": "Permissions",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of permissions for this user.",
            "default": []
          },
          "restrictions": {
            "title": "Restrictions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Restriction"
            },
            "description": "List of restrictions on this player",
            "default": []
          },
          "active_player_id": {
            "title": "Active Player Id",
            "type": "integer"
          },
          "active_player_uuid": {
            "title": "Active Player Uuid",
            "type": "string",
            "format": "uuid"
          },
          "role_id": {
            "title": "Role Id",
            "type": "integer"
          },
          "person_id": {
            "title": "Person Id",
            "type": "string",
            "format": "uuid"
          },
          "access_token": {
            "title": "Access Token",
            "type": "string",
            "default": ""
          },
          "refresh_token": {
            "title": "Refresh Token",
            "type": "string"
          },
          "publisher_uuid": {
            "title": "Publisher Uuid",
            "type": "string",
            "format": "uuid"
          },
          "tenant_uuid": {
            "title": "Tenant Uuid",
            "type": "string",
            "format": "uuid"
          },
          "config_elector_uuid": {
            "title": "Config Elector Uuid",
            "type": "string",
            "format": "uuid"
          },
          "client_uuid": {
            "title": "Client Uuid",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "LogoutRequest": {
        "title": "LogoutRequest",
        "required": [
          "refresh_token"
        ],
        "type": "object",
        "properties": {
          "refresh_token": {
            "title": "Refresh Token",
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "LookupResults": {
        "title": "LookupResults",
        "type": "object",
        "properties": {
          "display_names": {
            "title": "Display Names",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlayerResponse"
                }
              }
            },
            "default": []
          },
          "identity_platforms": {
            "title": "Identity Platforms",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PlatformIdentityLookupResults"
              }
            },
            "default": {}
          }
        }
      },
      "MessageOnly": {
        "title": "MessageOnly",
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "title": "Message",
            "type": "string"
          }
        }
      },
      "OAuthGrantType": {
        "title": "OAuthGrantType",
        "enum": [
          "client_credentials"
        ],
        "type": "string",
        "description": "Supported OAuth2 grant types",
        "x-enum-varnames": [
          "CLIENT_CREDENTIALS"
        ],
        "x-enum-descriptions": [
          "The OAuth2 client credentials grant type"
        ]
      },
      "OAuthPortal": {
        "title": "OAuthPortal",
        "enum": [
          "google",
          "apple",
          "epic",
          "xbox",
          "psn",
          "nintendo",
          "steam",
          "amazon",
          "twitch"
        ],
        "type": "string",
        "description": "Supported OAuth portals for V1 Login Flow",
        "x-enum-varnames": [
          "GOOGLE",
          "APPLE",
          "EPIC",
          "XBOX",
          "PSN",
          "NINTENDO",
          "STEAM",
          "AMAZON",
          "TWITCH"
        ],
        "x-enum-descriptions": [
          "Google OAuth Portal",
          "Apple OAuth Portal",
          "Epic OAuth Portal",
          "Xbox OAuth Portal",
          "Playstation Network OAuth Portal",
          "Nintendo OAuth Portal",
          "Steam OAuth Portal",
          "Amazon OAuth Portal",
          "Twitch OAuth Portal"
        ]
      },
      "OAuthTokenExchange": {
        "title": "OAuthTokenExchange",
        "required": [
          "grant_type",
          "code"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "title": "Grant Type",
            "type": "string"
          },
          "code": {
            "title": "Code",
            "type": "string"
          },
          "accepted_eula": {
            "title": "Accepted Eula",
            "type": "boolean"
          },
          "accepted_tos": {
            "title": "Accepted Tos",
            "type": "boolean"
          },
          "accepted_privacy_policy": {
            "title": "Accepted Privacy Policy",
            "type": "boolean"
          }
        }
      },
      "OAuthTokenResponse": {
        "title": "OAuthTokenResponse",
        "type": "object",
        "properties": {
          "access_token": {
            "title": "Access Token",
            "type": "string"
          },
          "refresh_token": {
            "title": "Refresh Token",
            "type": "string"
          },
          "needs_eula": {
            "title": "Needs Eula",
            "type": "boolean"
          },
          "needs_tos": {
            "title": "Needs Tos",
            "type": "boolean"
          },
          "needs_privacy_policy": {
            "title": "Needs Privacy Policy",
            "type": "boolean"
          },
          "regenerated_code": {
            "title": "Regenerated Code",
            "type": "string"
          },
          "error_message": {
            "title": "Error Message",
            "type": "string"
          }
        }
      },
      "PersonEmailListRequest": {
        "title": "PersonEmailListRequest",
        "type": "object",
        "properties": {
          "email_list_ids": {
            "title": "List of all SendInBlue email list ids the user is subscribed to, even if already subscribed before request",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "default": []
          }
        }
      },
      "PersonEmailListResponse": {
        "title": "PersonEmailListResponse",
        "required": [
          "email_list_ids"
        ],
        "type": "object",
        "properties": {
          "email_list_ids": {
            "title": "Email List Ids",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "PersonInfoResponse": {
        "title": "PersonInfoResponse",
        "type": "object",
        "properties": {
          "person_id": {
            "title": "Person Id",
            "type": "string",
            "format": "uuid"
          },
          "active_player_id": {
            "title": "Active Player Id",
            "type": "integer"
          },
          "email": {
            "title": "Email",
            "type": "string"
          }
        }
      },
      "PlatformIdentityLookupResults": {
        "title": "PlatformIdentityLookupResults",
        "type": "object",
        "properties": {
          "identity": {
            "title": "Identity",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlayerResponse"
            },
            "default": {}
          }
        }
      },
      "PlayerIdWrapper": {
        "title": "PlayerIdWrapper",
        "required": [
          "player_id"
        ],
        "type": "object",
        "properties": {
          "player_id": {
            "title": "Player Id",
            "type": "integer"
          }
        }
      },
      "PlayerIterateResponse": {
        "title": "PlayerIterateResponse",
        "type": "object",
        "properties": {
          "players": {
            "title": "Players",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerResponse"
            },
            "default": []
          },
          "cursor": {
            "title": "Cursor",
            "type": "string",
            "default": ""
          }
        }
      },
      "PlayerLinkedPortalsResponse": {
        "title": "PlayerLinkedPortalsResponse",
        "required": [
          "player",
          "linked_portals"
        ],
        "type": "object",
        "properties": {
          "player": {
            "$ref": "#/components/schemas/PlayerPersonResponse"
          },
          "linked_portals": {
            "title": "Linked Portals",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortalUserResponse"
            }
          }
        }
      },
      "PlayerPersonResponse": {
        "title": "PlayerPersonResponse",
        "required": [
          "player_id",
          "player_uuid",
          "person_id"
        ],
        "type": "object",
        "properties": {
          "player_id": {
            "title": "Player Id",
            "type": "integer"
          },
          "player_uuid": {
            "title": "Player Uuid",
            "type": "string",
            "format": "uuid"
          },
          "active_player_id": {
            "title": "Active Player Id",
            "type": "integer"
          },
          "active_player_uuid": {
            "title": "Active Player Uuid",
            "type": "string",
            "format": "uuid"
          },
          "person_id": {
            "title": "Person Id",
            "type": "string"
          }
        }
      },
      "PlayerResponse": {
        "title": "PlayerResponse",
        "required": [
          "player_id",
          "player_uuid"
        ],
        "type": "object",
        "properties": {
          "player_id": {
            "title": "Player Id",
            "type": "integer"
          },
          "player_uuid": {
            "title": "Player Uuid",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "PlayerUuidFromId": {
        "title": "PlayerUuidFromId",
        "required": [
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "title": "Uuid",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "Portal": {
        "title": "Portal",
        "enum": [
          2,
          4,
          5,
          9,
          10,
          11,
          13,
          16,
          22,
          24,
          26,
          28,
          33
        ],
        "type": "integer",
        "description": "Portals a.k.a platforms that a player can be linked/authenticated with",
        "x-enum-varnames": [
          "ANON",
          "AMAZON",
          "STEAM",
          "PSN",
          "XBOXLIVE",
          "BASIC",
          "GOOGLE",
          "TWITCH",
          "NINTENDO_SWITCH",
          "APPLE",
          "NINTENDO",
          "EPIC",
          "NINTENDO_PPID"
        ],
        "x-enum-descriptions": [
          "Anonymous portal used for testing. This is not intended to be used by real players.",
          "Amazon portal",
          "Steam portal",
          "Playstation Network portal",
          "Xbox Live portal",
          "Basic portal",
          "Google portal",
          "Twitch portal",
          "Nintendo Switch portal",
          "Apple portal",
          "Nintendo portal",
          "Epic portal",
          "Nintendo PPID portal"
        ]
      },
      "PortalTokenDetailsGrantType": {
        "title": "PortalTokenDetailsGrantType",
        "enum": [
          "ps4_v1",
          "ps4_v3",
          "ps5_v3"
        ],
        "type": "string",
        "description": "The grant type used to authenticate the portal tokens",
        "x-enum-varnames": [
          "PS4_V1",
          "PS4_V3",
          "PS5_V3"
        ],
        "x-enum-descriptions": [
          "Playstation 4 Grant Version 1",
          "Playstation 4 Grant Version 3",
          "Playstation 5 Grant Version 3"
        ]
      },
      "PortalTokenDetailsRequest": {
        "title": "PortalTokenDetailsRequest",
        "required": [
          "grant_type",
          "portal_access_token"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "$ref": "#/components/schemas/PortalTokenDetailsGrantType"
          },
          "portal_access_token": {
            "title": "Portal Access Token",
            "type": "string",
            "description": "Token or secret used to authenticate the provided grant type"
          }
        }
      },
      "PortalUserInfo": {
        "title": "PortalUserInfo",
        "required": [
          "portal_id",
          "portal_user_id",
          "display_name"
        ],
        "type": "object",
        "properties": {
          "portal_id": {
            "$ref": "#/components/schemas/Portal"
          },
          "portal_user_id": {
            "title": "Portal User Id",
            "type": "string"
          },
          "display_name": {
            "title": "Display Name",
            "type": "string"
          }
        }
      },
      "PortalUserResponse": {
        "title": "PortalUserResponse",
        "required": [
          "portal_id",
          "player_id",
          "player_uuid"
        ],
        "type": "object",
        "properties": {
          "portal_user_id": {
            "title": "Portal User Id",
            "type": "string"
          },
          "portal_id": {
            "title": "Portal Id",
            "type": "integer"
          },
          "display_name": {
            "title": "Display Name",
            "type": "string"
          },
          "player_id": {
            "title": "Player Id",
            "type": "integer"
          },
          "player_uuid": {
            "title": "Player Uuid",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "PublicKey": {
        "title": "PublicKey",
        "required": [
          "kid",
          "kty",
          "n",
          "e"
        ],
        "type": "object",
        "properties": {
          "kid": {
            "title": "Kid",
            "type": "string"
          },
          "kty": {
            "title": "Kty",
            "type": "string"
          },
          "n": {
            "title": "N",
            "type": "string"
          },
          "e": {
            "title": "E",
            "type": "string"
          }
        }
      },
      "PublicKeyList": {
        "title": "PublicKeyList",
        "required": [
          "keys"
        ],
        "type": "object",
        "properties": {
          "keys": {
            "title": "Keys",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicKey"
            }
          }
        }
      },
      "PurgeRequest": {
        "title": "PurgeRequest",
        "type": "object",
        "properties": {
          "suggested_purge_time": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          }
        }
      },
      "PurgeResponse": {
        "title": "PurgeResponse",
        "required": [
          "person_id",
          "purge_on",
          "created_on",
          "last_modified_on",
          "status"
        ],
        "type": "object",
        "properties": {
          "person_id": {
            "title": "Person Id",
            "type": "string",
            "format": "uuid"
          },
          "purge_on": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "created_on": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "last_modified_on": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "status": {
            "title": "Status",
            "type": "string"
          }
        }
      },
      "Restriction": {
        "title": "Restriction",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/RestrictionType"
          },
          "reason": {
            "title": "Reason",
            "type": "string"
          },
          "expiration": {
            "title": "Expiration",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RestrictionType": {
        "title": "RestrictionType",
        "enum": [
          "account_ban",
          "account_lockout",
          "account_pending_deletion",
          "account_deny_auth"
        ],
        "type": "string",
        "description": "Restrictions that can be applied to a player. Resitrictions are applied to a player by an admin and often types indicates that the player is banned.",
        "x-enum-varnames": [
          "ACCOUNT_BAN",
          "ACCOUNT_LOCKOUT",
          "ACCOUNT_PENDING_DELETION",
          "ACCOUNT_DENY_AUTH"
        ],
        "x-enum-descriptions": [
          "Account is banned",
          "Account is locked out",
          "Account is pending deletion and will be deleted in the future",
          "Restrictions that can be applied to a player. Resitrictions are applied to a player by an admin and often types indicates that the player is banned."
        ]
      },
      "SendInBlueContact": {
        "title": "SendInBlueContact",
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "type": "string"
          },
          "attributes": {
            "title": "Attributes",
            "type": "object"
          },
          "emailBlacklisted": {
            "title": "Emailblacklisted",
            "type": "boolean"
          },
          "listIds": {
            "title": "Listids",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "unlinkListIds": {
            "title": "Unlinklistids",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "updateEnabled": {
            "title": "Updateenabled",
            "type": "boolean"
          }
        }
      },
      "TokenRequest": {
        "title": "TokenRequest",
        "required": [
          "grant_type"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "$ref": "#/components/schemas/OAuthGrantType"
          }
        }
      },
      "TokenResponse": {
        "title": "TokenResponse",
        "required": [
          "access_token",
          "token_type",
          "expires_in"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "title": "Access Token",
            "type": "string"
          },
          "token_type": {
            "title": "Token Type",
            "type": "string"
          },
          "refresh_token": {
            "title": "Refresh Token",
            "type": "string"
          },
          "expires_in": {
            "title": "Expires In",
            "type": "integer"
          }
        }
      },
      "UpdatePersonInfoRequest": {
        "title": "UpdatePersonInfoRequest",
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "type": "string"
          }
        }
      },
      "AdditionalJoinParams": {
        "title": "AdditionalJoinParams",
        "type": "object",
        "properties": {
          "double_args": {
            "title": "Double Args",
            "type": "object",
            "additionalProperties": {
              "type": "number"
            },
            "description": "Additional double arguments to add to the matchmaking ticket",
            "default": {}
          },
          "string_args": {
            "title": "String Args",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "Additional string arguments to add to the matchmaking ticket",
            "default": {}
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "Additional tags to add to the matchmaking ticket",
            "default": []
          },
          "extensions": {
            "title": "Extensions",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "Additional extensions to add to the matchmaking ticket. Value is a base64 string representation of the protobuf binary data. The data will be converted back to binary before being put on the ticket",
            "default": {}
          }
        }
      },
      "BrowserInfo": {
        "title": "BrowserInfo",
        "type": "object",
        "properties": {
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "Custom data with the listing of the instance in the Session browser",
            "default": {}
          }
        }
      },
      "BrowserResponse": {
        "title": "BrowserResponse",
        "required": [
          "cursor",
          "browser_sessions"
        ],
        "type": "object",
        "properties": {
          "cursor": {
            "title": "Cursor",
            "type": "integer",
            "description": "Cursor to continue iterating through browser sessions. 0 means we have returned the last entry"
          },
          "browser_sessions": {
            "title": "Browser Sessions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrowserSessionInfo"
            },
            "description": "List of sessions in the browser"
          }
        }
      },
      "BrowserSessionInfo": {
        "title": "BrowserSessionInfo",
        "required": [
          "session_id"
        ],
        "type": "object",
        "properties": {
          "session_id": {
            "title": "Session Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "ID for the session"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "Custom data with the listing of the instance in the Session browser"
          }
        }
      },
      "ClientSettings": {
        "title": "ClientSettings",
        "required": [
          "platform_id",
          "input"
        ],
        "type": "object",
        "properties": {
          "platform_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlatformID"
              }
            ],
            "description": "Which platform this client is one"
          },
          "input": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Input"
              }
            ],
            "description": "Which input type this client is using"
          }
        }
      },
      "ConnectionInfo": {
        "title": "ConnectionInfo",
        "required": [
          "ip"
        ],
        "type": "object",
        "properties": {
          "ip": {
            "title": "Ip",
            "type": "string",
            "description": "IP that sent the request"
          }
        }
      },
      "CreateOrJoinRequest": {
        "title": "CreateOrJoinRequest",
        "required": [
          "client_version",
          "client_settings",
          "session_type"
        ],
        "type": "object",
        "properties": {
          "client_version": {
            "title": "Client Version",
            "type": "string",
            "description": "String representation of semver for client"
          },
          "client_settings": {
            "title": "Client Settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientSettings"
              }
            ],
            "description": "Which input type and platform the client is using"
          },
          "crossplay_preferences": {
            "title": "Crossplay Preferences",
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossplayPreferences"
              }
            ],
            "description": "Client's desired crossplay settings to determine which other clients it can play with. If not defined, assumed to be as permissive as possible"
          },
          "session_type": {
            "title": "Session Type",
            "type": "string",
            "description": "Type of session client is creating or joining"
          },
          "region_id": {
            "title": "Region Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "Preferred region for the instance and match to take place in"
          }
        }
      },
      "CrossplayInput": {
        "title": "CrossplayInput",
        "enum": [
          "desired_inputs_any",
          "desired_inputs_keyboardandmouse",
          "desired_inputs_gamepad",
          "desired_inputs_touch"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "ANY",
          "KBM",
          "GAMEPAD",
          "TOUCH"
        ]
      },
      "CrossplayPlatform": {
        "title": "CrossplayPlatform",
        "enum": [
          "desired_platforms_any",
          "desired_platforms_xboxlike",
          "desired_platforms_playstationlike"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "ANY",
          "XBOX",
          "PLAYSTATION"
        ]
      },
      "CrossplayPreferences": {
        "title": "CrossplayPreferences",
        "required": [
          "permitted_platform",
          "permitted_input"
        ],
        "type": "object",
        "properties": {
          "permitted_platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossplayPlatform"
              }
            ],
            "description": "The platform type that the client is allowed to play with (any, xbox-like only, playstation-like only etc.)"
          },
          "permitted_input": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossplayInput"
              }
            ],
            "description": "The input type that the client is allowed to play with (keyboard and mouse, gamepad, touch input etc.)"
          }
        }
      },
      "Determiner": {
        "title": "Determiner",
        "enum": [
          "allOf",
          "anyOf",
          "oneOf",
          "noneOf"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "ALL",
          "ANY",
          "ONE",
          "NONE"
        ]
      },
      "FubarResponse": {
        "title": "FubarResponse",
        "type": "object",
        "properties": {}
      },
      "HostType": {
        "title": "HostType",
        "enum": [
          "dedicated",
          "player"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "dedicated",
          "player"
        ]
      },
      "Input": {
        "title": "Input",
        "enum": [
          "keyboardandmouse",
          "gamepad",
          "touch"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "KBM",
          "GAMEPAD",
          "TOUCH"
        ]
      },
      "InstanceFubar": {
        "title": "InstanceFubar",
        "required": [
          "instance_id",
          "error",
          "region"
        ],
        "type": "object",
        "properties": {
          "instance_id": {
            "title": "Instance Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "ID for which instance was marked as FUBAR"
          },
          "error": {
            "title": "Error",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "Error string describing what caused the instance failure"
          },
          "region": {
            "title": "Region",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "What region the failed instance was in"
          },
          "matchmaking_profile_id": {
            "title": "Matchmaking Profile Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "ID for which matchmaking profile was used to generate the failed instance"
          },
          "instance_source_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceSourceProvider"
              }
            ],
            "description": "Which instance provider allocated this failed instance"
          }
        }
      },
      "InstanceInfo": {
        "title": "InstanceInfo",
        "required": [
          "host_type",
          "join_status",
          "created"
        ],
        "type": "object",
        "properties": {
          "allocation_id": {
            "title": "Allocation Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "Allocation ID for instance that's been spun up"
          },
          "instance_id": {
            "title": "Instance Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "Unique ID for the host/session relationship"
          },
          "host_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HostType"
              }
            ],
            "description": "Type of the host"
          },
          "host_player_id": {
            "title": "Host Player Id",
            "type": "integer",
            "description": "Player ID of the host, if the host type is player"
          },
          "host_player_uuid": {
            "title": "Host Player Uuid",
            "type": "string",
            "description": "Player UUID of the host, if the host type is player",
            "format": "uuid"
          },
          "host_dedicated_process_id": {
            "title": "Host Dedicated Process Id",
            "type": "string",
            "description": "Unique ID for the process that is running this instance"
          },
          "host_dedicated_server_id": {
            "title": "Host Dedicated Server Id",
            "type": "string",
            "description": "Unique ID for the machine running the instance"
          },
          "join_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceJoinableStatus"
              }
            ],
            "description": "Is the instance joinable at this time?"
          },
          "join_params": {
            "title": "Join Params",
            "allOf": [
              {
                "$ref": "#/components/schemas/JoinParams"
              }
            ],
            "description": "Parameters to join the instance"
          },
          "instance_startup_params": {
            "title": "Instance Startup Params",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceStartupParams"
              }
            ],
            "description": "Parameters used by the host to startup. For UE5 this will contain the map and gamemode"
          },
          "version": {
            "title": "Version",
            "type": "string",
            "description": "Product Client Version number.  Used for compatibility checking with players",
            "format": "semver",
            "example": "21.3.15-beta+12345"
          },
          "created": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "instance-defined custom data",
            "default": {}
          }
        }
      },
      "InstanceInfoUpdate": {
        "title": "InstanceInfoUpdate",
        "type": "object",
        "properties": {
          "allocation_id": {
            "title": "Allocation Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "Allocation ID for instance that's been spun up"
          },
          "join_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceJoinableStatus"
              }
            ],
            "description": "Is the instance joinable at this time?"
          },
          "join_params": {
            "title": "Join Params",
            "allOf": [
              {
                "$ref": "#/components/schemas/JoinParams"
              }
            ],
            "description": "Parameters to join the instance"
          },
          "version": {
            "title": "Version",
            "type": "string",
            "description": "Product Client Version number.  Used for compatibility checking with players.  Must be compatible with all players to spawn",
            "format": "semver",
            "example": "21.3.15-beta+12345"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "instance-defined custom data",
            "default": {}
          }
        }
      },
      "InstanceJoinableStatus": {
        "title": "InstanceJoinableStatus",
        "enum": [
          "requested",
          "allocated",
          "pending",
          "joinable",
          "closed"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "Searching for a host",
          "Host has been found",
          "Host has arrived",
          "Host is ready to accept players",
          "Host has left, been timed out, or could not be found"
        ],
        "x-enum-varnames": [
          "requested",
          "allocated",
          "pending",
          "joinable",
          "closed"
        ]
      },
      "InstanceLaunchTemplate": {
        "title": "InstanceLaunchTemplate",
        "required": [
          "instance_launch_template_id",
          "map_selection_list",
          "custom_data"
        ],
        "type": "object",
        "properties": {
          "instance_launch_template_id": {
            "title": "Instance Launch Template Id",
            "type": "string",
            "description": "ID to uniquely identify this instance launch template",
            "format": "uuid"
          },
          "map_selection_list": {
            "title": "Map Selection List",
            "allOf": [
              {
                "$ref": "#/components/schemas/MapSelectionList"
              }
            ],
            "description": "A selection list of maps that can be chosen to launch into"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "Custom data that will be passed to the session during the instance launch request"
          }
        }
      },
      "InstanceRequest": {
        "title": "InstanceRequest",
        "required": [
          "host_type"
        ],
        "type": "object",
        "properties": {
          "instance_id": {
            "title": "Instance Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "Unique ID for the instance, a new one will be generated if not provided"
          },
          "instance_startup_params": {
            "title": "Instance Startup Params",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceStartupParams"
              }
            ],
            "description": "Parameters used by the host to startup. For UE5 this will contain the map and gamemode"
          },
          "host_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HostType"
              }
            ],
            "description": "Type of the host"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "instance-defined custom data",
            "default": {}
          }
        }
      },
      "InstanceSourceProvider": {
        "title": "InstanceSourceProvider",
        "enum": [
          "player",
          "sic",
          "multiplay"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "PLAYER",
          "SIC",
          "MULTIPLAY"
        ]
      },
      "InstanceStartupParams": {
        "title": "InstanceStartupParams",
        "required": [
          "map",
          "misc_params"
        ],
        "type": "object",
        "properties": {
          "map": {
            "title": "Map",
            "type": "string",
            "description": "Name of the map for the instance to spawn with"
          },
          "mode": {
            "title": "Mode",
            "type": "string",
            "description": "Game mode for the instance to spawn in"
          },
          "misc_params": {
            "title": "Misc Params",
            "type": "string",
            "description": "Additional commandline parameters for the instance"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "Custom data to pass through to the instance",
            "default": {}
          }
        }
      },
      "JoinParams": {
        "title": "JoinParams",
        "required": [
          "public_conn_str",
          "private_conn_str"
        ],
        "type": "object",
        "properties": {
          "public_conn_str": {
            "title": "Public Conn Str",
            "type": "string",
            "description": "Public connection string for instance"
          },
          "private_conn_str": {
            "title": "Private Conn Str",
            "type": "string",
            "description": "Private connection string for instance"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "Custom data to join a instance",
            "default": {}
          }
        }
      },
      "MMRGroupingMethod": {
        "title": "MMRGroupingMethod",
        "enum": [
          "worst",
          "best",
          "avg_weighted_by_sigma",
          "avg"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "WORST",
          "BEST",
          "AVERAGE_BY_VARIANCE",
          "AVERAGE"
        ]
      },
      "MapConfig": {
        "title": "MapConfig",
        "required": [
          "map_game_id",
          "map_name",
          "selection_chance"
        ],
        "type": "object",
        "properties": {
          "map_game_id": {
            "title": "Map Game Id",
            "type": "integer",
            "description": "ID to uniquely identify this map game"
          },
          "map_name": {
            "title": "Map Name",
            "type": "string",
            "description": "Name of the map the instance should load into"
          },
          "mode": {
            "title": "Mode",
            "type": "string",
            "description": "Game mode for the instance to spawn in"
          },
          "selection_chance": {
            "title": "Selection Chance",
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "description": "Chance that this map will get selected in a rotation list"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "Custom data to pass through to the instance",
            "default": {}
          }
        }
      },
      "MapSelectionList": {
        "title": "MapSelectionList",
        "required": [
          "map_selection_list_id",
          "maps"
        ],
        "type": "object",
        "properties": {
          "map_selection_list_id": {
            "title": "Map Selection List Id",
            "type": "integer",
            "description": "ID to uniquely identify this map selection list"
          },
          "maps": {
            "title": "Maps",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapConfig"
            },
            "description": "List of maps that can be chosen in this selection list"
          }
        }
      },
      "MatchCreateRequest": {
        "title": "MatchCreateRequest",
        "required": [
          "match_id"
        ],
        "type": "object",
        "properties": {
          "match_id": {
            "title": "Match Id",
            "type": "string",
            "description": "Unique ID"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "instance-defined custom data",
            "default": {}
          }
        }
      },
      "MatchCreateResponse": {
        "title": "MatchCreateResponse",
        "required": [
          "match_id"
        ],
        "type": "object",
        "properties": {
          "match_id": {
            "title": "Match Id",
            "type": "string",
            "description": "Unique ID"
          }
        }
      },
      "MatchInfo": {
        "title": "MatchInfo",
        "required": [
          "match_id",
          "created"
        ],
        "type": "object",
        "properties": {
          "match_id": {
            "title": "Match Id",
            "type": "string",
            "description": "Unique ID"
          },
          "created": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "instance-defined custom data",
            "default": {}
          },
          "ticket_ids": {
            "title": "Ticket Ids",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tickets that were assigned to this match if created by matchmaking",
            "default": []
          }
        }
      },
      "MatchMakingProfile": {
        "title": "MatchMakingProfile",
        "required": [
          "profile_id",
          "instance_launch_template_id"
        ],
        "type": "object",
        "properties": {
          "profile_id": {
            "title": "Profile Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "ID of the matchmaking profile to join"
          },
          "join_mode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProfileJoinMode"
              }
            ],
            "description": "What mode to set on the matchmaking profile (normal, backfill etc)",
            "default": "normal"
          },
          "instance_launch_template_id": {
            "title": "Instance Launch Template Id",
            "type": "string",
            "description": "Which instance template to use when launching a match in this profile",
            "format": "uuid"
          }
        }
      },
      "MatchMakingRuleset": {
        "title": "MatchMakingRuleset",
        "required": [
          "rules",
          "determiner"
        ],
        "type": "object",
        "properties": {
          "rules": {
            "title": "Rules",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rule"
            },
            "description": "A list of the rules to be checked for this ruleset"
          },
          "determiner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Determiner"
              }
            ],
            "description": "Determiner of how many rules must be satisfied in this rulest (all, any, one, none)"
          }
        }
      },
      "MatchMakingSessionRequest": {
        "title": "MatchMakingSessionRequest",
        "required": [
          "teams",
          "session_tickets",
          "instance_launch_template_id",
          "region_id",
          "match_id"
        ],
        "type": "object",
        "properties": {
          "teams": {
            "title": "Teams",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionTeam"
            },
            "description": "List of teams that are to be invited to session"
          },
          "session_tickets": {
            "title": "Session Tickets",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "List of sessions and tickets the match was made with. Used to verify this match should still be created"
          },
          "instance_launch_template_id": {
            "title": "Instance Launch Template Id",
            "type": "string",
            "description": "Which launch template should be used to request an instance",
            "format": "uuid"
          },
          "region_id": {
            "title": "Region Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "Region to start the instance in"
          },
          "match_id": {
            "title": "Match Id",
            "type": "string",
            "description": "Unique ID for this generated match"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "Custom data about the match",
            "default": {}
          }
        }
      },
      "MatchMakingTemplate": {
        "title": "MatchMakingTemplate",
        "required": [
          "mmr_group_method",
          "profiles"
        ],
        "type": "object",
        "properties": {
          "mmr_group_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MMRGroupingMethod"
              }
            ],
            "description": "What method should be used to calculate a group's MMR based on the individual player's ranks"
          },
          "ruleset": {
            "title": "Ruleset",
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchMakingRuleset"
              }
            ],
            "description": "A set of rules that determine whether or not this matchmaking config should be used."
          },
          "profiles": {
            "title": "Profiles",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchMakingProfile"
            },
            "description": "A list of which match making profiles are going to be created on the ticket"
          }
        }
      },
      "MatchMakingTemplateGroup": {
        "title": "MatchMakingTemplateGroup",
        "required": [
          "template_group_id",
          "template_options"
        ],
        "type": "object",
        "properties": {
          "template_group_id": {
            "title": "Template Group Id",
            "type": "string",
            "description": "ID for this set of potential matchmaking templates",
            "format": "uuid"
          },
          "template_options": {
            "title": "Template Options",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchMakingTemplate"
            },
            "description": "List of the different matchmaking templates that could be used. The config is chosen based on a set of rules in each MatchMakingTemplate object. If there are no rules, it's the default template"
          },
          "required_item_ids": {
            "title": "Required Item Ids",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Set of all the item ids that are required to validate every rule contained in this template group",
            "default": []
          }
        }
      },
      "MatchmakingInfo": {
        "title": "MatchmakingInfo",
        "required": [
          "ticket_id"
        ],
        "type": "object",
        "properties": {
          "ticket_id": {
            "title": "Ticket Id",
            "type": "string",
            "description": "Unique ID for this attempt at matchmaking"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "session-defined custom data",
            "default": {}
          }
        }
      },
      "Operation": {
        "title": "Operation",
        "enum": [
          "eq",
          "ne",
          "lt",
          "le",
          "gt",
          "ge"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "EQUAL",
          "NOT_EQUAL",
          "LESS_THAN",
          "LESS_THAN_EQUAL",
          "GREATER_THAN",
          "GREATER_THAN_EQUAL"
        ]
      },
      "PlatformID": {
        "title": "PlatformID",
        "enum": [
          2,
          4,
          5,
          9,
          10,
          11,
          13,
          16,
          22,
          24,
          26,
          28
        ],
        "type": "integer",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "ANON",
          "AMAZON",
          "STEAM",
          "PSN",
          "XBOXLIVE",
          "BASIC",
          "GOOGLE",
          "TWITCH",
          "NINTENDO_SWITCH",
          "APPLE",
          "NINTENDO",
          "EPIC"
        ]
      },
      "PlatformSession": {
        "title": "PlatformSession",
        "required": [
          "platform_id",
          "platform_session_id_base64",
          "players"
        ],
        "type": "object",
        "properties": {
          "platform_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlatformID"
              }
            ],
            "description": "Platform that this session is for"
          },
          "platform_session_id_base64": {
            "title": "Platform Session Id Base64",
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "description": "Platform session's unique identifier"
          },
          "players": {
            "title": "Players",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformSessionPlayer"
            },
            "description": "Players in the platform session"
          }
        }
      },
      "PlatformSessionPlayer": {
        "title": "PlatformSessionPlayer",
        "required": [
          "player_id",
          "player_uuid"
        ],
        "type": "object",
        "properties": {
          "player_id": {
            "title": "Player Id",
            "type": "integer",
            "description": "Player ID representing the current player"
          },
          "player_uuid": {
            "title": "Player Uuid",
            "type": "string",
            "description": "Player UUID representing the current player",
            "format": "uuid"
          },
          "leader": {
            "title": "Leader",
            "type": "boolean",
            "description": "Is this player the leader of the platform session?  When setting up the parent session, if all players are from the same platform session, leadership is coordinated",
            "default": false
          }
        }
      },
      "PlatformSessionTemplate": {
        "title": "PlatformSessionTemplate",
        "required": [
          "platform_id",
          "platform_session_type"
        ],
        "type": "object",
        "properties": {
          "platform_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlatformID"
              }
            ],
            "description": "Platform"
          },
          "platform_session_type": {
            "title": "Platform Session Type",
            "type": "string",
            "description": "Platform-Specific Identifier for the Platform's template"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Product-defined custom metadata",
            "default": {}
          }
        }
      },
      "PlayerSession": {
        "title": "PlayerSession",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "description": "template type"
          },
          "session_ids": {
            "title": "Session Ids",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 128,
              "minLength": 1,
              "type": "string"
            },
            "description": "Sessions the player is currently a part of for this session type, if any.",
            "default": []
          },
          "pending_invites": {
            "title": "Pending Invites",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlayerSessionInvite"
            },
            "description": "Pending invites, if any, for the current player in this session type",
            "default": {}
          }
        }
      },
      "PlayerSessionInvite": {
        "title": "PlayerSessionInvite",
        "required": [
          "session_id"
        ],
        "type": "object",
        "properties": {
          "session_id": {
            "title": "Session Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "Session ID for the invite"
          },
          "inviting_player_uuid": {
            "title": "Inviting Player Uuid",
            "type": "string",
            "description": "Player who sent the invite",
            "format": "uuid"
          }
        }
      },
      "PlayerSessions": {
        "title": "PlayerSessions",
        "type": "object",
        "properties": {
          "sessions": {
            "title": "Sessions",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlayerSession"
            },
            "description": "Session associated with this player, and any pending invites",
            "default": {}
          }
        }
      },
      "ProfileJoinMode": {
        "title": "ProfileJoinMode",
        "enum": [
          "normal",
          "backfill",
          "created_before"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "NORMAL",
          "BACKFILL",
          "CREATED_BEFORE"
        ]
      },
      "QueueConfig": {
        "title": "QueueConfig",
        "required": [
          "queue_id",
          "active",
          "ranking_type",
          "num_sides",
          "max_players_per_side",
          "min_players_per_side",
          "max_queue_group_size",
          "match_making_template_group_id"
        ],
        "type": "object",
        "properties": {
          "queue_id": {
            "title": "Queue Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "ID to uniquely identify this queue"
          },
          "active": {
            "title": "Active",
            "type": "boolean",
            "description": "Flag for whether or not the queue is active, and can be joined or sessions created from it"
          },
          "ranking_type": {
            "title": "Ranking Type",
            "type": "integer",
            "description": "Which rank this queue should use MMR from to make matches from, and update at the end of match (1v1 MMR or 2v2 MMR for example)"
          },
          "num_sides": {
            "title": "Num Sides",
            "type": "integer",
            "description": "The number of sides a game in this queue will have (2 in a 1v1 and 3 in a 1v1v1 for example"
          },
          "max_players_per_side": {
            "title": "Max Players Per Side",
            "type": "integer",
            "description": "The maximum number of players that can be on each team"
          },
          "min_players_per_side": {
            "title": "Min Players Per Side",
            "type": "integer",
            "description": "The minimum number of players that can be on each team"
          },
          "max_queue_group_size": {
            "title": "Max Queue Group Size",
            "type": "integer",
            "description": "The maximum size of a group that can join this queue"
          },
          "match_making_template_group_id": {
            "title": "Match Making Template Group Id",
            "type": "string",
            "description": "ID for which group of matchmaking templates/rules will be used when joining this queue",
            "format": "uuid"
          }
        }
      },
      "QueueJoinRequest": {
        "title": "QueueJoinRequest",
        "required": [
          "queue_id",
          "map_preferences"
        ],
        "type": "object",
        "properties": {
          "queue_id": {
            "title": "Queue Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "ID of the queue to join"
          },
          "additional_join_params": {
            "title": "Additional Join Params",
            "allOf": [
              {
                "$ref": "#/components/schemas/AdditionalJoinParams"
              }
            ],
            "description": "Additional fields put on the matchmaking ticket for open match to search with (see https://openmatch.dev/site/docs/reference/api/#searchfields)"
          },
          "map_preferences": {
            "title": "Map Preferences",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "List of map preferences in order from most desired, to least desired"
          }
        }
      },
      "QueueJoinResponse": {
        "title": "QueueJoinResponse",
        "required": [
          "ticket_id"
        ],
        "type": "object",
        "properties": {
          "ticket_id": {
            "title": "Ticket Id",
            "type": "string",
            "description": "ID for the newly created match making ticket"
          }
        }
      },
      "QueuesResponse": {
        "title": "QueuesResponse",
        "required": [
          "queues"
        ],
        "type": "object",
        "properties": {
          "queues": {
            "title": "Queues",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueueConfig"
            },
            "description": "List of queues"
          }
        }
      },
      "Region": {
        "title": "Region",
        "required": [
          "region_id",
          "sort_order",
          "custom_only"
        ],
        "type": "object",
        "properties": {
          "region_id": {
            "title": "Region Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "ID for this region"
          },
          "sort_order": {
            "title": "Sort Order",
            "minimum": 0,
            "type": "integer",
            "description": "The sorting priority order for this region"
          },
          "custom_only": {
            "title": "Custom Only",
            "type": "boolean",
            "description": "Indicates if the region is for custom games only"
          },
          "description": {
            "title": "Description",
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "Text description of the region"
          }
        }
      },
      "RegionsResponse": {
        "title": "RegionsResponse",
        "required": [
          "regions",
          "cursor"
        ],
        "type": "object",
        "properties": {
          "regions": {
            "title": "Regions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Region"
            },
            "description": "List of all regions"
          },
          "cursor": {
            "title": "Cursor",
            "type": "integer",
            "description": "Cursor to continue iterating through enabled regions. Non 0 cursor in the response means there are more regions. Pass the returned cursor up on a subsequent call to continue. A 0 cursor in the response means you have reached the end"
          }
        }
      },
      "Rule": {
        "title": "Rule",
        "required": [
          "operation",
          "value"
        ],
        "type": "object",
        "properties": {
          "operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Operation"
              }
            ],
            "description": "Comparison operation to be performed"
          },
          "value": {
            "title": "Value",
            "type": "integer",
            "description": "Value to compare to"
          }
        }
      },
      "SelfSessionPlayerUpdateRequest": {
        "title": "SelfSessionPlayerUpdateRequest",
        "required": [
          "client_version",
          "client_settings",
          "team_id"
        ],
        "type": "object",
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionPlayerStatus"
              }
            ],
            "description": "Status that the player would like after the request is complete. Note that some join operations may promote the player from `member` to `leader`",
            "default": "member"
          },
          "client_version": {
            "title": "Client Version",
            "type": "string",
            "description": "Semver for updated client"
          },
          "client_settings": {
            "title": "Client Settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientSettings"
              }
            ],
            "description": "Which input type and platform the client is using"
          },
          "team_id": {
            "title": "Team Id",
            "minimum": 0,
            "type": "integer",
            "description": "Which team the player is one"
          },
          "crossplay_preferences": {
            "title": "Crossplay Preferences",
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossplayPreferences"
              }
            ],
            "description": "Client's desired crossplay settings to determine which other clients it can play with. If not defined, assumed to be as permissive as possible"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "player-defined custom data",
            "default": {}
          }
        }
      },
      "Session": {
        "title": "Session",
        "required": [
          "type",
          "session_id",
          "joinable",
          "teams",
          "created"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "description": "template type"
          },
          "session_id": {
            "title": "Session Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "unique ID for this session within its type"
          },
          "instance": {
            "title": "Instance",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceInfo"
              }
            ],
            "description": "Info about the current active instance for the session"
          },
          "match": {
            "title": "Match",
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchInfo"
              }
            ],
            "description": "Info about the current match in the instance"
          },
          "matchmaking": {
            "title": "Matchmaking",
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchmakingInfo"
              }
            ],
            "description": "Info about the matchmaking state of the session, if it is in the process of matchmaking"
          },
          "browser": {
            "title": "Browser",
            "allOf": [
              {
                "$ref": "#/components/schemas/BrowserInfo"
              }
            ],
            "description": "Info about the browser state of the session"
          },
          "joinable": {
            "title": "Joinable",
            "type": "boolean",
            "description": "Is this session freely joinable by players without an invite?"
          },
          "teams": {
            "title": "Teams",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionTeam"
            },
            "description": "List of teams of players currently in the session"
          },
          "platform_session": {
            "title": "Platform Session",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformSession"
            },
            "description": "Child Platform Sessions for this session.  A player joining one of the child platform sessions implicitly joins the parent session",
            "default": []
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "Leader Player or instance defined custom data about this session",
            "default": {}
          },
          "created": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "region_id": {
            "title": "Region Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "Preferred region for the instance and match to take place in"
          },
          "created_by_matchmaking": {
            "title": "Created By Matchmaking",
            "type": "boolean",
            "description": "Flag of whether or not this session was created by matchmaking or not",
            "default": false
          }
        }
      },
      "SessionEvent": {
        "title": "SessionEvent",
        "required": [
          "event_code",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "event_code": {
            "title": "Event Code",
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "Code that identifies this type of event.  See CommonEventCode for common examples."
          },
          "description": {
            "title": "Description",
            "maxLength": 4096,
            "minLength": 0,
            "type": "string",
            "description": "Description metadata about the event",
            "default": ""
          },
          "source_player_id": {
            "title": "Source Player Id",
            "type": "integer",
            "description": "Player who triggered the event"
          },
          "source_player_uuid": {
            "title": "Source Player Uuid",
            "type": "string",
            "description": "Player who triggered the event",
            "format": "uuid"
          },
          "target_player_id": {
            "title": "Target Player Id",
            "type": "integer",
            "description": "Player who the event was targetted toward, if relevant"
          },
          "target_player_uuid": {
            "title": "Target Player Uuid",
            "type": "string",
            "description": "Player who the event was targetted toward, if relevant",
            "format": "uuid"
          },
          "instance": {
            "title": "Instance",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "Instance that was active at the time of the event"
          },
          "match": {
            "title": "Match",
            "type": "string",
            "description": "Match that was active at the time of the event"
          },
          "platform_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlatformID"
              }
            ],
            "description": "Relevant platform"
          },
          "platform_session_id_base64": {
            "title": "Platform Session Id Base64",
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "description": "Relevant platform session id"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "custom data about this event",
            "default": {}
          },
          "timestamp": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          }
        }
      },
      "SessionEventCreateRequest": {
        "title": "SessionEventCreateRequest",
        "required": [
          "event_code",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "event_code": {
            "title": "Event Code",
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "Code that identifies this type of event.  See CommonEventCode for common examples."
          },
          "description": {
            "title": "Description",
            "maxLength": 4096,
            "minLength": 0,
            "type": "string",
            "description": "Description metadata about the event",
            "default": ""
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "custom data about this event",
            "default": {}
          },
          "timestamp": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          }
        }
      },
      "SessionEvents": {
        "title": "SessionEvents",
        "type": "object",
        "properties": {
          "events": {
            "title": "Events",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionEvent"
            },
            "description": "A list of the events that have occurred in a given session",
            "default": []
          }
        }
      },
      "SessionJoinResponse": {
        "title": "SessionJoinResponse",
        "required": [
          "session_id"
        ],
        "type": "object",
        "properties": {
          "session_id": {
            "title": "Session Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "Session ID the player is now a part of"
          }
        }
      },
      "SessionPlayer": {
        "title": "SessionPlayer",
        "required": [
          "player_uuid",
          "status"
        ],
        "type": "object",
        "properties": {
          "player_id": {
            "title": "Player Id",
            "type": "integer",
            "description": "Legacy id for this player"
          },
          "player_uuid": {
            "title": "Player Uuid",
            "type": "string",
            "description": "UUID for this player",
            "format": "uuid"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionPlayerStatus"
              }
            ],
            "description": "Status of the player in the session"
          },
          "inviting_player_uuid": {
            "title": "Inviting Player Uuid",
            "type": "string",
            "description": "If the player is only a pending invite, this is the player that requested the invite",
            "format": "uuid"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "player-defined custom data",
            "default": {}
          },
          "version": {
            "title": "Version",
            "type": "string",
            "description": "Product Client Version number.  Used for compatibility checking with other players and instances",
            "format": "semver",
            "example": "21.3.15-beta+12345"
          },
          "client_settings": {
            "title": "Client Settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientSettings"
              }
            ],
            "description": "Which input type and platform the client is using"
          },
          "crossplay_preferences": {
            "title": "Crossplay Preferences",
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossplayPreferences"
              }
            ],
            "description": "Client's desired crossplay settings to determine which other clients it can play with. If not defined, assumed to be as permissive as possible"
          },
          "invited": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "joined": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          }
        }
      },
      "SessionPlayerStatus": {
        "title": "SessionPlayerStatus",
        "enum": [
          "leader",
          "member",
          "invited",
          "reserved"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "leader",
          "member",
          "invited",
          "reserved"
        ]
      },
      "SessionPlayerUpdateRequest": {
        "title": "SessionPlayerUpdateRequest",
        "required": [
          "team_id"
        ],
        "type": "object",
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionPlayerStatus"
              }
            ],
            "description": "Status that the player would like after the request is complete.  Note that some join operations may promote the player from `member` to `leader`",
            "default": "member"
          },
          "team_id": {
            "title": "Team Id",
            "minimum": 0,
            "type": "integer",
            "description": "Which team the player should be on"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "player-defined custom data",
            "default": {}
          }
        }
      },
      "SessionPlayerUpdateResponse": {
        "title": "SessionPlayerUpdateResponse",
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionPlayerStatus"
              }
            ],
            "description": "Status of the player after the request is completed"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "Resulting custom data about the player",
            "default": {}
          }
        }
      },
      "SessionTeam": {
        "title": "SessionTeam",
        "required": [
          "players",
          "max_size"
        ],
        "type": "object",
        "properties": {
          "players": {
            "title": "Players",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionPlayer"
            },
            "description": "Players currently on this team"
          },
          "max_size": {
            "title": "Max Size",
            "minimum": 1,
            "type": "integer",
            "description": "Maximum number of players allowed on this team"
          }
        }
      },
      "SessionTemplate": {
        "title": "SessionTemplate",
        "required": [
          "session_type"
        ],
        "type": "object",
        "properties": {
          "session_type": {
            "title": "Session Type",
            "type": "string",
            "description": "unique name for this template"
          },
          "engine_session_type": {
            "title": "Engine Session Type",
            "type": "string",
            "description": "Engine identifier for sessions of this type.  For UE, this is commonly `Party` or `Game`.",
            "default": "Game"
          },
          "can_join_matchmaking": {
            "title": "Can Join Matchmaking",
            "type": "boolean",
            "description": "Are sessions of this type allowed to join matchmaking?",
            "default": false
          },
          "can_be_created_by_players_directly": {
            "title": "Can Be Created By Players Directly",
            "type": "boolean",
            "description": "Are players allowed to create sessions of this type?",
            "default": false
          },
          "joinable": {
            "title": "Joinable",
            "type": "boolean",
            "description": "Should players join existing sessions of this type before creating a new one",
            "default": false
          },
          "auto_add_to_browser": {
            "title": "Auto Add To Browser",
            "type": "boolean",
            "description": "Should session be automatically added to the browser list",
            "default": false
          },
          "auto_browser_params": {
            "title": "Auto Browser Params",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Browser parameters that can be used to filter results",
            "default": {}
          },
          "can_be_added_to_server_browser": {
            "title": "Can Be Added To Server Browser",
            "type": "boolean",
            "description": "Are sessions of this type able to be added to the server browser by players?",
            "default": false
          },
          "keep_alive_on_empty": {
            "title": "Keep Alive On Empty",
            "type": "boolean",
            "description": "Should the session stay around, or be destroyed when the last player leaves it?",
            "default": false
          },
          "platform_templates": {
            "title": "Platform Templates",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PlatformSessionTemplate"
            },
            "description": "Platform-Specific session mappings that are used to coordinate Rally Here sessions with OnlineSubsystem sessions",
            "default": {}
          },
          "auto_startup_params": {
            "title": "Auto Startup Params",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceStartupParams"
              }
            ],
            "description": "Parameters used to start an instance for this session when it is created"
          },
          "min_session_count": {
            "title": "Min Session Count",
            "type": "integer",
            "description": "Minimum number of this type of session to be running at any given time per region.",
            "default": 0
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Product-defined custom metadata",
            "default": {}
          },
          "num_teams": {
            "title": "Num Teams",
            "minimum": 1,
            "type": "integer",
            "description": "The number of teams this session type can have",
            "default": 1
          },
          "players_per_team": {
            "title": "Players Per Team",
            "minimum": 1,
            "type": "integer",
            "description": "The number of players that can be on each team",
            "default": 4
          },
          "can_change_own_team": {
            "title": "Can Change Own Team",
            "type": "boolean",
            "description": "Whether or not a player can change which team they are on. If true, they are able to. If False, they player's team can only be changed by an admin",
            "default": true
          }
        }
      },
      "SessionTemplates": {
        "title": "SessionTemplates",
        "type": "object",
        "properties": {
          "templates": {
            "title": "Templates",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SessionTemplate"
            },
            "description": "Dictionary of SessionTemplates keyed on their template type",
            "default": {}
          }
        }
      },
      "SessionUpdate": {
        "title": "SessionUpdate",
        "type": "object",
        "properties": {
          "region_id": {
            "title": "Region Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "Preferred region for the instance and match to take place in"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "Leader Player or instance defined custom data about this session",
            "default": {}
          }
        }
      },
      "CacheInfo": {
        "title": "CacheInfo",
        "required": [
          "etag"
        ],
        "type": "object",
        "properties": {
          "etag": {
            "title": "Etag",
            "minLength": 1,
            "type": "string"
          },
          "str_rep": {
            "title": "Str Rep",
            "type": "string"
          }
        }
      },
      "Catalog": {
        "title": "Catalog",
        "type": "object",
        "properties": {
          "xp_tables": {
            "$ref": "#/components/schemas/XpTables"
          },
          "portal_use_rulesets": {
            "$ref": "#/components/schemas/PortalUseRulesets"
          },
          "inventory_bucket_use_rule_sets": {
            "$ref": "#/components/schemas/InventoryBucketUseRuleSets"
          },
          "vendors": {
            "$ref": "#/components/schemas/Vendors"
          },
          "loot": {
            "$ref": "#/components/schemas/Loots"
          },
          "items": {
            "$ref": "#/components/schemas/Items"
          },
          "price_points": {
            "$ref": "#/components/schemas/PricePoints"
          },
          "time_frames": {
            "$ref": "#/components/schemas/TimeFrames"
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        },
        "description": "Full list of all loaded objects for the catalog.  Organized in a normalized model"
      },
      "ClaimKeyRequest": {
        "title": "ClaimKeyRequest",
        "type": "object",
        "properties": {
          "external_key_type": {
            "title": "External Key Type",
            "type": "string",
            "default": "Type of the External Key"
          }
        },
        "description": "Attempt to claim a Key Claim from a Marketing Campaign."
      },
      "ClientType": {
        "title": "ClientType",
        "enum": [
          "UNKNOWN",
          "WIN",
          "MAC",
          "XBOXONE",
          "PS4",
          "SWITCH",
          "ANDROID",
          "IOS",
          "PS5",
          "LINUX",
          "XSX"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "Unknown client type",
          "Windows client type",
          "Mac client type",
          "XboxOne client type",
          "Playstation 4 client type",
          "Nintendo Switch client type",
          "Android client type",
          "iOS client type",
          "Playstation 5 client type",
          "Linux client type",
          "XSX client type"
        ],
        "x-enum-varnames": [
          "UNKNOWN",
          "WIN",
          "MAC",
          "XBOXONE",
          "PS4",
          "SWITCH",
          "ANDROID",
          "IOS",
          "PS5",
          "LINUX",
          "XSX"
        ]
      },
      "CreateInventoryRequest": {
        "title": "CreateInventoryRequest",
        "required": [
          "item_id"
        ],
        "type": "object",
        "properties": {
          "bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "default": "none"
          },
          "count": {
            "title": "Count",
            "type": "integer",
            "default": 1
          },
          "expires": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "item_id": {
            "title": "Item Id",
            "type": "integer"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateInventoryType"
              }
            ],
            "default": "persistent"
          }
        }
      },
      "CreateInventoryRequests": {
        "title": "CreateInventoryRequests",
        "required": [
          "inventory"
        ],
        "type": "object",
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Source"
              }
            ],
            "default": "CLIENT"
          },
          "client_order_ref_id": {
            "title": "Client Order Ref Id",
            "type": "string",
            "format": "uuid"
          },
          "inventory": {
            "title": "Inventory",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryRequest"
            }
          }
        }
      },
      "CreateInventoryType": {
        "title": "CreateInventoryType",
        "enum": [
          "persistent",
          "transient"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "PERSISTENT",
          "TRANSIENT"
        ]
      },
      "EntitlementErrorCode": {
        "title": "EntitlementErrorCode",
        "enum": [
          "none",
          "auth_token_failure",
          "missing_information",
          "failed_to_consume",
          "no_sku_found",
          "wrong_sku_type_provided",
          "durable_authority_type_not_valid",
          "durable_single_use_authority_type_not_valid",
          "consumable_authority_type_not_valid",
          "unknown_sku_type_provided",
          "failed_to_submit_order",
          "already_applied_durable_single_use",
          "quantity_zero",
          "previously_applied"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "No error occured",
          "Failed to find or validate the auth token",
          "Missing information in the request",
          "Failed to consume the entitlement",
          "No SKU found for this entitlement on the backend",
          "Entitlement is defined with a different SKU type than the one provided",
          "Durable entitlements are not allowed by this platform",
          "Durable single use entitlements are not allowed by this platform",
          "Consumable entitlements are not allowed by this platform",
          "Unknown SKU type provided",
          "Failed to submit the order to the backend",
          "Durable single use entitlement has already been applied",
          "Quantity was zero, nothing to apply",
          "Entitlement was previously applied"
        ],
        "x-enum-varnames": [
          "NONE",
          "AUTH_TOKEN_FAILURE",
          "MISSING_INFORMATION",
          "FAILED_TO_CONSUME",
          "NO_SKU_FOUND",
          "WRONG_SKU_TYPE_PROVIDED",
          "DURABLE_AUTHORITY_TYPE_NOT_VALID",
          "DURABLE_SINGLE_USE_AUTHORITY_TYPE_NOT_VALID",
          "CONSUMABLE_AUTHORITY_TYPE_NOT_VALID",
          "UNKNOWN_SKU_TYPE_PROVIDED",
          "FAILED_TO_SUBMIT_ORDER",
          "ALREADY_APPLIED_DURABLE_SINGLE_USE",
          "QUANTITY_ZERO",
          "PREVIOUSLY_APPLIED"
        ]
      },
      "EntitlementStatus": {
        "title": "EntitlementStatus",
        "enum": [
          "UNKNOWN",
          "SUBMITTED",
          "FULFILLED",
          "FAILED",
          "PREVIOUSLY_APPLIED"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "Entitlement status is unknown",
          "Entitlement has been submitted to the backend",
          "Entitlement has been fulfilled",
          "Entitlement has failed, check error_code for more information",
          "Entitlement was previously applied"
        ],
        "x-enum-varnames": [
          "UNKNOWN",
          "SUBMITTED",
          "FULFILLED",
          "FAILED",
          "PREVIOUSLY_APPLIED"
        ]
      },
      "Inventory": {
        "title": "Inventory",
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ItemInventory"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "InventoryBucket": {
        "title": "InventoryBucket",
        "enum": [
          "free",
          "sweat",
          "none",
          "anon",
          "amazon",
          "steam",
          "psn",
          "xbox_live",
          "google",
          "twitch",
          "nintendo_switch",
          "apple",
          "nintendo",
          "epic",
          "google_play",
          "nintendo_ppid"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "Inventory given away for free.",
          "Inventory earned by players through in game activities.",
          "Inventory that doesn't belong to any known platform.",
          "Inventory assigned to the anonymous platform.",
          "Inventory assigned to the amazon platform.",
          "Inventory assigned to the steam platform.",
          "Inventory assigned to the playstation platform.",
          "Inventory assigned to the Xbox platform.",
          "Inventory assigned to the Google platform.",
          "Inventory assigned to the Twitch platform.",
          "Inventory assigned to the Nintendo Switch platform.",
          "Inventory assigned to the Apple platform.",
          "Inventory assigned to the Nintendo platform.",
          "Inventory assigned to the Epic platform.",
          "Inventory assigned to the Google Play platform.",
          "Inventory assigned to the Nintendo PPID platform."
        ],
        "x-enum-varnames": [
          "FREE",
          "SWEAT",
          "NONE",
          "ANON",
          "AMAZON",
          "STEAM",
          "PSN",
          "XBOX_LIVE",
          "GOOGLE",
          "TWITCH",
          "NINTENDO_SWITCH",
          "APPLE",
          "NINTENDO",
          "EPIC",
          "GOOGLE_PLAY",
          "NINTENDO_PPID"
        ]
      },
      "InventoryBucketUseRuleSet": {
        "title": "InventoryBucketUseRuleSet",
        "type": "object",
        "properties": {
          "rules": {
            "title": "Rules",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "InventoryBucketUseRuleSets": {
        "title": "InventoryBucketUseRuleSets",
        "type": "object",
        "properties": {
          "rule_sets": {
            "title": "Rule Sets",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/InventoryBucketUseRuleSet"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "InventoryContextResponse": {
        "title": "InventoryContextResponse",
        "type": "object",
        "properties": {
          "inventory": {
            "title": "Inventory",
            "allOf": [
              {
                "$ref": "#/components/schemas/Inventory"
              }
            ],
            "default": {
              "items": {}
            }
          }
        }
      },
      "InventoryOperation": {
        "title": "InventoryOperation",
        "enum": [
          "invalid",
          "add",
          "subtract",
          "set",
          "check_greater_than_or_equal",
          "check_less_than",
          "check_greater_than_or_equal_and_subtract"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "invalid",
          "add",
          "subtract",
          "set",
          "check_greater_than_or_equal",
          "check_less_than",
          "check_greater_than_or_equal_and_subtract"
        ]
      },
      "InventoryRecord": {
        "title": "InventoryRecord",
        "required": [
          "inventory_id",
          "type",
          "count",
          "acquired"
        ],
        "type": "object",
        "properties": {
          "inventory_id": {
            "title": "Inventory Id",
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/InventoryType"
          },
          "legacy_inventory_id": {
            "title": "Legacy Inventory Id",
            "type": "integer"
          },
          "bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "default": "none"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "acquired": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "expires": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "InventorySelector": {
        "title": "InventorySelector",
        "enum": [
          "invalid",
          "own",
          "rent",
          "rent_timeframe_locked",
          "own_transient",
          "inherit_entitlement_inventory"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "invalid",
          "own",
          "rent",
          "rent_timeframe_locked",
          "own_transient",
          "inherit_entitlement_inventory"
        ]
      },
      "InventorySession": {
        "title": "InventorySession",
        "required": [
          "session_id",
          "applied_durable_loot"
        ],
        "type": "object",
        "properties": {
          "session_id": {
            "title": "Session Id",
            "type": "string"
          },
          "session_platform": {
            "$ref": "#/components/schemas/Platform"
          },
          "applied_durable_loot": {
            "title": "Applied Durable Loot",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "InventorySessionCreateRequest": {
        "title": "InventorySessionCreateRequest",
        "type": "object",
        "properties": {
          "session_platform": {
            "$ref": "#/components/schemas/Platform"
          }
        }
      },
      "InventorySessionCreateResponse": {
        "title": "InventorySessionCreateResponse",
        "required": [
          "session_id"
        ],
        "type": "object",
        "properties": {
          "session_id": {
            "title": "Session Id",
            "type": "string"
          },
          "session_platform": {
            "$ref": "#/components/schemas/Platform"
          },
          "order_id": {
            "title": "Order Id",
            "type": "string"
          }
        }
      },
      "InventoryType": {
        "title": "InventoryType",
        "enum": [
          "persistent",
          "transient",
          "always_owned"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "PERSISTENT",
          "TRANSIENT",
          "ALWAYS_OWNED"
        ]
      },
      "Item": {
        "title": "Item",
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemType"
              }
            ],
            "default": "unit"
          },
          "legacy_type": {
            "title": "Legacy Type",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "legacy_subtype": {
            "title": "Legacy Subtype",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "ref_item_id": {
            "title": "Ref Item Id",
            "type": "integer",
            "default": 0
          },
          "availability_flags": {
            "title": "Availability Flags",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "entitled_loot_id": {
            "title": "Entitled Loot Id",
            "type": "integer",
            "default": 0
          },
          "level_xp_table_id": {
            "title": "Level Xp Table Id",
            "type": "integer",
            "default": 0
          },
          "level_vendor_id": {
            "title": "Level Vendor Id",
            "type": "integer",
            "default": 0
          },
          "coupon_discount_currency_item_id": {
            "title": "Coupon Discount Currency Item Id",
            "type": "integer",
            "default": 0
          },
          "coupon_discount_percentage": {
            "title": "Coupon Discount Percentage",
            "type": "number",
            "default": 0
          },
          "coupon_consume_on_use": {
            "title": "Coupon Consume On Use",
            "type": "boolean",
            "default": false
          },
          "item_portal_use_ruleset_id": {
            "title": "Item Portal Use Ruleset Id",
            "type": "integer",
            "default": 0
          },
          "inventory_bucket_use_rule_set_id": {
            "title": "Inventory Bucket Use Rule Set Id",
            "type": "string"
          },
          "coupon_discount_loot": {
            "title": "Coupon Discount Loot",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "List of Loot IDs this item can discount",
            "default": []
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "ItemInventory": {
        "title": "ItemInventory",
        "type": "object",
        "properties": {
          "records": {
            "title": "Records",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/InventoryRecord"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "ItemType": {
        "title": "ItemType",
        "enum": [
          "unit",
          "recipe",
          "recipe_with_price_reduction",
          "entitlement",
          "dynamic_bundle"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "unit",
          "recipe",
          "recipe_with_price_reduction",
          "entitlement",
          "dynamic_bundle"
        ]
      },
      "Items": {
        "title": "Items",
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Item"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "KeyClaim": {
        "title": "KeyClaim",
        "required": [
          "key_claim_uuid"
        ],
        "type": "object",
        "properties": {
          "portal_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryPortal"
              }
            ],
            "description": "Platform the player is on"
          },
          "portal_user_id": {
            "title": "Portal User Id",
            "type": "string",
            "description": "The Platform's unique identifier for the player"
          },
          "key_claim_uuid": {
            "title": "Key Claim Uuid",
            "type": "string",
            "description": "The unique identifier for the KeyClaim",
            "format": "uuid"
          },
          "claimed": {
            "title": "Claimed",
            "type": "boolean",
            "description": "Whether the KeyClaim has been claimed",
            "default": false
          },
          "external_key": {
            "title": "External Key",
            "type": "string",
            "description": "The external key that was been claimed by the player. This is only filled out once the KeyClaim has been claimed"
          },
          "external_key_campaign_uuid": {
            "title": "External Key Campaign Uuid",
            "type": "string",
            "description": "The unique identifier for the MarketingCampaign that the external key was claimed from",
            "format": "uuid"
          },
          "external_key_type": {
            "title": "External Key Type",
            "type": "string",
            "description": "This can be used to allow the player to claim different types based on their preferrence.hile we don't have requirement for what should contain, it must match a key type assigned to the external campaign."
          },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "description": "The time the KeyClaim was created"
          },
          "last_modified_on": {
            "title": "Last Modified On",
            "type": "string",
            "description": "The time the KeyClaim was last modified"
          }
        },
        "description": "A KeyClaim is a reward a player for fulfilling requirements of an eternal marketing campaign. Once the player has completed the requirements of the campaign and have been assigned a sku of the campaign by the Platform, invoke Process Key Entitlements to consume the sku from the Platform for a Key Claim."
      },
      "KeyClaims": {
        "title": "KeyClaims",
        "required": [
          "claims"
        ],
        "type": "object",
        "properties": {
          "claims": {
            "title": "Claims",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyClaim"
            }
          }
        },
        "description": "List of Key Claims available to the player."
      },
      "KeyType": {
        "title": "KeyType",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string"
          }
        }
      },
      "Loot": {
        "title": "Loot",
        "required": [
          "loot_id",
          "vendor_id"
        ],
        "type": "object",
        "properties": {
          "loot_id": {
            "title": "Loot Id",
            "type": "integer"
          },
          "vendor_id": {
            "title": "Vendor Id",
            "type": "integer"
          },
          "item_id": {
            "title": "Item Id",
            "type": "integer"
          },
          "item": {
            "$ref": "#/components/schemas/Item"
          },
          "sub_vendor_id": {
            "title": "Sub Vendor Id",
            "type": "integer"
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "default": 0
          },
          "inventory_selector_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventorySelector"
              }
            ],
            "default": "invalid"
          },
          "inventory_operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryOperation"
              }
            ],
            "default": "invalid"
          },
          "active": {
            "title": "Active",
            "type": "boolean",
            "default": false
          },
          "sort_order": {
            "title": "Sort Order",
            "type": "integer",
            "default": 0
          },
          "drop_weight": {
            "title": "Drop Weight",
            "type": "integer",
            "default": 0
          },
          "fill_in_new_order": {
            "title": "Fill In New Order",
            "type": "boolean",
            "description": "When dropped in a randomly sampled vendor, will this create a new order or fill inline?",
            "default": false
          },
          "allow_partial_bundles": {
            "title": "Allow Partial Bundles",
            "type": "boolean",
            "description": "When dropped in a randomly sampled vendor, will the sub vendor allow dropping part of the the bundle?  False means it will only drop if the entire sub vendor can be given to the player",
            "default": true
          },
          "required_item_id": {
            "title": "Required Item Id",
            "type": "integer",
            "description": "Item required to be owned/rented to drop this Loot in a randomly sampled vendor"
          },
          "required_item_count": {
            "title": "Required Item Count",
            "type": "integer",
            "description": "Amount of the required_item_id to be owned/rented to drop this Loot in a randomly sampled vendor",
            "default": 0
          },
          "stack_limit": {
            "title": "Stack Limit",
            "type": "integer",
            "description": "Amount of owned/rented of this Loot's item that will prevent this loot from droppping in a randomly sampled vendor",
            "default": 0
          },
          "ui_hint": {
            "title": "Ui Hint",
            "type": "integer",
            "default": 0
          },
          "effective_from": {
            "title": "Effective From",
            "type": "string",
            "format": "date-time"
          },
          "quantity_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QuantityType"
              }
            ],
            "default": "relative"
          },
          "quantity_mult_inventory_item_id": {
            "title": "Quantity Mult Inventory Item Id",
            "type": "integer"
          },
          "is_claimable_by_client": {
            "title": "Is Claimable By Client",
            "type": "boolean",
            "default": false
          },
          "time_frame_id": {
            "title": "Time Frame Id",
            "type": "integer"
          },
          "use_inventory_bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "description": "Inventory Bucket to use for this Loot."
          },
          "xp_quantity_transform_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/XpQuantityTransform"
              }
            ],
            "default": "none"
          },
          "current_price_point_guid": {
            "title": "Current Price Point Guid",
            "minLength": 1,
            "type": "string"
          },
          "pre_sale_price_point_guid": {
            "title": "Pre Sale Price Point Guid",
            "minLength": 1,
            "type": "string"
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          },
          "hard_quantity_maximum": {
            "title": "Hard Quantity Maximum",
            "type": "integer",
            "description": "Hard cap on quantity of an item this Loot can give. Disabled with 0",
            "default": 0
          }
        }
      },
      "Loots": {
        "title": "Loots",
        "type": "object",
        "properties": {
          "loot": {
            "title": "Loot",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Loot"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "MarketingCampaign": {
        "title": "MarketingCampaign",
        "required": [
          "uuid",
          "name",
          "key_types"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "title": "Uuid",
            "type": "string",
            "description": "The unique identifier for the Marketing Campaign",
            "format": "uuid"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the Marketing Campaign"
          },
          "portal_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryPortal"
              }
            ],
            "description": "Platform for the Marketing Campaign"
          },
          "key_types": {
            "title": "Key Types",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyType"
            },
            "description": "The types of keys that can be claimed from this campaign"
          },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "description": "The time the MarketingCampaign was created"
          },
          "last_modified_on": {
            "title": "Last Modified On",
            "type": "string",
            "description": "The time the MarketingCampaign was last modified"
          }
        },
        "description": "A Marketing Campaign is a set of external keys that can be claimed by players.The key claims are assigned to the player based on"
      },
      "MarketingCampaigns": {
        "title": "MarketingCampaigns",
        "required": [
          "campaigns"
        ],
        "type": "object",
        "properties": {
          "campaigns": {
            "title": "Campaigns",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketingCampaign"
            }
          }
        },
        "description": "List of external Marketing Campaigns."
      },
      "InventoryPageMeta": {
        "title": "PageMeta",
        "type": "object",
        "properties": {
          "starting_position": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "cursor": {
            "title": "Cursor",
            "type": "string",
            "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored"
          },
          "sort": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SortOrder"
              }
            ],
            "description": "The direction to search.",
            "default": "asc"
          },
          "limit": {
            "title": "Limit",
            "maximum": 50,
            "minimum": 1,
            "type": "integer",
            "description": "The number of Orders to return",
            "default": 10
          }
        }
      },
      "Platform": {
        "title": "Platform",
        "enum": [
          "Anon",
          "Basic",
          "XboxLive",
          "PSN",
          "NintendoNAID",
          "NintendoSwitch",
          "NintendoPPID",
          "Google",
          "GooglePlay",
          "Apple",
          "Epic",
          "Steam",
          "Amazon",
          "Twitch"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "ANON",
          "BASIC",
          "XBOX_LIVE",
          "PSN",
          "NINTENDO_NAID",
          "NINTENDO_SWITCH",
          "NINTENDO_PPID",
          "GOOGLE",
          "GOOGLE_PLAY",
          "APPLE",
          "EPIC",
          "STEAM",
          "AMAZON",
          "TWITCH"
        ]
      },
      "PlatformEntitlement": {
        "title": "PlatformEntitlement",
        "required": [
          "platform_sku",
          "platform_entitlement_id"
        ],
        "type": "object",
        "properties": {
          "platform_sku": {
            "title": "Platform Sku",
            "type": "string",
            "description": "platform identifier for this purchase type"
          },
          "platform_entitlement_id": {
            "title": "Platform Entitlement Id",
            "type": "string",
            "description": "unique identifier for this purchased item (instance owned by this user)"
          },
          "quantity": {
            "title": "Quantity",
            "minimum": 0,
            "type": "integer",
            "description": "number purchased",
            "default": 1
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntitlementStatus"
              }
            ],
            "description": "status of this entitlement",
            "default": "UNKNOWN"
          },
          "error_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntitlementErrorCode"
              }
            ],
            "description": "Error code for this entitlement",
            "default": "none"
          },
          "order_id": {
            "title": "Order Id",
            "type": "string",
            "description": "Order ID for this entitlement"
          }
        }
      },
      "PlatformEntitlementProcessRequest": {
        "title": "PlatformEntitlementProcessRequest",
        "required": [
          "transaction_id",
          "platform_token",
          "platform_id",
          "platform_region",
          "client_type"
        ],
        "type": "object",
        "properties": {
          "transaction_id": {
            "title": "Transaction Id",
            "type": "string",
            "description": "unique id for this transaction on the platform"
          },
          "platform_token": {
            "title": "Platform Token",
            "type": "string",
            "description": "Platform token that can be used to verify the identity of the user"
          },
          "platform_id": {
            "title": "Platform Id",
            "type": "string",
            "description": "Platform this entitlement was purchased was made on"
          },
          "platform_region": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlatformRegion"
              }
            ],
            "description": "region this purchase was made in"
          },
          "client_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientType"
              }
            ],
            "description": "client type this purchase was made on"
          },
          "entitlements": {
            "title": "Entitlements",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformEntitlement"
            },
            "description": "Platform entitlements to process",
            "default": []
          }
        }
      },
      "PlatformEntitlementProcessResult": {
        "title": "PlatformEntitlementProcessResult",
        "required": [
          "request_id",
          "client_type",
          "transaction_id",
          "platform_region",
          "platform_id",
          "platform_user_id"
        ],
        "type": "object",
        "properties": {
          "request_id": {
            "title": "Request Id",
            "type": "string",
            "description": "unique id to allow tracking the request"
          },
          "client_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientType"
              }
            ],
            "description": "client type this purchase was made on"
          },
          "transaction_id": {
            "title": "Transaction Id",
            "type": "string",
            "description": "unique id for this transaction on the platform"
          },
          "platform_region": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlatformRegion"
              }
            ],
            "description": "region this purchase was made in"
          },
          "status": {
            "title": "Status",
            "type": "string",
            "description": "status of this result",
            "default": "SUBMITTED"
          },
          "client_entitlements": {
            "title": "Client Entitlements",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformEntitlement"
            },
            "description": "Client entitlements that have been processed",
            "default": []
          },
          "server_entitlements": {
            "title": "Server Entitlements",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformEntitlement"
            },
            "description": "Server entitlements that have been processed",
            "default": []
          },
          "platform_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Platform these transactions were processed on"
          },
          "platform_user_id": {
            "title": "Platform User Id",
            "type": "string",
            "description": "Unique identifier for the platform user that processed this entitlement"
          },
          "skipped_server_entitlements": {
            "title": "Skipped Server Entitlements",
            "type": "boolean",
            "description": "True if the server entitlements were skipped",
            "default": false
          }
        }
      },
      "PlatformRegion": {
        "title": "PlatformRegion",
        "enum": [
          "Unknown",
          "NA",
          "EU"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "Unknown region",
          "North America region",
          "Europe Union region"
        ],
        "x-enum-varnames": [
          "UNKNOWN",
          "NA",
          "EU"
        ]
      },
      "PlayerInventoryChange": {
        "title": "PlayerInventoryChange",
        "type": "object",
        "properties": {
          "before_item_id": {
            "title": "Before Item Id",
            "type": "integer"
          },
          "after_item_id": {
            "title": "After Item Id",
            "type": "integer"
          },
          "before": {
            "$ref": "#/components/schemas/InventoryRecord"
          },
          "after": {
            "$ref": "#/components/schemas/InventoryRecord"
          }
        }
      },
      "PlayerOrder": {
        "title": "PlayerOrder",
        "required": [
          "order_id",
          "player_uuid",
          "created_time",
          "entries"
        ],
        "type": "object",
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Source"
              }
            ],
            "default": "CLIENT"
          },
          "client_order_ref_id": {
            "title": "Client Order Ref Id",
            "type": "string",
            "format": "uuid"
          },
          "portal_id": {
            "$ref": "#/components/schemas/InventoryPortal"
          },
          "portal_user_id": {
            "title": "Portal User Id",
            "type": "string"
          },
          "instance_id": {
            "title": "Instance Id",
            "type": "string"
          },
          "match_id": {
            "title": "Match Id",
            "type": "string"
          },
          "order_id": {
            "title": "Order Id",
            "type": "string"
          },
          "player_uuid": {
            "title": "Player Uuid",
            "type": "string",
            "format": "uuid"
          },
          "created_time": {
            "title": "Created Time",
            "type": "string",
            "format": "date-time"
          },
          "entries": {
            "title": "Entries",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerOrderEntry"
            }
          }
        }
      },
      "PlayerOrderCreate": {
        "title": "PlayerOrderCreate",
        "required": [
          "entries"
        ],
        "type": "object",
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Source"
              }
            ],
            "default": "CLIENT"
          },
          "client_order_ref_id": {
            "title": "Client Order Ref Id",
            "type": "string",
            "format": "uuid"
          },
          "portal_id": {
            "$ref": "#/components/schemas/InventoryPortal"
          },
          "portal_user_id": {
            "title": "Portal User Id",
            "type": "string"
          },
          "instance_id": {
            "title": "Instance Id",
            "type": "string"
          },
          "match_id": {
            "title": "Match Id",
            "type": "string"
          },
          "order_id": {
            "title": "Order Id",
            "type": "string"
          },
          "entries": {
            "title": "Entries",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerOrderEntryCreate"
            }
          }
        },
        "description": "Create a new Player Order. `use_inventory_bucket` will be ignored on the PlayerOrderEntryCreate if the `source` equals `CLIENT`."
      },
      "PlayerOrderDetail": {
        "title": "PlayerOrderDetail",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PlayerOrderDetailType"
          },
          "loot_id": {
            "title": "Loot Id",
            "type": "integer"
          },
          "inv_change": {
            "$ref": "#/components/schemas/PlayerInventoryChange"
          },
          "order": {
            "$ref": "#/components/schemas/PlayerOrderCreate"
          }
        }
      },
      "PlayerOrderDetailType": {
        "title": "PlayerOrderDetailType",
        "enum": [
          "unknown",
          "inventory_change",
          "dynamic_bundle_lti",
          "claim_promo_code",
          "return_promo_code",
          "new_order"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "UNKNOWN",
          "INVENTORY_CHANGE",
          "DYNAMIC_BUNDLE_LTI",
          "CLAIM_PROMO_CODE",
          "RETURN_PROMO_CODE",
          "NEW_ORDER"
        ]
      },
      "PlayerOrderEntry": {
        "title": "PlayerOrderEntry",
        "required": [
          "type",
          "quantity",
          "entry_id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PlayerOrderEntryType"
          },
          "loot_id": {
            "title": "Loot Id",
            "type": "integer",
            "description": "Unique Identifier for the Loot"
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Quantity of Inventory"
          },
          "vendor_version": {
            "title": "Vendor Version",
            "type": "integer",
            "description": "Legacy version for the vendor owning the loot_id.  Use `vendor_etag` instead.",
            "format": "int64",
            "deprecated": true
          },
          "vendor_etag": {
            "title": "Vendor Etag",
            "type": "string",
            "description": "etag for the vendor owning the loot_id.  Will fail the fulfillment if they do not match"
          },
          "dynamic_bundle_loot_ids": {
            "title": "Dynamic Bundle Loot Ids",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "purchase_price": {
            "$ref": "#/components/schemas/PurchasePrice"
          },
          "external_tran_id": {
            "title": "External Tran Id",
            "type": "string",
            "description": "External Transaction Id for source of the acquisition or a promotion code to claim. Required for [PROMOTION_CODE] types"
          },
          "external_item_sku": {
            "title": "External Item Sku",
            "type": "string"
          },
          "use_inventory_bucket": {
            "$ref": "#/components/schemas/InventoryBucket"
          },
          "player_portal_event_id": {
            "title": "Player Portal Event Id",
            "type": "integer",
            "format": "int64"
          },
          "inventory_id": {
            "title": "Inventory Id",
            "type": "string",
            "description": "Unique Identifier for the Inventory",
            "format": "uuid"
          },
          "legacy_inventory_id": {
            "title": "Legacy Inventory Id",
            "type": "integer",
            "description": "Legacy Inventory Id. This is only used when type equals [UPDATE_EXISTING_PERSISTENT_INVENTORY, UPDATE_EXISTING_TRANSIENT_INVENTORY]",
            "format": "int64"
          },
          "item_id": {
            "title": "Item Id",
            "type": "integer",
            "description": "Item Id used create or update Inventory directly. This is only used when type equals [CREATE_NEW_PERSISTENT_INVENTORY, CREATE_NEW_TRANSIENT_INVENTORY]"
          },
          "expires": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom Data Attributes for the Inventory. This is only used when type equals [CREATE_NEW_PERSISTENT_INVENTORY, UPDATE_EXISTING_PERSISTENT_INVENTORY, CREATE_NEW_TRANSIENT_INVENTORY, UPDATE_EXISTING_TRANSIENT_INVENTORY, UPDATE_INVENTORY]"
          },
          "entry_id": {
            "title": "Entry Id",
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/PlayerOrderEntryResult"
          },
          "details": {
            "title": "Details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerOrderDetail"
            },
            "default": []
          }
        }
      },
      "PlayerOrderEntryCreate": {
        "title": "PlayerOrderEntryCreate",
        "required": [
          "type",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PlayerOrderEntryType"
          },
          "loot_id": {
            "title": "Loot Id",
            "type": "integer",
            "description": "Unique Identifier for the Loot"
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Quantity of Inventory"
          },
          "vendor_version": {
            "title": "Vendor Version",
            "type": "integer",
            "description": "Legacy version for the vendor owning the loot_id.  Use `vendor_etag` instead.",
            "format": "int64",
            "deprecated": true
          },
          "vendor_etag": {
            "title": "Vendor Etag",
            "type": "string",
            "description": "etag for the vendor owning the loot_id.  Will fail the fulfillment if they do not match"
          },
          "dynamic_bundle_loot_ids": {
            "title": "Dynamic Bundle Loot Ids",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "purchase_price": {
            "$ref": "#/components/schemas/PurchasePrice"
          },
          "external_tran_id": {
            "title": "External Tran Id",
            "type": "string",
            "description": "External Transaction Id for source of the acquisition or a promotion code to claim. Required for [PROMOTION_CODE] types"
          },
          "external_item_sku": {
            "title": "External Item Sku",
            "type": "string"
          },
          "use_inventory_bucket": {
            "$ref": "#/components/schemas/InventoryBucket"
          },
          "player_portal_event_id": {
            "title": "Player Portal Event Id",
            "type": "integer",
            "format": "int64"
          },
          "inventory_id": {
            "title": "Inventory Id",
            "type": "string",
            "description": "Unique Identifier for the Inventory",
            "format": "uuid"
          },
          "legacy_inventory_id": {
            "title": "Legacy Inventory Id",
            "type": "integer",
            "description": "Legacy Inventory Id. This is only used when type equals [UPDATE_EXISTING_PERSISTENT_INVENTORY, UPDATE_EXISTING_TRANSIENT_INVENTORY]",
            "format": "int64"
          },
          "item_id": {
            "title": "Item Id",
            "type": "integer",
            "description": "Item Id used create or update Inventory directly. This is only used when type equals [CREATE_NEW_PERSISTENT_INVENTORY, CREATE_NEW_TRANSIENT_INVENTORY]"
          },
          "expires": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom Data Attributes for the Inventory. This is only used when type equals [CREATE_NEW_PERSISTENT_INVENTORY, UPDATE_EXISTING_PERSISTENT_INVENTORY, CREATE_NEW_TRANSIENT_INVENTORY, UPDATE_EXISTING_TRANSIENT_INVENTORY, UPDATE_INVENTORY]"
          },
          "entry_id": {
            "title": "Entry Id",
            "type": "string"
          }
        }
      },
      "PlayerOrderEntryResult": {
        "title": "PlayerOrderEntryResult",
        "enum": [
          "success",
          "internal_error",
          "invalid_entry_type",
          "not_allowed_on_current_portal",
          "loot_not_found",
          "loot_not_active",
          "price_item_not_found",
          "price_not_allowed",
          "dynamic_bundle_invalid",
          "too_many_requests",
          "price_does_not_match",
          "vendor_version_does_not_match",
          "dynamic_bundle_ltis_do_not_match",
          "cannot_afford_price",
          "cannot_afford_coupon",
          "failed_to_spend_price",
          "failed_to_spend_coupon",
          "loot_not_for_sale_with_price_item",
          "coupons_disabled",
          "coupon_item_not_found",
          "coupon_item_not_active",
          "coupon_item_not_applicable_for_quantity",
          "coupon_item_not_applicable_for_price_item",
          "coupon_item_not_applicable_for_loot",
          "quantity_not_allowed",
          "promotion_expired",
          "promotion_not_found",
          "promotion_no_uses_left",
          "promotion_not_available",
          "promotion_claimed_already",
          "dynamic_bundles_not_available",
          "transient_single_loot_already_applied",
          "loot_not_fillable_from_client",
          "permission_denied",
          "failed_to_find_any_sub_loot",
          "failed_to_fill_any_sub_loot",
          "cannot_meet_loot_blocker",
          "cannot_meet_loot_required",
          "failed_to_consume_loot_required",
          "failed_to_submit_new_order",
          "failed_to_modify_inventory",
          "inventory_not_found",
          "item_not_found",
          "item_not_active",
          "too_many_inv_custom_attributes",
          "always_owned_inventory_cannot_be_modified",
          "available_until_is_in_past"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "SUCCESS",
          "INTERNAL_ERROR",
          "INVALID_ENTRY_TYPE",
          "NOT_ALLOWED_ON_CURRENT_PORTAL",
          "LOOT_NOT_FOUND",
          "LOOT_NOT_ACTIVE",
          "PRICE_ITEM_NOT_FOUND",
          "PRICE_NOT_ALLOWED",
          "DYNAMIC_BUNDLE_INVALID",
          "TOO_MANY_REQUESTS",
          "PRICE_DOES_NOT_MATCH",
          "VENDOR_VERSION_DOES_NOT_MATCH",
          "DYNAMIC_BUNDLE_LTIS_DO_NOT_MATCH",
          "CANNOT_AFFORD_PRICE",
          "CANNOT_AFFORD_COUPON",
          "FAILED_TO_SPEND_PRICE",
          "FAILED_TO_SPEND_COUPON",
          "LOOT_NOT_FOR_SALE_WITH_PRICE_ITEM",
          "COUPONS_DISABLED",
          "COUPON_ITEM_NOT_FOUND",
          "COUPON_ITEM_NOT_ACTIVE",
          "COUPON_ITEM_NOT_APPLICABLE_FOR_QUANTITY",
          "COUPON_ITEM_NOT_APPLICABLE_FOR_PRICE_ITEM",
          "COUPON_ITEM_NOT_APPLICABLE_FOR_LOOT",
          "QUANTITY_NOT_ALLOWED",
          "PROMOTION_EXPIRED",
          "PROMOTION_NOT_FOUND",
          "PROMOTION_NO_USES_LEFT",
          "PROMOTION_NOT_AVAILABLE",
          "PROMOTION_CLAIMED_ALREADY",
          "DYNAMIC_BUNDLES_NOT_AVAILABLE",
          "TRANSIENT_SINGLE_LOOT_ALREADY_APPLIED",
          "LOOT_NOT_FILLABLE_FROM_CLIENT",
          "PERMISSION_DENIED",
          "FAILED_TO_FIND_ANY_SUB_LOOT",
          "FAILED_TO_FILL_ANY_SUB_LOOT",
          "CANNOT_MEET_LOOT_BLOCKER",
          "CANNOT_MEET_LOOT_REQUIRED",
          "FAILED_TO_CONSUME_LOOT_REQUIRED",
          "FAILED_TO_SUBMIT_NEW_ORDER",
          "FAILED_TO_MODIFY_INVENTORY",
          "INVENTORY_NOT_FOUND",
          "ITEM_NOT_FOUND",
          "ITEM_NOT_ACTIVE",
          "TOO_MANY_INV_CUSTOM_ATTRIBUTES",
          "ALWAYS_OWNED_INVENTORY_CANNOT_BE_MODIFIED",
          "AVAILABLE_UNTIL_IS_IN_PAST"
        ]
      },
      "PlayerOrderEntryType": {
        "title": "PlayerOrderEntryType",
        "enum": [
          "fill_loot",
          "purchase_loot",
          "purchase_dynamic_bundle",
          "promotion_code",
          "fill_loot_single_transient",
          "fill_entitled_loot",
          "create_new_persistent_inventory",
          "update_existing_persistent_inventory",
          "create_new_transient_inventory",
          "update_existing_transient_inventory",
          "update_inventory"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "Fill a loot item.",
          "Purchase a loot item.",
          "Purchase a dynamic bundle.",
          "Claim a promotion code.",
          "Fill a transient loot item.",
          "Fill an loot entitlement.",
          "Create persistent Inventory.",
          "Deprecated. Use update_inventory instead.",
          "Create transient Inventory.",
          "Deprecated. Use update_inventory instead.",
          "Update existing Inventory."
        ],
        "x-enum-varnames": [
          "FILL_LOOT",
          "PURCHASE_LOOT",
          "PURCHASE_DYNAMIC_BUNDLE",
          "PROMOTION_CODE",
          "FILL_LOOT_SINGLE_TRANSIENT",
          "FILL_ENTITLED_LOOT",
          "CREATE_NEW_PERSISTENT_INVENTORY",
          "UPDATE_EXISTING_PERSISTENT_INVENTORY",
          "CREATE_NEW_TRANSIENT_INVENTORY",
          "UPDATE_EXISTING_TRANSIENT_INVENTORY",
          "UPDATE_INVENTORY"
        ]
      },
      "PlayerOrdersResponse": {
        "title": "PlayerOrdersResponse",
        "required": [
          "page"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerOrder"
            },
            "default": []
          },
          "page": {
            "$ref": "#/components/schemas/InventoryPageMeta"
          }
        }
      },
      "InventoryPortal": {
        "title": "Portal",
        "enum": [
          -2,
          -1,
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33
        ],
        "type": "integer",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "FREE",
          "SWEAT",
          "UNKNOWN",
          "STANDARD",
          "ANON",
          "KONGREGATE",
          "AMAZON",
          "STEAM",
          "TCLS",
          "LEVELUP_LATAM",
          "LEVELUP_BRA",
          "PSN",
          "XBOX_LIVE",
          "BASIC",
          "FACEBOOK",
          "GOOGLE",
          "UNUSED_14",
          "RIVALS_MOBILE",
          "TWITCH",
          "PALADINS_STRIKE",
          "SMITE_BLITZ",
          "FACEBOOK_SMITE",
          "FACEBOOK_PALADINS",
          "FACEBOOK_HOTG",
          "NINTENDO_SWITCH",
          "TUNE",
          "APPLE",
          "DISCORD",
          "NINTENDO",
          "UNUSED_27",
          "EPIC",
          "FORTE",
          "SIMULMEDIA",
          "LUNA",
          "GOOGLE_PLAY",
          "NINTENDO_PPID"
        ]
      },
      "PortalUseRuleset": {
        "title": "PortalUseRuleset",
        "type": "object",
        "properties": {
          "rules": {
            "title": "Rules",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InventoryPortal"
              }
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "PortalUseRulesets": {
        "title": "PortalUseRulesets",
        "type": "object",
        "properties": {
          "rulesets": {
            "title": "Rulesets",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PortalUseRuleset"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "PriceBreakpoint": {
        "title": "PriceBreakpoint",
        "required": [
          "price_item_id",
          "quantity",
          "price"
        ],
        "type": "object",
        "properties": {
          "price_item_id": {
            "title": "Price Item Id",
            "type": "integer"
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer"
          },
          "price": {
            "title": "Price",
            "type": "integer"
          }
        }
      },
      "PricePoint": {
        "title": "PricePoint",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "strict_flag": {
            "title": "Strict Flag",
            "type": "boolean",
            "default": false
          },
          "cap_flag": {
            "title": "Cap Flag",
            "type": "boolean",
            "default": false
          },
          "current_breakpoints": {
            "title": "Current Breakpoints",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceBreakpoint"
            },
            "default": []
          },
          "pre_sale_breakpoints": {
            "title": "Pre Sale Breakpoints",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceBreakpoint"
            },
            "default": []
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "PricePoints": {
        "title": "PricePoints",
        "type": "object",
        "properties": {
          "price_points": {
            "title": "Price Points",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PricePoint"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "PurchasePrice": {
        "title": "PurchasePrice",
        "required": [
          "price_item_id",
          "price"
        ],
        "type": "object",
        "properties": {
          "price_item_id": {
            "title": "Price Item Id",
            "type": "integer"
          },
          "price": {
            "title": "Price",
            "type": "integer"
          },
          "price_coupon_item_id": {
            "title": "Price Coupon Item Id",
            "type": "integer"
          }
        }
      },
      "QuantityType": {
        "title": "QuantityType",
        "enum": [
          "relative",
          "absolute"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "relative",
          "absolute"
        ]
      },
      "SortOrder": {
        "title": "SortOrder",
        "enum": [
          "asc",
          "desc"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "ASCENDING",
          "DESCENDING"
        ]
      },
      "Source": {
        "title": "Source",
        "enum": [
          "UNKNOWN",
          "WEB_ORDER_REPAIR",
          "IN_GAME",
          "WEB_SITE",
          "NO_SALE",
          "SUPPORT",
          "ACTIVITY",
          "REFUND",
          "SYSTEM",
          "REWARDS",
          "ESPORTS",
          "TREASURE",
          "CONSOLE",
          "ODYSSEY",
          "STEAM",
          "RETURN",
          "JSON_GATE",
          "SEND_GIFT",
          "RECEIVE_GIFT",
          "STEAM_DLC",
          "TWITCH_MILESTONE",
          "TWITCH_PRIME",
          "PSN",
          "XBOX",
          "PTS_GRANT",
          "INSTANCE",
          "ACCOUNT_TRANSFER",
          "PROMOCODE",
          "TRIUMPH_SYSTEM",
          "LOGIN_GRANT",
          "EOM_UNCAPPED",
          "EOM_CAPPED",
          "FACEBOOK_DROP",
          "DATABASE_SCRIPT",
          "ACCOUNT_LINKING",
          "CLAN",
          "CONVERSION",
          "APPLE",
          "GOOGLE",
          "GOOGLE_PLAY",
          "PORTAL_DURABLE",
          "PARTNER_ACHIEVEMENT",
          "MIXER_DROP",
          "NINTENDO",
          "STREAM_VIEWING_PROGRESS",
          "DISCORD",
          "FIRST_LOGIN_GRANT",
          "TWITCH_FUEL",
          "DISCORD_DLC",
          "NETEASE",
          "EPIC_GAMES",
          "FORTE",
          "FACEBOOK",
          "HIREZ",
          "DAILY_REWARD",
          "ADD_ACCOUNT_EMAIL_REWARD",
          "CLIENT_CLAIM",
          "CLIENT",
          "ENTITLEMENTS",
          "AMAZON",
          "SIMULMEDIA",
          "LUNA"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "UNKNOWN",
          "WEB_ORDER_REPAIR",
          "IN_GAME",
          "WEB_SITE",
          "NO_SALE",
          "SUPPORT",
          "ACTIVITY",
          "REFUND",
          "SYSTEM",
          "REWARDS",
          "ESPORTS",
          "TREASURE",
          "CONSOLE",
          "ODYSSEY",
          "STEAM",
          "RETURN",
          "JSON_GATE",
          "SEND_GIFT",
          "RECEIVE_GIFT",
          "STEAM_DLC",
          "TWITCH_MILESTONE",
          "TWITCH_PRIME",
          "PSN",
          "XBOX",
          "PTS_GRANT",
          "INSTANCE",
          "ACCOUNT_TRANSFER",
          "PROMOCODE",
          "TRIUMPH_SYSTEM",
          "LOGIN_GRANT",
          "EOM_UNCAPPED",
          "EOM_CAPPED",
          "FACEBOOK_DROP",
          "DATABASE_SCRIPT",
          "ACCOUNT_LINKING",
          "CLAN",
          "CONVERSION",
          "APPLE",
          "GOOGLE",
          "GOOGLE_PLAY",
          "PORTAL_DURABLE",
          "PARTNER_ACHIEVEMENT",
          "MIXER_DROP",
          "NINTENDO",
          "STREAM_VIEWING_PROGRESS",
          "DISCORD",
          "FIRST_LOGIN_GRANT",
          "TWITCH_FUEL",
          "DISCORD_DLC",
          "NETEASE",
          "EPIC_GAMES",
          "FORTE",
          "FACEBOOK",
          "HIREZ",
          "DAILY_REWARD",
          "ADD_ACCOUNT_EMAIL_REWARD",
          "CLIENT_CLAIM",
          "CLIENT",
          "ENTITLEMENTS",
          "AMAZON",
          "SIMULMEDIA",
          "LUNA"
        ]
      },
      "TimeFrame": {
        "title": "TimeFrame",
        "required": [
          "start",
          "end"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "active": {
            "title": "Active",
            "type": "boolean",
            "default": false
          },
          "episode": {
            "title": "Episode",
            "type": "integer",
            "default": 0
          },
          "episode_type": {
            "title": "Episode Type",
            "type": "integer",
            "default": 0
          },
          "hour_interval": {
            "title": "Hour Interval",
            "type": "integer",
            "description": "Number of hours that this time frame lasts until restarting.0 interval means no repeating.",
            "default": 0
          },
          "start": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "end": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "TimeFrames": {
        "title": "TimeFrames",
        "type": "object",
        "properties": {
          "time_frames": {
            "title": "Time Frames",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/TimeFrame"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "UpdateInventoryRequest": {
        "title": "UpdateInventoryRequest",
        "type": "object",
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Source"
              }
            ],
            "default": "CLIENT"
          },
          "client_order_ref_id": {
            "title": "Client Order Ref Id",
            "type": "string",
            "format": "uuid"
          },
          "bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "default": "none"
          },
          "count": {
            "title": "Count",
            "type": "integer",
            "default": 1
          },
          "expires": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "item_id": {
            "title": "Item Id",
            "type": "integer"
          }
        }
      },
      "UpdateInventoryRequestById": {
        "title": "UpdateInventoryRequestById",
        "required": [
          "inventory_id"
        ],
        "type": "object",
        "properties": {
          "bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "default": "none"
          },
          "count": {
            "title": "Count",
            "type": "integer",
            "default": 1
          },
          "expires": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "item_id": {
            "title": "Item Id",
            "type": "integer"
          },
          "inventory_id": {
            "title": "Inventory Id",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "UpdateInventoryRequests": {
        "title": "UpdateInventoryRequests",
        "required": [
          "inventory"
        ],
        "type": "object",
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Source"
              }
            ],
            "default": "CLIENT"
          },
          "client_order_ref_id": {
            "title": "Client Order Ref Id",
            "type": "string",
            "format": "uuid"
          },
          "inventory": {
            "title": "Inventory",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateInventoryRequestById"
            }
          }
        }
      },
      "Vendor": {
        "title": "Vendor",
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VendorType"
              }
            ],
            "default": "recipe"
          },
          "legacy_type": {
            "title": "Legacy Type",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "legacy_config_version": {
            "title": "Legacy Config Version",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "loot": {
            "title": "Loot",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Loot"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "VendorType": {
        "title": "VendorType",
        "enum": [
          "recipe",
          "randomly_sampled"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "recipe",
          "randomly_sampled"
        ]
      },
      "Vendors": {
        "title": "Vendors",
        "type": "object",
        "properties": {
          "vendors": {
            "title": "Vendors",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Vendor"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "XpQuantityTransform": {
        "title": "XpQuantityTransform",
        "enum": [
          "none",
          "from_current_xp_to_target_additional_level_min_xp",
          "from_current_level_min_xp_to_target_additional_level_min_xp",
          "from_zero_to_target_exact_level_min_xp"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "none",
          "from_current_xp_to_target_additional_level_min_xp",
          "from_current_level_min_xp_to_target_additional_level_min_xp",
          "from_zero_to_target_exact_level_min_xp"
        ]
      },
      "XpTable": {
        "title": "XpTable",
        "type": "object",
        "properties": {
          "xp_entries": {
            "title": "Xp Entries",
            "type": "object",
            "additionalProperties": {
              "minimum": 0,
              "type": "integer"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "XpTables": {
        "title": "XpTables",
        "type": "object",
        "properties": {
          "xp_tables": {
            "title": "Xp Tables",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/XpTable"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "ClientVisibleSettings": {
        "title": "ClientVisibleSettings",
        "type": "object",
        "properties": {
          "self_ping_interval_seconds": {
            "title": "Self Ping Interval Seconds",
            "type": "integer",
            "description": "How frequently the client should tell this service that it's online.",
            "default": 30
          },
          "last_seen_age_considered_offline_seconds": {
            "title": "Last Seen Age Considered Offline Seconds",
            "type": "integer",
            "description": "If a client hasn't said that it's online within this time period, it will be treated as offline when others query its presence.",
            "default": 60
          }
        }
      },
      "OnlineStatus": {
        "title": "OnlineStatus",
        "enum": [
          "online",
          "away",
          "invisible",
          "offline"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "Player is current online",
          "Player is current online, but away.  Functionally identical to online",
          "Player will appear offline to other players",
          "Player is offline"
        ],
        "x-enum-varnames": [
          "online",
          "away",
          "invisible",
          "offline"
        ]
      },
      "PlayerLastSeenUpdate": {
        "title": "PlayerLastSeenUpdate",
        "required": [
          "time"
        ],
        "type": "object",
        "properties": {
          "time": {
            "title": "Time",
            "type": "string",
            "description": "Last time this player reported their online status",
            "format": "date-time"
          },
          "platform": {
            "title": "Platform",
            "type": "string",
            "description": "Platform the user was online in"
          },
          "display_name": {
            "title": "Display Name",
            "type": "string",
            "description": "Player Display Name"
          }
        }
      },
      "PlayerPresence": {
        "title": "PlayerPresence",
        "required": [
          "platform",
          "display_name",
          "player_uuid"
        ],
        "type": "object",
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OnlineStatus"
              }
            ],
            "description": "Is the player currently online?",
            "default": "offline"
          },
          "message": {
            "title": "Message",
            "maxLength": 256,
            "type": "string",
            "description": "Optional custom message to display alongside the user's online status",
            "default": ""
          },
          "platform": {
            "title": "Platform",
            "type": "string",
            "description": "Platform the user was online in"
          },
          "display_name": {
            "title": "Display Name",
            "type": "string",
            "description": "Player Display Name"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "custom fields for the player to update about their presence",
            "default": {}
          },
          "player_id": {
            "title": "Player Id",
            "type": "integer",
            "description": "Player ID for the player if it was provided as part of the request"
          },
          "player_uuid": {
            "title": "Player Uuid",
            "type": "string",
            "description": "UUID of the player whose presence this represents",
            "format": "uuid"
          },
          "do_not_disturb": {
            "title": "Do Not Disturb",
            "type": "boolean",
            "description": "Disables notifications and invites. Only set for self or admin."
          },
          "last_seen": {
            "title": "Last Seen",
            "type": "string",
            "description": "Info about the player the last time they reported their status. Only set for self or admin",
            "format": "date-time"
          }
        }
      },
      "PlayerPresenceUpdateSelf": {
        "title": "PlayerPresenceUpdateSelf",
        "type": "object",
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OnlineStatus"
              }
            ],
            "description": "Is the player currently online?"
          },
          "message": {
            "title": "Message",
            "maxLength": 256,
            "type": "string",
            "description": "Optional custom message to display alongside the user's online status. Leaving this unset will not change the value."
          },
          "do_not_disturb": {
            "title": "Do Not Disturb",
            "type": "boolean",
            "description": "Disables notifications and invites. Leaving this unset will not change the value."
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "custom fields for the player to update about their presence. Custom data with a null value will be removed"
          }
        }
      },
      "Notification": {
        "title": "Notification",
        "required": [
          "message",
          "custom_data",
          "notification_id",
          "created"
        ],
        "type": "object",
        "properties": {
          "message": {
            "title": "Message",
            "maxLength": 4096,
            "type": "string",
            "description": "Base Message for the notification"
          },
          "rh_url": {
            "title": "Rh Url",
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "description": "Path to get additional data about this notification"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "Custom values for the notification"
          },
          "etag": {
            "title": "Etag",
            "minLength": 1,
            "type": "string",
            "description": "ETag for the resource at rh_url at the time of this notification"
          },
          "notification_id": {
            "title": "Notification Id",
            "type": "string",
            "description": "Unique Identifier for the notification.  You cannot depend on the format of this string, and it must be considered opaque"
          },
          "created": {
            "title": "Created",
            "type": "string",
            "description": "When this notification was added",
            "format": "date-time"
          }
        }
      },
      "NotificationCreate": {
        "title": "NotificationCreate",
        "required": [
          "message",
          "custom_data"
        ],
        "type": "object",
        "properties": {
          "message": {
            "title": "Message",
            "maxLength": 4096,
            "type": "string",
            "description": "Base Message for the notification"
          },
          "rh_url": {
            "title": "Rh Url",
            "maxLength": 4096,
            "minLength": 1,
            "type": "string",
            "description": "Path to get additional data about this notification"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "Custom values for the notification"
          },
          "etag": {
            "title": "Etag",
            "minLength": 1,
            "type": "string",
            "description": "ETag for the resource at rh_url at the time of this notification"
          }
        }
      },
      "NotificationCreateResult": {
        "title": "NotificationCreateResult",
        "required": [
          "notification_id"
        ],
        "type": "object",
        "properties": {
          "notification_id": {
            "title": "Notification Id",
            "type": "string",
            "description": "Unique Identifier for the last notification created.  You cannot depend on the format of this string, and it must be considered opaque"
          }
        }
      },
      "NotificationCreates": {
        "title": "NotificationCreates",
        "required": [
          "notifications"
        ],
        "type": "object",
        "properties": {
          "notifications": {
            "title": "Notifications",
            "maxItems": 100,
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationCreate"
            },
            "description": "List of notifications creation requests"
          }
        }
      },
      "Notifications": {
        "title": "Notifications",
        "type": "object",
        "properties": {
          "notifications": {
            "title": "Notifications",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            },
            "description": "List of notifications",
            "default": []
          }
        }
      },
      "OffsetReset": {
        "title": "OffsetReset",
        "enum": [
          "latest",
          "earliest"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "latest",
          "earliest"
        ],
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration."
        ]
      },
      "PlayerRankRequestResponse": {
        "title": "PlayerRankRequestResponse",
        "required": [
          "player_ranks"
        ],
        "type": "object",
        "properties": {
          "player_ranks": {
            "title": "Player Ranks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerRankResponse"
            },
            "description": "List of players ranks"
          }
        }
      },
      "PlayerRankResponse": {
        "title": "PlayerRankResponse",
        "required": [
          "player_uuid",
          "rank",
          "rank_id"
        ],
        "type": "object",
        "properties": {
          "player_uuid": {
            "title": "Player Uuid",
            "type": "string",
            "description": "UUID for this specific player",
            "format": "uuid"
          },
          "rank": {
            "title": "Rank",
            "allOf": [
              {
                "$ref": "#/components/schemas/RankData"
              }
            ],
            "description": "Current rank info about player"
          },
          "rank_id": {
            "title": "Rank Id",
            "exclusiveMinimum": 0,
            "type": "integer",
            "description": "ID for this rank"
          }
        }
      },
      "PlayerRankUpdateRequest": {
        "title": "PlayerRankUpdateRequest",
        "required": [
          "rank"
        ],
        "type": "object",
        "properties": {
          "instance_id": {
            "title": "Instance Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "ID for the instance the match took place on"
          },
          "rank": {
            "title": "Rank",
            "allOf": [
              {
                "$ref": "#/components/schemas/RankData"
              }
            ],
            "description": "Current rank info about player"
          }
        }
      },
      "PlayerRankUpdateResponse": {
        "title": "PlayerRankUpdateResponse",
        "required": [
          "updated_players"
        ],
        "type": "object",
        "properties": {
          "updated_players": {
            "title": "Updated Players",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerRankResponse"
            },
            "description": "List of players and their updated ranks"
          }
        }
      },
      "RankConfig": {
        "title": "RankConfig",
        "required": [
          "rank_id",
          "default_rank",
          "default_variance",
          "max_rank_allowed",
          "min_rank_allowed",
          "min_variance_allowed"
        ],
        "type": "object",
        "properties": {
          "rank_id": {
            "title": "Rank Id",
            "exclusiveMinimum": 0,
            "type": "integer",
            "description": "ID for this rank type"
          },
          "default_rank": {
            "title": "Default Rank",
            "type": "number",
            "description": "The default rank value for this rank id. Will be used when players do not have any rank history"
          },
          "default_variance": {
            "title": "Default Variance",
            "type": "number",
            "description": "The default skill variance for this rank id. Will be used when players do not have any rank history"
          },
          "max_rank_allowed": {
            "title": "Max Rank Allowed",
            "type": "number",
            "description": "The maximum rank value achievable. Any attempts to update a rank value to be higher than this get clamped to the maximum"
          },
          "min_rank_allowed": {
            "title": "Min Rank Allowed",
            "type": "number",
            "description": "The minimum rank value achievable. Any attempts to update a rank value to be lower than this get clamped to the minimum"
          },
          "min_variance_allowed": {
            "title": "Min Variance Allowed",
            "type": "number",
            "description": "The minimum skill variance allowed. Any attempts to update variance to be lower than this get clamped to the minimum"
          },
          "trueskill_beta": {
            "title": "Trueskill Beta",
            "type": "number",
            "description": "The distance between skill ranks that yields ~76% chance of winning. Recommended value is half the default variance"
          },
          "trueskill_tau": {
            "title": "Trueskill Tau",
            "type": "number",
            "description": "Factor that determines how quickly a player's variance is adjusted. A larger tau will result in more volatile in ranks. Recommended value is is (default_variance * .01)"
          },
          "trueskill_draw_probability": {
            "title": "Trueskill Draw Probability",
            "exclusiveMaximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "The percent probability of a draw occuring in the game. Must be in [0, 1)"
          }
        }
      },
      "RankConfigRequestResponse": {
        "title": "RankConfigRequestResponse",
        "required": [
          "rank_configs"
        ],
        "type": "object",
        "properties": {
          "rank_configs": {
            "title": "Rank Configs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RankConfig"
            },
            "description": "List of rank configurations"
          }
        }
      },
      "RankData": {
        "title": "RankData",
        "required": [
          "mu",
          "sigma"
        ],
        "type": "object",
        "properties": {
          "mu": {
            "title": "Mu",
            "type": "number",
            "description": "Trueskill mu. This is a measure of perceived skill in a player"
          },
          "sigma": {
            "title": "Sigma",
            "type": "number",
            "description": "Trueskill sigma. This is a measure of how unconfident we are in the perceived skill (high sigma means less confident)"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "maxLength": 4096,
              "minLength": 1,
              "type": "string"
            },
            "description": "Custom key-value player rank data",
            "default": {}
          }
        }
      },
      "TrueskillRank": {
        "title": "TrueskillRank",
        "required": [
          "player_uuid",
          "rank",
          "seconds_in_match"
        ],
        "type": "object",
        "properties": {
          "player_uuid": {
            "title": "Player Uuid",
            "type": "string",
            "description": "UUID for this specific player",
            "format": "uuid"
          },
          "rank": {
            "title": "Rank",
            "allOf": [
              {
                "$ref": "#/components/schemas/RankData"
              }
            ],
            "description": "Current rank info about player"
          },
          "seconds_in_match": {
            "title": "Seconds In Match",
            "minimum": 0,
            "type": "integer",
            "description": "How many seconds this player was in the match"
          }
        }
      },
      "TrueskillTeam": {
        "title": "TrueskillTeam",
        "required": [
          "players",
          "team_rank"
        ],
        "type": "object",
        "properties": {
          "players": {
            "title": "Players",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrueskillRank"
            },
            "description": "List of PlayerRankUpdate objects that give stats about a specific player from the match"
          },
          "team_rank": {
            "title": "Team Rank",
            "minimum": 1,
            "type": "integer",
            "description": "What rank this team came in. 1 indicates victory, and higher values are placements. Matching ranks indicate draws"
          }
        }
      },
      "TrueskillUpdateRequest": {
        "title": "TrueskillUpdateRequest",
        "required": [
          "rank_id",
          "match_length_seconds",
          "teams"
        ],
        "type": "object",
        "properties": {
          "instance_id": {
            "title": "Instance Id",
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "ID for the instance the match took place on"
          },
          "rank_id": {
            "title": "Rank Id",
            "exclusiveMinimum": 0,
            "type": "integer",
            "description": "ID for the rank type used in this match"
          },
          "match_length_seconds": {
            "title": "Match Length Seconds",
            "minimum": 0,
            "type": "integer",
            "description": "How many seconds the match lasted"
          },
          "teams": {
            "title": "Teams",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrueskillTeam"
            },
            "description": "List of teams that participated in this match"
          }
        }
      },
      "AppSetting": {
        "title": "AppSetting",
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "type": "string"
          },
          "value": {
            "title": "Value",
            "type": "string"
          }
        }
      },
      "DiscoveryResponse": {
        "title": "DiscoveryResponse",
        "required": [
          "addresses"
        ],
        "type": "object",
        "properties": {
          "addresses": {
            "title": "Addresses",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "server_status": {
            "title": "Server Status",
            "type": "string",
            "default": "unknown"
          },
          "command_line_args": {
            "title": "Command Line Args",
            "type": "string",
            "default": " "
          }
        }
      },
      "SiteSettings": {
        "title": "SiteSettings",
        "required": [
          "site_id",
          "sort_order",
          "custom_only"
        ],
        "type": "object",
        "properties": {
          "site_id": {
            "title": "Site Id",
            "type": "integer",
            "description": "The site ID"
          },
          "sort_order": {
            "title": "Sort Order",
            "type": "integer",
            "description": "The priority order of this site"
          },
          "custom_only": {
            "title": "Custom Only",
            "type": "boolean",
            "description": "Indicates if the site is a custom games only"
          },
          "message_name": {
            "title": "Message Name",
            "type": "string",
            "description": "The message associated with this site"
          }
        }
      }
    }
  }
}