{
  "openapi": "3.1.0",
  "info": {
    "title": "users-api",
    "description": "Provides support for authentication and the creation of access and refresh tokens.  Also provides access to user information.\n\nAccess tokens are short-lived tokens for use against other Hi-Rez Studios APIs for the same base url.\nRefresh tokens are longer-lived tokens for re-authenticating and creating new Access Tokens.\n",
    "version": "5.3.0"
  },
  "servers": [
    {
      "url": "/users"
    }
  ],
  "paths": {
    "/v1/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login",
        "description": "This endpoint is used to authenticate a user and retrieve an access token for use with other RallyHere APIs.\n    \nThis endpoint supports user-based authentication for a variety of platforms.",
        "operationId": "login",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "User-Agent"
            },
            "name": "user-agent",
            "in": "header"
          },
          {
            "description": "IP Address hint",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 32,
              "title": "X-Rh-Client-Addr",
              "description": "IP Address hint"
            },
            "name": "x-rh-client-addr",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResult"
                }
              }
            }
          },
          "403": {
            "description": "User authentication failed.  See error code and description for further details.\n\nError Codes:\n- `internal_error` - An internal error occurred.  The request may succeed if retried.  If not, contact an administrator.\n- `no_redirects_configured` - No redirect urls setup for oauth.\n- `redirect_uri_does_not_match` - Redirect URI does not match a configured value.\n- `error_occurred_during_exchange` - An error occurred while exchanging a code for token.\n- `failed_to_verify_state` - Failed to verify the state associated with the request.\n- `failed_to_save_state` - Error occurred saving the state.\n- `failed_to_save_tokens` - Problem saving tokens.  Contact an administrator\n- `too_many_users` - Account has too many users associated with it.  Contact an administrator\n- `user_auth_restricted` - Authentication for this user has been restricted\n- `user_needs_agreements` - User has not accepted all required agreements.  See response for list of agreements required\n- `error_retrieving_player_results` - Error retrieving player results\n- `failed_to_retrieve_roles` - Failed to retrieve roles\n- `client_credentials_invalid` - Client Credentials provided to authentication attempt were invalid\n- `authentication_limited` - Authentication is currently limited to accounts that are already logged in.  Please try again later\n- `authentication_locked` - Authentication is currently locked.  Please try again later\n- `invalid_grant_type` - Grant Type {grant_type} is not supported\n- `user_auth_disabled` - User authentication is not permitted for this policy\n- `client_auth_disabled` - Client authentication is not permitted for this policy\n- `amazon_disabled` - Amazon authentication is currently disabled\n- `amazon_token_empty` - Amazon access token is empty\n- `amazon_invalid_access_token` - Amazon access token is invalid\n- `amazon_token_exchange_failed` - Problem exchanging code for token with Amazon\n- `anon_disabled` - Anon authentication is currently disabled\n- `anon_token_empty` - Anon access token is empty\n- `apple_disabled` - Apple authentication is currently disabled\n- `apple_token_empty` - Apple access token is empty\n- `apple_failed_key_lookup` - Failed to retrieve keys from Apple\n- `apple_token_exchange_failed` - Problem exchanging code for token with Apple\n- `apple_token_key_not_valid` - public key not found\n- `apple_token_not_valid` - Apple access token is not valid\n- `authorization_code_not_found` - Authorization code not found or expired\n- `basic_disabled` - Basic authentication is currently disabled\n- `basic_token_empty` - Basic access token is empty\n- `basic_auth_incorrect_format` - Basic auth should be formatted like `USERNAME:PASSWORD`\n- `basic_auth_credentials_not_found` - Basic auth credentials not found\n- `developer_api_disabled` - Developer API authentication is currently disabled\n- `developer_api_token_empty` - Developer API access token is empty\n- `developer_api_token_invalid` - Developer API access token is invalid or expired\n- `epic_disabled` - Epic authentication is currently disabled\n- `epic_token_empty` - Epic access token is empty\n- `epic_v1_token_key_id_invalid` - Epic v1 token contains an invalid key id\n- `epic_v1_token_invalid` - Epic v1 token is invalid\n- `epic_v2_keys_not_available` - Epic v2 keys are not available.  Please contact an administrator\n- `epic_v2_token_invalid` - Epic v2 token is invalid\n- `epic_oauth_token_exchange_failed` - Problem exchanging code for token with Epic\n- `google_disabled` - Google authentication is currently disabled\n- `google_token_empty` - Google access token is empty\n- `google_keys_not_available` - Google keys are not available.  Please contact an administrator\n- `google_token_not_valid` - Google access token is not valid\n- `google_token_exchange_failed` - Problem exchanging code for token with Google\n- `nintendo_disabled` - Nintendo authentication is currently disabled\n- `nintendo_token_empty` - Nintendo access token is empty\n- `nintendo_env_credentials_not_found` - Nintendo environment credentials not found\n- `nintendo_access_token_not_valid` - Nintendo access token is not valid\n- `nintendo_no_environment_matches_env_id` - Nintendo environment not found for given environment ID\n- `nintendo_retrieve_client_credentials_failed` - Problem retrieving client credentials from Nintendo.  This commonly occurs while converting between NAID and PPID.\n- `nintendo_ppid_conversion_failed` - error during PPID conversion\n- `nintendo_ppid_conversion_too_many_accounts_found` - too many accounts found during PPID conversion\n- `nintendo_ppid_conversion_no_accounts_found` - no accounts found during PPID conversion\n- `nintendo_ppid_missing` - PPID is missing for user\n- `nintendo_ppid_key_not_valid` - Nintendo access token key is not valid\n- `nintendo_service_key_url_not_found` - Nintendo service key url not found.  This usually indicates that the corresponding Nintendo environment has a mismatch between Nintendo account URL and Nintendo Service Account URL.\n- `nintendo_service_access_token_not_valid` - Nintendo service access token is not valid\n- `nintendo_service_access_token_for_wrong_app` - Nintendo service access token is for the wrong app\n- `nintendo_oauth_env_not_found` - Nintendo oauth environment not found.  Check that the environment is configured correctly.\n- `nintendo_token_exchange_failed` - Problem exchanging code for token with Nintendo\n- `ps4_v1_disabled` - PS4 v1 authentication is currently disabled\n- `ps4_v1_token_empty` - PS4 v1 access token is empty\n- `ps4_v1_token_expired` - PS4 v1 access token is expired\n- `ps4_v1_token_exchange_failed` - Problem exchanging code for token with PS4\n- `ps4_v1_id_token_request_failed` - Problem requesting id token from PS4\n- `ps4_v1_id_token_not_valid` - PS4 v1 id token is not valid\n- `ps4_v1_token_details_disabled` - PS4 v1 token details are disabled\n- `ps4_v1_token_details_request_failed` - Problem requesting token details from PS4\n- `ps4_v3_disabled` - PS4 v3 authentication is currently disabled\n- `ps4_v3_token_details_disabled` - PS4 v3 token details are disabled\n- `ps4_v3_token_empty` - PS4 v3 access token is empty\n- `ps4_v3_id_token_request_failed` - Problem requesting id token from PS4\n- `ps4_v3_id_token_not_valid` - PS4 v3 id token is not valid\n- `ps5_v3_disabled` - PS5 v3 authentication is currently disabled\n- `ps5_v3_token_details_disabled` - PS5 v3 token details are disabled\n- `ps5_v3_token_empty` - PS5 v3 access token is empty\n- `ps5_v3_id_token_request_failed` - Problem requesting id token from PS5\n- `ps5_v3_id_token_not_valid` - PS5 v3 id token is not valid\n- `psn_environment_permission_denied` - PSN Environment permission was denied.  This usually means that the Client ID/Secret do not match.  This error can also occur for `sp-int` or `prod-qa` if the environment is not whitelisted to access the PSN environment.\n- `refresh_disabled` - Refresh authentication is currently disabled\n- `refresh_token_empty` - Refresh token is empty\n- `refresh_token_not_found` - Refresh token was not found or has expired\n- `refresh_token_invalid_user` - Refresh token refrences invalid user\n- `refresh_token_client_id_mismatch` - Client ID for new token request did not match original token\n- `steam_disabled` - Steam authentication is currently disabled\n- `steam_token_empty` - Steam code (Ticket) is empty\n- `steam_token_exchange_failed` - Problem exchanging code (ticket) for token with Steam\n- `steam_user_vacbanned` - User is VAC banned\n- `steam_user_publisherbanned` - User is publisher banned\n- `steam_user_offline` - User is reporting offline to Steam, causing all Steam tickets to invalidate\n- `steam_token_invalid` - Steam code (Ticket) was reported as invalid by Steam\n- `steam_token_for_wrong_app` - Steam code (Ticket) is for a different Steam Application\n- `twitch_disabled` - Twitch authentication is currently disabled\n- `twitch_token_empty` - Twitch access token is empty\n- `twitch_token_invalid` - Twitch access token is not valid\n- `twitch_keys_not_available` - Twitch keys are not available.  Please contact an administrator\n- `twitch_token_exchange_failed` - Problem exchanging code for token with Twitch\n- `xbox_disabled` - Xbox authentication is currently disabled\n- `xbox_xsts_token_empty` - Xbox XSTS token is empty\n- `xbox_xsts_token_invalid` - Xbox XSTS token is not valid\n- `xbox_xtoken_invalid` - Xbox XToken is not valid\n- `xbox_access_token_request_failed` - Problem requesting access token from Xbox\n- `xbox_xsts_token_exchange_failed` - Problem exchanging access token for XSTS token with Xbox\n- `xbox_xtoken_exchange_failed` - Problem exchanging XSTS token for XToken with Xbox\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgreementMessage"
                }
              }
            }
          },
          "503": {
            "description": "The service is currently unavailable.  Please try again later.",
            "headers": {
              "Retry-After": {
                "description": "indicates how long the user agent should wait before making a follow-up request",
                "schema": {
                  "type": "int"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/v1/portaltoken/details": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Get Portal Token Details",
        "description": "Platform-specific token details.  Return data that the platform allows for their tokens.",
        "operationId": "get_portal_token_details",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortalTokenDetailsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Get Portal Token Details"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `internal_error` - An internal error occurred.  The request may succeed if retried.  If not, contact an administrator.\n- `no_redirects_configured` - No redirect urls setup for oauth.\n- `redirect_uri_does_not_match` - Redirect URI does not match a configured value.\n- `error_occurred_during_exchange` - An error occurred while exchanging a code for token.\n- `failed_to_verify_state` - Failed to verify the state associated with the request.\n- `failed_to_save_state` - Error occurred saving the state.\n- `failed_to_save_tokens` - Problem saving tokens.  Contact an administrator\n- `too_many_users` - Account has too many users associated with it.  Contact an administrator\n- `user_auth_restricted` - Authentication for this user has been restricted\n- `user_needs_agreements` - User has not accepted all required agreements.  See response for list of agreements required\n- `error_retrieving_player_results` - Error retrieving player results\n- `failed_to_retrieve_roles` - Failed to retrieve roles\n- `client_credentials_invalid` - Client Credentials provided to authentication attempt were invalid\n- `authentication_limited` - Authentication is currently limited to accounts that are already logged in.  Please try again later\n- `authentication_locked` - Authentication is currently locked.  Please try again later\n- `invalid_grant_type` - Grant Type {grant_type} is not supported\n- `user_auth_disabled` - User authentication is not permitted for this policy\n- `client_auth_disabled` - Client authentication is not permitted for this policy\n- `amazon_disabled` - Amazon authentication is currently disabled\n- `amazon_token_empty` - Amazon access token is empty\n- `amazon_invalid_access_token` - Amazon access token is invalid\n- `amazon_token_exchange_failed` - Problem exchanging code for token with Amazon\n- `anon_disabled` - Anon authentication is currently disabled\n- `anon_token_empty` - Anon access token is empty\n- `apple_disabled` - Apple authentication is currently disabled\n- `apple_token_empty` - Apple access token is empty\n- `apple_failed_key_lookup` - Failed to retrieve keys from Apple\n- `apple_token_exchange_failed` - Problem exchanging code for token with Apple\n- `apple_token_key_not_valid` - public key not found\n- `apple_token_not_valid` - Apple access token is not valid\n- `authorization_code_not_found` - Authorization code not found or expired\n- `basic_disabled` - Basic authentication is currently disabled\n- `basic_token_empty` - Basic access token is empty\n- `basic_auth_incorrect_format` - Basic auth should be formatted like `USERNAME:PASSWORD`\n- `basic_auth_credentials_not_found` - Basic auth credentials not found\n- `developer_api_disabled` - Developer API authentication is currently disabled\n- `developer_api_token_empty` - Developer API access token is empty\n- `developer_api_token_invalid` - Developer API access token is invalid or expired\n- `epic_disabled` - Epic authentication is currently disabled\n- `epic_token_empty` - Epic access token is empty\n- `epic_v1_token_key_id_invalid` - Epic v1 token contains an invalid key id\n- `epic_v1_token_invalid` - Epic v1 token is invalid\n- `epic_v2_keys_not_available` - Epic v2 keys are not available.  Please contact an administrator\n- `epic_v2_token_invalid` - Epic v2 token is invalid\n- `epic_oauth_token_exchange_failed` - Problem exchanging code for token with Epic\n- `google_disabled` - Google authentication is currently disabled\n- `google_token_empty` - Google access token is empty\n- `google_keys_not_available` - Google keys are not available.  Please contact an administrator\n- `google_token_not_valid` - Google access token is not valid\n- `google_token_exchange_failed` - Problem exchanging code for token with Google\n- `nintendo_disabled` - Nintendo authentication is currently disabled\n- `nintendo_token_empty` - Nintendo access token is empty\n- `nintendo_env_credentials_not_found` - Nintendo environment credentials not found\n- `nintendo_access_token_not_valid` - Nintendo access token is not valid\n- `nintendo_no_environment_matches_env_id` - Nintendo environment not found for given environment ID\n- `nintendo_retrieve_client_credentials_failed` - Problem retrieving client credentials from Nintendo.  This commonly occurs while converting between NAID and PPID.\n- `nintendo_ppid_conversion_failed` - error during PPID conversion\n- `nintendo_ppid_conversion_too_many_accounts_found` - too many accounts found during PPID conversion\n- `nintendo_ppid_conversion_no_accounts_found` - no accounts found during PPID conversion\n- `nintendo_ppid_missing` - PPID is missing for user\n- `nintendo_ppid_key_not_valid` - Nintendo access token key is not valid\n- `nintendo_service_key_url_not_found` - Nintendo service key url not found.  This usually indicates that the corresponding Nintendo environment has a mismatch between Nintendo account URL and Nintendo Service Account URL.\n- `nintendo_service_access_token_not_valid` - Nintendo service access token is not valid\n- `nintendo_service_access_token_for_wrong_app` - Nintendo service access token is for the wrong app\n- `nintendo_oauth_env_not_found` - Nintendo oauth environment not found.  Check that the environment is configured correctly.\n- `nintendo_token_exchange_failed` - Problem exchanging code for token with Nintendo\n- `ps4_v1_disabled` - PS4 v1 authentication is currently disabled\n- `ps4_v1_token_empty` - PS4 v1 access token is empty\n- `ps4_v1_token_expired` - PS4 v1 access token is expired\n- `ps4_v1_token_exchange_failed` - Problem exchanging code for token with PS4\n- `ps4_v1_id_token_request_failed` - Problem requesting id token from PS4\n- `ps4_v1_id_token_not_valid` - PS4 v1 id token is not valid\n- `ps4_v1_token_details_disabled` - PS4 v1 token details are disabled\n- `ps4_v1_token_details_request_failed` - Problem requesting token details from PS4\n- `ps4_v3_disabled` - PS4 v3 authentication is currently disabled\n- `ps4_v3_token_details_disabled` - PS4 v3 token details are disabled\n- `ps4_v3_token_empty` - PS4 v3 access token is empty\n- `ps4_v3_id_token_request_failed` - Problem requesting id token from PS4\n- `ps4_v3_id_token_not_valid` - PS4 v3 id token is not valid\n- `ps5_v3_disabled` - PS5 v3 authentication is currently disabled\n- `ps5_v3_token_details_disabled` - PS5 v3 token details are disabled\n- `ps5_v3_token_empty` - PS5 v3 access token is empty\n- `ps5_v3_id_token_request_failed` - Problem requesting id token from PS5\n- `ps5_v3_id_token_not_valid` - PS5 v3 id token is not valid\n- `psn_environment_permission_denied` - PSN Environment permission was denied.  This usually means that the Client ID/Secret do not match.  This error can also occur for `sp-int` or `prod-qa` if the environment is not whitelisted to access the PSN environment.\n- `refresh_disabled` - Refresh authentication is currently disabled\n- `refresh_token_empty` - Refresh token is empty\n- `refresh_token_not_found` - Refresh token was not found or has expired\n- `refresh_token_invalid_user` - Refresh token refrences invalid user\n- `refresh_token_client_id_mismatch` - Client ID for new token request did not match original token\n- `steam_disabled` - Steam authentication is currently disabled\n- `steam_token_empty` - Steam code (Ticket) is empty\n- `steam_token_exchange_failed` - Problem exchanging code (ticket) for token with Steam\n- `steam_user_vacbanned` - User is VAC banned\n- `steam_user_publisherbanned` - User is publisher banned\n- `steam_user_offline` - User is reporting offline to Steam, causing all Steam tickets to invalidate\n- `steam_token_invalid` - Steam code (Ticket) was reported as invalid by Steam\n- `steam_token_for_wrong_app` - Steam code (Ticket) is for a different Steam Application\n- `twitch_disabled` - Twitch authentication is currently disabled\n- `twitch_token_empty` - Twitch access token is empty\n- `twitch_token_invalid` - Twitch access token is not valid\n- `twitch_keys_not_available` - Twitch keys are not available.  Please contact an administrator\n- `twitch_token_exchange_failed` - Problem exchanging code for token with Twitch\n- `xbox_disabled` - Xbox authentication is currently disabled\n- `xbox_xsts_token_empty` - Xbox XSTS token is empty\n- `xbox_xsts_token_invalid` - Xbox XSTS token is not valid\n- `xbox_xtoken_invalid` - Xbox XToken is not valid\n- `xbox_access_token_request_failed` - Problem requesting access token from Xbox\n- `xbox_xsts_token_exchange_failed` - Problem exchanging access token for XSTS token with Xbox\n- `xbox_xtoken_exchange_failed` - Problem exchanging XSTS token for XToken with Xbox\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout",
        "description": "Log out a refresh token",
        "operationId": "logout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/verify": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Verify",
        "description": "Verify if an access token is still valid",
        "operationId": "verify",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/publickeys": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get All Public Keys",
        "description": "Get all current public keys for this auth provider",
        "operationId": "get_all_public_keys",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicKeyList"
                }
              }
            }
          }
        }
      }
    },
    "/v1/publickeys/{key_id}": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get Public Key By Id",
        "description": "Get a current public key by `key_id` for this auth provider.",
        "operationId": "get_public_key_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Key Id"
            },
            "name": "key_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicKey"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/player/me/uuid": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Player Uuid From Player Id For Self",
        "description": "Get a player's uuid from their id for the active player on the access token.",
        "operationId": "get_player_uuid_from_player_id_for_self",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid",
                  "title": "Response Get Player Uuid From Player Id For Self"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_id}/uuid": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Player Uuid From Player Id",
        "description": "Get a player's uuid from their id.",
        "operationId": "get_player_uuid_from_player_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Player Id"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid",
                  "title": "Response Get Player Uuid From Player Id"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/uuid": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Player Uuid From Player Id For Self V2",
        "description": "Get a player's uuid from their id for the active player on the access token.",
        "operationId": "get_player_uuid_from_player_id_for_self_v2",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerUuidFromId"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_id}/uuid": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Player Uuid From Player Id V2",
        "description": "Get a player's uuid from their id.",
        "operationId": "get_player_uuid_from_player_id_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Player Id"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerUuidFromId"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/id": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Player Id From Player Uuid For Self",
        "description": "Get a player's id from their uuid for the active player on the access token.",
        "operationId": "get_player_id_from_player_uuid_for_self",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerIdWrapper"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/id": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Player Id From Player Uuid",
        "description": "Get a player's id from their uuid.",
        "operationId": "get_player_id_from_player_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerIdWrapper"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/links": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Player Links For Self",
        "description": "Get a player's linked portals for the active player on the access token.",
        "operationId": "get_player_links_for_self",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerLinkedPortalsResponse"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/links": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Player Links",
        "description": "Get a player's linked portals.",
        "operationId": "get_player_links",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerLinkedPortalsResponse"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_id}/linked_portals": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Player Linked Portals",
        "description": "**DEPRECATED** Please use `/v2/player/{player_uuid}/links` instead. Get a player's linked portals.",
        "operationId": "get_player_linked_portals",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Player Id"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerLinkedPortalsResponse"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/platform-user": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Find Platform User By Id",
        "description": "Find an existing platform user with their platform identity.\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `user:*`, `user:platform:read`",
        "operationId": "find_platform_user_by_id",
        "parameters": [
          {
            "description": "Platform to search",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Platform"
                }
              ],
              "description": "Platform to search"
            },
            "name": "platform",
            "in": "query"
          },
          {
            "description": "Platform user ID to search for",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 2048,
              "title": "Platform User Id",
              "description": "Platform user ID to search for"
            },
            "name": "platform_user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Platform user was found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformUserResponse"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Failed to find platform user.  See error code and description for further details.\n\n\nError Codes:\n- `user_not_found` - User not found\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update Platform User By Id",
        "description": "Update or create a platform user from a platform identity.\n\nWARNING: This endpoint does not validate that the provided user ID is valid, and should only be used after validating a user's identity.\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `user:*`, `user:platform:create`",
        "operationId": "update_platform_user_by_id",
        "parameters": [
          {
            "description": "Platform to search",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Platform"
                }
              ],
              "description": "Platform to search"
            },
            "name": "platform",
            "in": "query"
          },
          {
            "description": "Platform user ID to search for or create",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 2048,
              "title": "Platform User Id",
              "description": "Platform user ID to search for or create"
            },
            "name": "platform_user_id",
            "in": "query"
          },
          {
            "description": "Display name for the platform user",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 256,
              "title": "Display Name",
              "description": "Display name for the platform user"
            },
            "name": "display_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Existing platform user was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformUserResponse"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "201": {
            "description": "New platform user was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformUserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create Platform User By Id",
        "description": "Create a new platform user from a platform identity.\n\nWARNING: This endpoint does not validate that the provided user ID is valid, and should only be used after validating a user's identity.\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `user:*`, `user:platform:create`",
        "operationId": "create_platform_user_by_id",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlatformUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Platform user was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformUserResponse"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Failed to create platform user.  See error code and description for further details.\n\n\nError Codes:\n- `user_already_exists` - User already exists\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Lookup Player By Portal",
        "description": "Lookup players by various parameters.  Note that this does NOT find the active player, or other metadata about the resulting players.  It is suggested to call `/v1/player/{player_id}/linked_portals` for each player for that info, if necessary.",
        "operationId": "lookup_player_by_portal",
        "parameters": [
          {
            "description": "Lookup players by display names",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "maxLength": 256
              },
              "type": "array",
              "title": "Display Name",
              "description": "Lookup players by display names",
              "default": []
            },
            "name": "display_name",
            "in": "query"
          },
          {
            "description": "Lookup players by their portal identity for this platform",
            "required": false,
            "deprecated": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/fastapicommon__platforms__Portal"
                }
              ],
              "description": "Lookup players by their portal identity for this platform"
            },
            "name": "identity_platform",
            "in": "query"
          },
          {
            "description": "Lookup players by their platform identity. Will override identity_platform if set.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Platform"
                }
              ],
              "description": "Lookup players by their platform identity. Will override identity_platform if set."
            },
            "name": "platform",
            "in": "query"
          },
          {
            "description": "Lookup players by their Portal Identity",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "maxLength": 2048
              },
              "type": "array",
              "title": "Identities",
              "description": "Lookup players by their Portal Identity",
              "default": []
            },
            "name": "identities",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupResults"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player:iterate": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Players Paged",
        "description": "Iterate over all players.  This is a paginated API, so you will need to call it multiple times to get all players.\nThere is no guaranteed ordering of players.  So if you need to run multiple iterations for comparison, you will need to sort the results.\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `user:*`, `user:player:iterate`",
        "operationId": "get_players_paged",
        "parameters": [
          {
            "description": "cursor to continue iteration.  Leaving this empty will begin a new query",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4096,
              "title": "Cursor",
              "description": "cursor to continue iteration.  Leaving this empty will begin a new query",
              "default": ""
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "number of players to return",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "title": "Page Size",
              "description": "number of players to return",
              "default": 100
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerIterateResponse"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/person/me/info": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Person For Self",
        "description": "Get information for the person on the access token.",
        "operationId": "get_person_for_self",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonInfoResponse"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Update Person For Self",
        "description": "Update information for the person on the access token.",
        "operationId": "update_person_for_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePersonInfoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/person/{person_id}/info": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Person",
        "description": "Get information for a person.",
        "operationId": "get_person",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Person Id"
            },
            "name": "person_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonInfoResponse"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Update Person",
        "description": "Update the information for a person.",
        "operationId": "update_person",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Person Id"
            },
            "name": "person_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePersonInfoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/person/me/email/list": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Person Email List For Self",
        "description": "Get the email list ids for a person on the access token",
        "operationId": "get_person_email_list_for_self",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonEmailListResponse"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Update Person Email List For Self",
        "description": "Update the email list for person on the access token.  This is used to control which emails a person receives.",
        "operationId": "update_person_email_list_for_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonEmailListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/person/{person_id}/email/list": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Person Email List",
        "description": "Get the email list ids for a person",
        "operationId": "get_person_email_list",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Person Id"
            },
            "name": "person_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonEmailListResponse"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Update Person Email List",
        "description": "Update the email list for a person.  This is used to control which emails a person receives.",
        "operationId": "update_person_email_list",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Person Id"
            },
            "name": "person_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonEmailListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/person/me/purge": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Queue Purge Status For Me",
        "description": "Get the purge status for a person of the access token.",
        "operationId": "get_queue_purge_status_for_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurgeResponse"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Queue Me For Purge",
        "description": "Queue person on the access token for purging. This can occur up to a configured amount of time in the future or can occur immediately depending on `suggested_purge_time`.",
        "operationId": "queue_me_for_purge",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurgeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurgeResponse"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Dequeue Me For Purge",
        "description": "Dequeue the active person of the access token if they are queued to be purged. This will only work if the purge has not already begun.",
        "operationId": "dequeue_me_for_purge",
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/person/{person_id}/purge": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Queue Purge Status For Person",
        "description": "Get the purge status for a person. \n    \nRequired Permissions:\n\n- For any person (including themselves) any of: `purge:*:*`, `purge:person:admin`",
        "operationId": "get_queue_purge_status_for_person",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Person Id"
            },
            "name": "person_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurgeResponse"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Queue Person For Purge",
        "description": "Queue a person for purging. This can occur up to a configured amount of time in the future or can occur immediately depending on `suggested_purge_time`.\n\nRequired Permissions:\n\n- For any person (including themselves) any of: `purge:*:*`, `purge:person:admin`",
        "operationId": "queue_person_for_purge",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Person Id"
            },
            "name": "person_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurgeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurgeResponse"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Dequeue Person For Purge",
        "description": "Dequeue a Person that is queued to be purged. This will only work if the purge has not already begun. \n    \nRequired Permissions:\n\n- For any person (including themselves) any of: `purge:*:*`, `purge:person:admin`",
        "operationId": "dequeue_person_for_purge",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Person Id"
            },
            "name": "person_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/person/me/restrictions": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Person Restrictions For Self",
        "description": "Get Restrictions for your person.  These same restrictions apply to all players associated with the person",
        "operationId": "get_person_restrictions_for_self",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restrictions"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `user_not_found` - User not found\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/person/{person_id}/restrictions": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Person Restrictions",
        "description": "Get Restrictions for a person.  These same restrictions apply to all players associated with the person",
        "operationId": "get_person_restrictions",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Person Id"
            },
            "name": "person_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restrictions"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add Person Restrictions",
        "description": "Add a new restriction to an existing person",
        "operationId": "add_person_restrictions",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Person Id"
            },
            "name": "person_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestrictionCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response"
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Remove Person Restrictions",
        "description": "Remove restrictions from user.  NOTE: this will NOT remove restrictions for account deletion",
        "operationId": "remove_person_restrictions",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Person Id"
            },
            "name": "person_id",
            "in": "path"
          },
          {
            "description": "Issuer of the action",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RestrictionIssuerType"
                }
              ],
              "description": "Issuer of the action"
            },
            "name": "issuer_type",
            "in": "query"
          },
          {
            "description": "Issuer of the action",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Issuer",
              "description": "Issuer of the action"
            },
            "name": "issuer",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/restrictions": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Player Restrictions For Self",
        "description": "Get Restrictions for a player",
        "operationId": "get_player_restrictions_for_self",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restrictions"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/restrictions": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Player Restrictions",
        "description": "Get Restrictions for a player",
        "operationId": "get_player_restrictions",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Restrictions"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add Player Restrictions",
        "description": "Add a new restriction to an existing player's person",
        "operationId": "add_player_restrictions",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestrictionCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response"
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Remove Player Restrictions",
        "description": "Remove restrictions from user.  NOTE: this will NOT remove restrictions for account deletion",
        "operationId": "remove_player_restrictions",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "description": "Issuer of the action",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RestrictionIssuerType"
                }
              ],
              "description": "Issuer of the action"
            },
            "name": "issuer_type",
            "in": "query"
          },
          {
            "description": "Issuer of the action",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Issuer",
              "description": "Issuer of the action"
            },
            "name": "issuer",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/oauth/login/{platform}": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Oauth Login",
        "description": "This endpoint is used to initiate the OAuth authentication flow for a user.\n\nIf the platform has been configured correctly, this endpoint will redirect to the platform's login page.  \nOnce the user has logged in, the platform should redirect them to the `/users/v1/oauth/response/{platform}` endpoint for the associated platform.  \n\nErrors will be immediately redirected to the requested `redirect_uri` (or the first configured redirect URI, if the requested URI is not configured).",
        "operationId": "oauth_login",
        "parameters": [
          {
            "description": "The platform to use for authentication",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OAuthPortal"
                }
              ],
              "description": "The platform to use for authentication"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "description": "A client state value to be forwarded with this request to the redirect URI.",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 4096,
              "title": "State",
              "description": "A client state value to be forwarded with this request to the redirect URI."
            },
            "name": "state",
            "in": "query"
          },
          {
            "description": "The URI to redirect to after the OAuth flow is complete. If not provided, or does not match one of the preconfigured redirect URIs, the first configured redirect URI will be used.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Redirect Uri",
              "description": "The URI to redirect to after the OAuth flow is complete. If not provided, or does not match one of the preconfigured redirect URIs, the first configured redirect URI will be used."
            },
            "name": "redirect_uri",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "User-Agent"
            },
            "name": "user-agent",
            "in": "header"
          },
          {
            "description": "IP Address hint",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 32,
              "title": "X-Rh-Client-Addr",
              "description": "IP Address hint"
            },
            "name": "x-rh-client-addr",
            "in": "header"
          }
        ],
        "responses": {
          "307": {
            "description": "Redirect to next step in OAuth flow",
            "headers": {
              "location": {
                "description": "\nURL that the user should be redirected to complete the next step of the OAuth flow.\n\nRedirects to the `redirect_uri` and may include the following query parameters:\n- `state`: The state value that was provided in the original request.\n- `error_code_v2`: The error code for the error that occurred during the OAuth flow.  May (but is not guaranteed to) contain one of the following:\n    - `internal_error` - An internal error occurred.  The request may succeed if retried.  If not, contact an administrator.\n    - `no_redirects_configured` - No redirect urls setup for oauth.\n    - `redirect_uri_does_not_match` - Redirect URI does not match a configured value.\n    - `error_occurred_during_exchange` - An error occurred while exchanging a code for token.\n    - `failed_to_verify_state` - Failed to verify the state associated with the request.\n    - `failed_to_save_state` - Error occurred saving the state.\n    - `failed_to_save_tokens` - Problem saving tokens.  Contact an administrator\n    - `too_many_users` - Account has too many users associated with it.  Contact an administrator\n    - `user_auth_restricted` - Authentication for this user has been restricted\n    - `user_needs_agreements` - User has not accepted all required agreements.  See response for list of agreements required\n    - `error_retrieving_player_results` - Error retrieving player results\n    - `failed_to_retrieve_roles` - Failed to retrieve roles\n    - `client_credentials_invalid` - Client Credentials provided to authentication attempt were invalid\n    - `authentication_limited` - Authentication is currently limited to accounts that are already logged in.  Please try again later\n    - `authentication_locked` - Authentication is currently locked.  Please try again later\n    - `invalid_grant_type` - Grant Type {grant_type} is not supported\n    - `user_auth_disabled` - User authentication is not permitted for this policy\n    - `client_auth_disabled` - Client authentication is not permitted for this policy\n    - `amazon_disabled` - Amazon authentication is currently disabled\n    - `amazon_token_empty` - Amazon access token is empty\n    - `amazon_invalid_access_token` - Amazon access token is invalid\n    - `amazon_token_exchange_failed` - Problem exchanging code for token with Amazon\n    - `anon_disabled` - Anon authentication is currently disabled\n    - `anon_token_empty` - Anon access token is empty\n    - `apple_disabled` - Apple authentication is currently disabled\n    - `apple_token_empty` - Apple access token is empty\n    - `apple_failed_key_lookup` - Failed to retrieve keys from Apple\n    - `apple_token_exchange_failed` - Problem exchanging code for token with Apple\n    - `apple_token_key_not_valid` - public key not found\n    - `apple_token_not_valid` - Apple access token is not valid\n    - `authorization_code_not_found` - Authorization code not found or expired\n    - `basic_disabled` - Basic authentication is currently disabled\n    - `basic_token_empty` - Basic access token is empty\n    - `basic_auth_incorrect_format` - Basic auth should be formatted like `USERNAME:PASSWORD`\n    - `basic_auth_credentials_not_found` - Basic auth credentials not found\n    - `developer_api_disabled` - Developer API authentication is currently disabled\n    - `developer_api_token_empty` - Developer API access token is empty\n    - `developer_api_token_invalid` - Developer API access token is invalid or expired\n    - `epic_disabled` - Epic authentication is currently disabled\n    - `epic_token_empty` - Epic access token is empty\n    - `epic_v1_token_key_id_invalid` - Epic v1 token contains an invalid key id\n    - `epic_v1_token_invalid` - Epic v1 token is invalid\n    - `epic_v2_keys_not_available` - Epic v2 keys are not available.  Please contact an administrator\n    - `epic_v2_token_invalid` - Epic v2 token is invalid\n    - `epic_oauth_token_exchange_failed` - Problem exchanging code for token with Epic\n    - `google_disabled` - Google authentication is currently disabled\n    - `google_token_empty` - Google access token is empty\n    - `google_keys_not_available` - Google keys are not available.  Please contact an administrator\n    - `google_token_not_valid` - Google access token is not valid\n    - `google_token_exchange_failed` - Problem exchanging code for token with Google\n    - `nintendo_disabled` - Nintendo authentication is currently disabled\n    - `nintendo_token_empty` - Nintendo access token is empty\n    - `nintendo_env_credentials_not_found` - Nintendo environment credentials not found\n    - `nintendo_access_token_not_valid` - Nintendo access token is not valid\n    - `nintendo_no_environment_matches_env_id` - Nintendo environment not found for given environment ID\n    - `nintendo_retrieve_client_credentials_failed` - Problem retrieving client credentials from Nintendo.  This commonly occurs while converting between NAID and PPID.\n    - `nintendo_ppid_conversion_failed` - error during PPID conversion\n    - `nintendo_ppid_conversion_too_many_accounts_found` - too many accounts found during PPID conversion\n    - `nintendo_ppid_conversion_no_accounts_found` - no accounts found during PPID conversion\n    - `nintendo_ppid_missing` - PPID is missing for user\n    - `nintendo_ppid_key_not_valid` - Nintendo access token key is not valid\n    - `nintendo_service_key_url_not_found` - Nintendo service key url not found.  This usually indicates that the corresponding Nintendo environment has a mismatch between Nintendo account URL and Nintendo Service Account URL.\n    - `nintendo_service_access_token_not_valid` - Nintendo service access token is not valid\n    - `nintendo_service_access_token_for_wrong_app` - Nintendo service access token is for the wrong app\n    - `nintendo_oauth_env_not_found` - Nintendo oauth environment not found.  Check that the environment is configured correctly.\n    - `nintendo_token_exchange_failed` - Problem exchanging code for token with Nintendo\n    - `ps4_v1_disabled` - PS4 v1 authentication is currently disabled\n    - `ps4_v1_token_empty` - PS4 v1 access token is empty\n    - `ps4_v1_token_expired` - PS4 v1 access token is expired\n    - `ps4_v1_token_exchange_failed` - Problem exchanging code for token with PS4\n    - `ps4_v1_id_token_request_failed` - Problem requesting id token from PS4\n    - `ps4_v1_id_token_not_valid` - PS4 v1 id token is not valid\n    - `ps4_v1_token_details_disabled` - PS4 v1 token details are disabled\n    - `ps4_v1_token_details_request_failed` - Problem requesting token details from PS4\n    - `ps4_v3_disabled` - PS4 v3 authentication is currently disabled\n    - `ps4_v3_token_details_disabled` - PS4 v3 token details are disabled\n    - `ps4_v3_token_empty` - PS4 v3 access token is empty\n    - `ps4_v3_id_token_request_failed` - Problem requesting id token from PS4\n    - `ps4_v3_id_token_not_valid` - PS4 v3 id token is not valid\n    - `ps5_v3_disabled` - PS5 v3 authentication is currently disabled\n    - `ps5_v3_token_details_disabled` - PS5 v3 token details are disabled\n    - `ps5_v3_token_empty` - PS5 v3 access token is empty\n    - `ps5_v3_id_token_request_failed` - Problem requesting id token from PS5\n    - `ps5_v3_id_token_not_valid` - PS5 v3 id token is not valid\n    - `psn_environment_permission_denied` - PSN Environment permission was denied.  This usually means that the Client ID/Secret do not match.  This error can also occur for `sp-int` or `prod-qa` if the environment is not whitelisted to access the PSN environment.\n    - `refresh_disabled` - Refresh authentication is currently disabled\n    - `refresh_token_empty` - Refresh token is empty\n    - `refresh_token_not_found` - Refresh token was not found or has expired\n    - `refresh_token_invalid_user` - Refresh token refrences invalid user\n    - `refresh_token_client_id_mismatch` - Client ID for new token request did not match original token\n    - `steam_disabled` - Steam authentication is currently disabled\n    - `steam_token_empty` - Steam code (Ticket) is empty\n    - `steam_token_exchange_failed` - Problem exchanging code (ticket) for token with Steam\n    - `steam_user_vacbanned` - User is VAC banned\n    - `steam_user_publisherbanned` - User is publisher banned\n    - `steam_user_offline` - User is reporting offline to Steam, causing all Steam tickets to invalidate\n    - `steam_token_invalid` - Steam code (Ticket) was reported as invalid by Steam\n    - `steam_token_for_wrong_app` - Steam code (Ticket) is for a different Steam Application\n    - `twitch_disabled` - Twitch authentication is currently disabled\n    - `twitch_token_empty` - Twitch access token is empty\n    - `twitch_token_invalid` - Twitch access token is not valid\n    - `twitch_keys_not_available` - Twitch keys are not available.  Please contact an administrator\n    - `twitch_token_exchange_failed` - Problem exchanging code for token with Twitch\n    - `xbox_disabled` - Xbox authentication is currently disabled\n    - `xbox_xsts_token_empty` - Xbox XSTS token is empty\n    - `xbox_xsts_token_invalid` - Xbox XSTS token is not valid\n    - `xbox_xtoken_invalid` - Xbox XToken is not valid\n    - `xbox_access_token_request_failed` - Problem requesting access token from Xbox\n    - `xbox_xsts_token_exchange_failed` - Problem exchanging access token for XSTS token with Xbox\n    - `xbox_xtoken_exchange_failed` - Problem exchanging XSTS token for XToken with Xbox\n\n- `error_description`: The description for the error that occurred during the OAuth flow.\n- `error_code`: ***DEPRECATED*** - Use `error_code_v2` instead.  May (but is not guaranteed to) contain one of the following:\n    - `NO_CODE_IN_REQUEST` - No code in request.\n    - `NO_REDIRECTS_CONFIGURED` - No redirect urls setup for oauth.\n    - `REDIRECT_URI_DOES_NOT_MATCH` - Redirect URI does not match a configured value.\n    - `FAILED_TO_VERIFY_STATE` - Failed to verify the state associated with the request.\n    - `FAILED_TO_SAVE_STATE` - Error occurred saving the state.\n    - `FAILED_TO_SAVE_TOKENS` - Failed to save tokens.\n    - `PORTAL_PROVIDER_DISABLED` - OAuth provider is disabled.\n    - `ERROR_OCCURRED_DURING_EXCHANGE` - An error occurred while exchanging a code for token.\n\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/oauth/response/{platform}": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Oauth Response",
        "description": "Handle OAuth response from the platform.  Validates the response, and generates an authorization_code for the user.  The authorization_code can be used with the `/users/v1/oauth/token` endpoint to get an access token for the user.",
        "operationId": "oauth_response",
        "parameters": [
          {
            "description": "The platform to use for authentication",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OAuthPortal"
                }
              ],
              "description": "The platform to use for authentication"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "description": "The code or token from the platform that can be used to validate the user's identity",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Code",
              "description": "The code or token from the platform that can be used to validate the user's identity",
              "default": ""
            },
            "name": "code",
            "in": "query"
          },
          {
            "description": "The state value sent to the platform provider that is used to continue with the oauth request.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "State",
              "description": "The state value sent to the platform provider that is used to continue with the oauth request.",
              "default": ""
            },
            "name": "state",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "User-Agent"
            },
            "name": "user-agent",
            "in": "header"
          },
          {
            "description": "IP Address hint",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 32,
              "title": "X-Rh-Client-Addr",
              "description": "IP Address hint"
            },
            "name": "x-rh-client-addr",
            "in": "header"
          }
        ],
        "responses": {
          "307": {
            "description": "Redirect to next step in OAuth flow",
            "headers": {
              "location": {
                "description": "\nURL that the user should be redirected to complete the next step of the OAuth flow.\n\nRedirects to the `redirect_uri` and may include the following query parameters:\n- `code`: The authorization_code that can be exchanged for an access token for the user.\n- `state`: The state value that was provided in the original request.\n- `error_code_v2`: The error code for the error that occurred during the OAuth flow.  May (but is not guaranteed to) contain one of the following:\n    - `internal_error` - An internal error occurred.  The request may succeed if retried.  If not, contact an administrator.\n    - `no_redirects_configured` - No redirect urls setup for oauth.\n    - `redirect_uri_does_not_match` - Redirect URI does not match a configured value.\n    - `error_occurred_during_exchange` - An error occurred while exchanging a code for token.\n    - `failed_to_verify_state` - Failed to verify the state associated with the request.\n    - `failed_to_save_state` - Error occurred saving the state.\n    - `failed_to_save_tokens` - Problem saving tokens.  Contact an administrator\n    - `too_many_users` - Account has too many users associated with it.  Contact an administrator\n    - `user_auth_restricted` - Authentication for this user has been restricted\n    - `user_needs_agreements` - User has not accepted all required agreements.  See response for list of agreements required\n    - `error_retrieving_player_results` - Error retrieving player results\n    - `failed_to_retrieve_roles` - Failed to retrieve roles\n    - `client_credentials_invalid` - Client Credentials provided to authentication attempt were invalid\n    - `authentication_limited` - Authentication is currently limited to accounts that are already logged in.  Please try again later\n    - `authentication_locked` - Authentication is currently locked.  Please try again later\n    - `invalid_grant_type` - Grant Type {grant_type} is not supported\n    - `user_auth_disabled` - User authentication is not permitted for this policy\n    - `client_auth_disabled` - Client authentication is not permitted for this policy\n    - `amazon_disabled` - Amazon authentication is currently disabled\n    - `amazon_token_empty` - Amazon access token is empty\n    - `amazon_invalid_access_token` - Amazon access token is invalid\n    - `amazon_token_exchange_failed` - Problem exchanging code for token with Amazon\n    - `anon_disabled` - Anon authentication is currently disabled\n    - `anon_token_empty` - Anon access token is empty\n    - `apple_disabled` - Apple authentication is currently disabled\n    - `apple_token_empty` - Apple access token is empty\n    - `apple_failed_key_lookup` - Failed to retrieve keys from Apple\n    - `apple_token_exchange_failed` - Problem exchanging code for token with Apple\n    - `apple_token_key_not_valid` - public key not found\n    - `apple_token_not_valid` - Apple access token is not valid\n    - `authorization_code_not_found` - Authorization code not found or expired\n    - `basic_disabled` - Basic authentication is currently disabled\n    - `basic_token_empty` - Basic access token is empty\n    - `basic_auth_incorrect_format` - Basic auth should be formatted like `USERNAME:PASSWORD`\n    - `basic_auth_credentials_not_found` - Basic auth credentials not found\n    - `developer_api_disabled` - Developer API authentication is currently disabled\n    - `developer_api_token_empty` - Developer API access token is empty\n    - `developer_api_token_invalid` - Developer API access token is invalid or expired\n    - `epic_disabled` - Epic authentication is currently disabled\n    - `epic_token_empty` - Epic access token is empty\n    - `epic_v1_token_key_id_invalid` - Epic v1 token contains an invalid key id\n    - `epic_v1_token_invalid` - Epic v1 token is invalid\n    - `epic_v2_keys_not_available` - Epic v2 keys are not available.  Please contact an administrator\n    - `epic_v2_token_invalid` - Epic v2 token is invalid\n    - `epic_oauth_token_exchange_failed` - Problem exchanging code for token with Epic\n    - `google_disabled` - Google authentication is currently disabled\n    - `google_token_empty` - Google access token is empty\n    - `google_keys_not_available` - Google keys are not available.  Please contact an administrator\n    - `google_token_not_valid` - Google access token is not valid\n    - `google_token_exchange_failed` - Problem exchanging code for token with Google\n    - `nintendo_disabled` - Nintendo authentication is currently disabled\n    - `nintendo_token_empty` - Nintendo access token is empty\n    - `nintendo_env_credentials_not_found` - Nintendo environment credentials not found\n    - `nintendo_access_token_not_valid` - Nintendo access token is not valid\n    - `nintendo_no_environment_matches_env_id` - Nintendo environment not found for given environment ID\n    - `nintendo_retrieve_client_credentials_failed` - Problem retrieving client credentials from Nintendo.  This commonly occurs while converting between NAID and PPID.\n    - `nintendo_ppid_conversion_failed` - error during PPID conversion\n    - `nintendo_ppid_conversion_too_many_accounts_found` - too many accounts found during PPID conversion\n    - `nintendo_ppid_conversion_no_accounts_found` - no accounts found during PPID conversion\n    - `nintendo_ppid_missing` - PPID is missing for user\n    - `nintendo_ppid_key_not_valid` - Nintendo access token key is not valid\n    - `nintendo_service_key_url_not_found` - Nintendo service key url not found.  This usually indicates that the corresponding Nintendo environment has a mismatch between Nintendo account URL and Nintendo Service Account URL.\n    - `nintendo_service_access_token_not_valid` - Nintendo service access token is not valid\n    - `nintendo_service_access_token_for_wrong_app` - Nintendo service access token is for the wrong app\n    - `nintendo_oauth_env_not_found` - Nintendo oauth environment not found.  Check that the environment is configured correctly.\n    - `nintendo_token_exchange_failed` - Problem exchanging code for token with Nintendo\n    - `ps4_v1_disabled` - PS4 v1 authentication is currently disabled\n    - `ps4_v1_token_empty` - PS4 v1 access token is empty\n    - `ps4_v1_token_expired` - PS4 v1 access token is expired\n    - `ps4_v1_token_exchange_failed` - Problem exchanging code for token with PS4\n    - `ps4_v1_id_token_request_failed` - Problem requesting id token from PS4\n    - `ps4_v1_id_token_not_valid` - PS4 v1 id token is not valid\n    - `ps4_v1_token_details_disabled` - PS4 v1 token details are disabled\n    - `ps4_v1_token_details_request_failed` - Problem requesting token details from PS4\n    - `ps4_v3_disabled` - PS4 v3 authentication is currently disabled\n    - `ps4_v3_token_details_disabled` - PS4 v3 token details are disabled\n    - `ps4_v3_token_empty` - PS4 v3 access token is empty\n    - `ps4_v3_id_token_request_failed` - Problem requesting id token from PS4\n    - `ps4_v3_id_token_not_valid` - PS4 v3 id token is not valid\n    - `ps5_v3_disabled` - PS5 v3 authentication is currently disabled\n    - `ps5_v3_token_details_disabled` - PS5 v3 token details are disabled\n    - `ps5_v3_token_empty` - PS5 v3 access token is empty\n    - `ps5_v3_id_token_request_failed` - Problem requesting id token from PS5\n    - `ps5_v3_id_token_not_valid` - PS5 v3 id token is not valid\n    - `psn_environment_permission_denied` - PSN Environment permission was denied.  This usually means that the Client ID/Secret do not match.  This error can also occur for `sp-int` or `prod-qa` if the environment is not whitelisted to access the PSN environment.\n    - `refresh_disabled` - Refresh authentication is currently disabled\n    - `refresh_token_empty` - Refresh token is empty\n    - `refresh_token_not_found` - Refresh token was not found or has expired\n    - `refresh_token_invalid_user` - Refresh token refrences invalid user\n    - `refresh_token_client_id_mismatch` - Client ID for new token request did not match original token\n    - `steam_disabled` - Steam authentication is currently disabled\n    - `steam_token_empty` - Steam code (Ticket) is empty\n    - `steam_token_exchange_failed` - Problem exchanging code (ticket) for token with Steam\n    - `steam_user_vacbanned` - User is VAC banned\n    - `steam_user_publisherbanned` - User is publisher banned\n    - `steam_user_offline` - User is reporting offline to Steam, causing all Steam tickets to invalidate\n    - `steam_token_invalid` - Steam code (Ticket) was reported as invalid by Steam\n    - `steam_token_for_wrong_app` - Steam code (Ticket) is for a different Steam Application\n    - `twitch_disabled` - Twitch authentication is currently disabled\n    - `twitch_token_empty` - Twitch access token is empty\n    - `twitch_token_invalid` - Twitch access token is not valid\n    - `twitch_keys_not_available` - Twitch keys are not available.  Please contact an administrator\n    - `twitch_token_exchange_failed` - Problem exchanging code for token with Twitch\n    - `xbox_disabled` - Xbox authentication is currently disabled\n    - `xbox_xsts_token_empty` - Xbox XSTS token is empty\n    - `xbox_xsts_token_invalid` - Xbox XSTS token is not valid\n    - `xbox_xtoken_invalid` - Xbox XToken is not valid\n    - `xbox_access_token_request_failed` - Problem requesting access token from Xbox\n    - `xbox_xsts_token_exchange_failed` - Problem exchanging access token for XSTS token with Xbox\n    - `xbox_xtoken_exchange_failed` - Problem exchanging XSTS token for XToken with Xbox\n\n- `error_description`: The description for the error that occurred during the OAuth flow.\n- `error_code`: ***DEPRECATED*** - Use `error_code_v2` instead.  May (but is not guaranteed to) contain one of the following:\n    - `NO_CODE_IN_REQUEST` - No code in request.\n    - `NO_REDIRECTS_CONFIGURED` - No redirect urls setup for oauth.\n    - `REDIRECT_URI_DOES_NOT_MATCH` - Redirect URI does not match a configured value.\n    - `FAILED_TO_VERIFY_STATE` - Failed to verify the state associated with the request.\n    - `FAILED_TO_SAVE_STATE` - Error occurred saving the state.\n    - `FAILED_TO_SAVE_TOKENS` - Failed to save tokens.\n    - `PORTAL_PROVIDER_DISABLED` - OAuth provider is disabled.\n    - `ERROR_OCCURRED_DURING_EXCHANGE` - An error occurred while exchanging a code for token.\n\n",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/oauth/token": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Oauth Token Exchange",
        "description": "Exchange an authorization_code from the `/users/v1/oauth/response/{platform}` endpoint for an access token and refresh token.",
        "operationId": "oauth_token_exchange",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "User-Agent"
            },
            "name": "user-agent",
            "in": "header"
          },
          {
            "description": "IP Address hint",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 32,
              "title": "X-Rh-Client-Addr",
              "description": "IP Address hint"
            },
            "name": "x-rh-client-addr",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuthTokenExchange"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthTokenResponse"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `authorization_code_not_found`: Authorization code not found or expired\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/v2/oauth/token": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Token",
        "description": "OAuth2 Token Endpoint. For more information see: <a href=\"https://datatracker.ietf.org/doc/html/rfc6749#section-3.2\" target=\"_blank\">Token Endpoint Spec</a>.",
        "operationId": "token",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "User-Agent"
            },
            "name": "user-agent",
            "in": "header"
          },
          {
            "description": "IP Address hint",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 32,
              "title": "X-Rh-Client-Addr",
              "description": "IP Address hint"
            },
            "name": "x-rh-client-addr",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/v1/link": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Link",
        "description": "Link a follower platform user to a leader person.\n    \nThe Leader person is found using the following priority:\n\n1. If the `leader_person_id` is provided directly\n2. If the `leader_platform` and `leader_platform_user_id` are provided, the `person_id` of that platform user is used.\n3. If the `scheme` and `credentials` are provided, the person_id of the platform user of credentials is used.\n\nThe Follower platform user is found using the following priority:\n\n1. If the `follower_platform` and `follower_platform_user_id` are provided directly.\n2. If the Authorization header contains a user token, the platform and platform user id from the token are used.\n\nFor leader selection 1,2 or follower selection 1, Required Permissions:\n\n- For any user (including themselves) any of: `user:*`, `user:modify:any`\n\n\n\nNOTE: Whenever you change the link or cross progression status of a user, it is recommended to \nrefresh their access token.  Each token does container user information, which may be incorrect after a link or \ncross progression change.  There is no guarantee that calling other endpoints will operate on the correct user\nuntil the token has been refreshed.",
        "operationId": "link",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PlatformUserLinkRequest"
                  }
                ],
                "title": "Link Request",
                "default": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "400": {
            "description": "Request inputs are not valid\n\n\nError Codes:\n- `account_not_found` - User Account not found\n- `cannot_link_same_player` - Cannot link a player to themselves\n- `follower_already_linked` - Follower is already linked to another person.  They must be unlinked before they can be linked again.\n- `follower_has_cross_progression_enabled` - follower must disable cross progression before this operation\n- `follower_has_restrictions` - follower has restrictions that prevent this operation\n- `invalid_token_claims` - Token has missing/invalid claims.  Are you using a non-user token on a user endpoint?\n- `leader_has_restrictions` - leader has restrictions that prevent this operation\n- `leader_not_found` - Desired user for the leader of the link was not found\n- `platform_already_linked` - Person is already linked to another user on this platform\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/unlink": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Unlink",
        "description": "Unlink a platform user from their current person.  This will create a new person for the \nplatform user to be associated with.\n\nIf an identity is not provided, the identity in the token will be used.\n\nIf you are modifying a user outside of your person, Required Permissions:\n\n- For any user (including themselves) any of: `user:*`, `user:modify:any`\n\n\n\nNOTE: Whenever you change the link or cross progression status of a user, it is recommended to \nrefresh their access token.  Each token does container user information, which may be incorrect after a link or \ncross progression change.  There is no guarantee that calling other endpoints will operate on the correct user\nuntil the token has been refreshed.",
        "operationId": "unlink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PlatformUserOperationRequest"
                  }
                ],
                "title": "Platform Identity",
                "default": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "400": {
            "description": "Request inputs are not valid\n\n\nError Codes:\n- `account_not_found` - User Account not found\n- `cannot_modify_person` - You have insufficient permissions to modify this person\n- `cannot_unlink_cross_progression_player` - Cannot unlink the cross progression player\n- `invalid_token_claims` - Token has missing/invalid claims.  Are you using a non-user token on a user endpoint?\n- `player_not_linked` - Player is not linked\n- `user_has_restrictions` - user has restrictions that prevent this operation\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/cross-progression/enable": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Enable Cross Progression",
        "description": "Enable Cross Progression for the player associated with the platform identity.  \nWhile cross progression is enabled, all linked users who login will receive a token for the player with cross \nprogression enabled (instead of a token for their platform user's player).\n\nIf an identity is not provided, the identity in the token will be used.\n\nIf you are modifying a user outside of your person, Required Permissions:\n\n- For any user (including themselves) any of: `user:*`, `user:modify:any`\n\n\n\nNOTE: Whenever you change the link or cross progression status of a user, it is recommended to \nrefresh their access token.  Each token does container user information, which may be incorrect after a link or \ncross progression change.  There is no guarantee that calling other endpoints will operate on the correct user\nuntil the token has been refreshed.",
        "operationId": "enable_cross_progression",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PlatformUserOperationRequest"
                  }
                ],
                "title": "Platform Identity",
                "default": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "400": {
            "description": "Request inputs are not valid\n\n\nError Codes:\n- `account_not_found` - User Account not found\n- `already_cross_progression_player` - Player is already the cross progression player\n- `cannot_modify_person` - You have insufficient permissions to modify this person\n- `invalid_token_claims` - Token has missing/invalid claims.  Are you using a non-user token on a user endpoint?\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/cross-progression/disable": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Disable Cross Progression",
        "description": "Disable Cross Progression for a person.  While cross progression is disabled, \nall linked users who login will receive a token for the player associated with their platform user.\n    \nThe person is found using the following priority:\n\n1. If the `person_id` is provided directly\n2. If the `platform` and `platform_user_id` are provided, the `person_id` of that platform user is used.\n3. If the Authorization header contains a user token, the platform and platform user id from the token are used and the person associated with that user is used.\n\nIf you are modifying a user outside of your person, Required Permissions:\n\n- For any user (including themselves) any of: `user:*`, `user:modify:any`\n\n\n\nNOTE: Whenever you change the link or cross progression status of a user, it is recommended to \nrefresh their access token.  Each token does container user information, which may be incorrect after a link or \ncross progression change.  There is no guarantee that calling other endpoints will operate on the correct user\nuntil the token has been refreshed.",
        "operationId": "disable_cross_progression",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PersonOperationRequest"
                  }
                ],
                "title": "Person Info",
                "default": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "400": {
            "description": "Request inputs are not valid\n\n\nError Codes:\n- `account_not_found` - User Account not found\n- `cannot_modify_person` - You have insufficient permissions to modify this person\n- `invalid_token_claims` - Token has missing/invalid claims.  Are you using a non-user token on a user endpoint?\n- `not_cross_progression_player` - Player is not the cross progression player\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/role": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get All Roles",
        "description": "Get all current roles. Including their custom_data and login_loot_rewards.\n    \nRequired Permissions:\n\n- For any player (including themselves) : `role:read`",
        "operationId": "get_all_roles",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  },
                  "type": "array",
                  "title": "Response Get All Roles"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/history/login": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Login History",
        "description": "Get the Login history for a given user\n    \nRequired Permissions:\n\n- For any player, person or platform identity (including themselves) any of: `user:*`, `user:audit:any`\n\n- For the player, person or platform identity themselves : `user:audit:self`",
        "operationId": "get_login_history",
        "parameters": [
          {
            "description": "The player UUID to audit",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid",
              "description": "The player UUID to audit"
            },
            "name": "player_uuid",
            "in": "query"
          },
          {
            "description": "The person ID to audit",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Person Id",
              "description": "The person ID to audit"
            },
            "name": "person_id",
            "in": "query"
          },
          {
            "description": "The platform to audit",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Platform"
                }
              ],
              "description": "The platform to audit"
            },
            "name": "platform",
            "in": "query"
          },
          {
            "description": "The platform user ID to audit",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 2048,
              "title": "Platform User Id",
              "description": "The platform user ID to audit"
            },
            "name": "platform_user_id",
            "in": "query"
          },
          {
            "description": "Token to retrieve the next page of results",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Continuation Token",
              "description": "Token to retrieve the next page of results"
            },
            "name": "continuation_token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginHistoryPage"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/history/link": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Link History",
        "description": "Get the Link history for a given user\n    \nRequired Permissions:\n\n- For any player, person or platform identity (including themselves) any of: `user:*`, `user:audit:any`\n\n- For the player, person or platform identity themselves : `user:audit:self`",
        "operationId": "get_link_history",
        "parameters": [
          {
            "description": "The player UUID to audit",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid",
              "description": "The player UUID to audit"
            },
            "name": "player_uuid",
            "in": "query"
          },
          {
            "description": "The person ID to audit",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Person Id",
              "description": "The person ID to audit"
            },
            "name": "person_id",
            "in": "query"
          },
          {
            "description": "The platform to audit",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Platform"
                }
              ],
              "description": "The platform to audit"
            },
            "name": "platform",
            "in": "query"
          },
          {
            "description": "The platform user ID to audit",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 2048,
              "title": "Platform User Id",
              "description": "The platform user ID to audit"
            },
            "name": "platform_user_id",
            "in": "query"
          },
          {
            "description": "Token to retrieve the next page of results",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Continuation Token",
              "description": "Token to retrieve the next page of results"
            },
            "name": "continuation_token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLinkHistory"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AgreementMessage": {
        "properties": {
          "auth_success": {
            "type": "boolean",
            "title": "Auth Success",
            "default": true
          },
          "error_code": {
            "type": "string",
            "title": "Error Code"
          },
          "desc": {
            "type": "string",
            "title": "Desc"
          },
          "needs_eula": {
            "type": "boolean",
            "title": "Needs Eula",
            "description": "Whether the user needs to accept the End User License Agreement",
            "default": false
          },
          "needs_tos": {
            "type": "boolean",
            "title": "Needs Tos",
            "description": "Whether the user needs to accept the Terms of Service",
            "default": false
          },
          "needs_privacy_policy": {
            "type": "boolean",
            "title": "Needs Privacy Policy",
            "description": "Whether the user needs to accept the Privacy Policy",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "error_code",
          "desc"
        ],
        "title": "AgreementMessage",
        "description": "Error message for when a user has not agreed to the EULA, TOS, or Privacy Policy"
      },
      "CreatePlatformUserRequest": {
        "properties": {
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Platform to create with"
          },
          "platform_user_id": {
            "type": "string",
            "maxLength": 2048,
            "minLength": 1,
            "title": "Platform User Id",
            "description": "Platform user ID to create with"
          },
          "display_name": {
            "type": "string",
            "maxLength": 256,
            "title": "Display Name",
            "description": "Display name used when creating a new player"
          }
        },
        "type": "object",
        "required": [
          "platform",
          "platform_user_id"
        ],
        "title": "CreatePlatformUserRequest",
        "description": "Request parameters to create a user exists"
      },
      "DeviceType": {
        "type": "string",
        "enum": [
          "pc",
          "xbox_series",
          "xbox_one",
          "web"
        ],
        "title": "DeviceType",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "pc",
          "xbox_series",
          "xbox_one",
          "web"
        ],
        "x-enum-descriptions": [
          "",
          "",
          "",
          ""
        ]
      },
      "GrantType": {
        "type": "string",
        "enum": [
          "anon",
          "google",
          "apple",
          "refresh",
          "epic",
          "xboxlive",
          "ps4_v1",
          "ps4_v3",
          "ps5_v3",
          "nintendo",
          "nintendo_switch",
          "steam",
          "basic",
          "rallyhere",
          "client_credentials"
        ],
        "title": "GrantType",
        "description": "Supported grant types for V1 Login Flow",
        "x-enum-varnames": [
          "ANON",
          "GOOGLE",
          "APPLE",
          "REFRESH",
          "EPIC",
          "XBOXLIVE",
          "PS4_V1",
          "PS4_V3",
          "PS5_V3",
          "NINTENDO",
          "NINTENDO_SWITCH",
          "STEAM",
          "BASIC",
          "RALLYHERE",
          "CLIENT_CREDENTIALS"
        ],
        "x-enum-descriptions": [
          "Anonymous authentication",
          "Google authentication",
          "Apple authentication",
          "Refresh Token authentication",
          "Epic Online Services authentication",
          "Xbox Live authentication",
          "Playstation Network v1 authentication using the configured PS4 credentials",
          "Playstation Network v3 authentication using the configured PS5 credentials",
          "Playstation Network v3 authentication using the configured PS5 credentials",
          "Nintendo Account authentication",
          "Nintendo Service Account (for Nintendo Switch) authentication",
          "Steam authentication",
          "Basic Username/Password authentication",
          "RallyHere Developer authentication",
          "Authentication that doesn't require user credentials, only a Client ID/Secret in the Authorization header."
        ]
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HzApiErrorModel": {
        "properties": {
          "auth_success": {
            "type": "boolean",
            "title": "Auth Success",
            "default": true
          },
          "error_code": {
            "type": "string",
            "title": "Error Code"
          },
          "desc": {
            "type": "string",
            "title": "Desc"
          }
        },
        "type": "object",
        "required": [
          "error_code",
          "desc"
        ],
        "title": "HzApiErrorModel"
      },
      "LinkAction": {
        "type": "string",
        "enum": [
          "link",
          "unlink",
          "new_person",
          "xprog_enable",
          "xprog_disable"
        ],
        "title": "LinkAction",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "link",
          "unlink",
          "new_person",
          "xprog_enable",
          "xprog_disable"
        ],
        "x-enum-descriptions": [
          "Linked a player to an existing person",
          "Unlinked a player from a person",
          "Player was associated with a new person",
          "Active player was set for person, enabling cross-progression for all of the person's players",
          "Active player was cleared for person, disabling cross-progression for all of the person's players"
        ]
      },
      "LoginHistoryEntry": {
        "properties": {
          "player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Player Uuid",
            "description": "player UUID"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "platform"
          },
          "platform_user_id": {
            "type": "string",
            "maxLength": 2048,
            "title": "Platform User Id",
            "description": "platform user ID"
          },
          "person_id": {
            "type": "string",
            "format": "uuid",
            "title": "Person Id",
            "description": "person ID"
          },
          "user_agent": {
            "type": "string",
            "title": "User Agent",
            "description": "user agent string"
          },
          "ip": {
            "type": "string",
            "title": "Ip",
            "description": "IP address"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id",
            "description": "client ID"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          }
        },
        "type": "object",
        "title": "LoginHistoryEntry",
        "description": "Entry in a users's login history.  Some fields may be missing if the data is not available."
      },
      "LoginHistoryPage": {
        "properties": {
          "entries": {
            "items": {
              "$ref": "#/components/schemas/LoginHistoryEntry"
            },
            "type": "array",
            "title": "Entries",
            "description": "The login history entries"
          },
          "continuation_token": {
            "type": "string",
            "title": "Continuation Token",
            "description": "Token to retrieve the next page of results"
          }
        },
        "type": "object",
        "required": [
          "entries"
        ],
        "title": "LoginHistoryPage"
      },
      "LoginLootReward": {
        "properties": {
          "loot_id": {
            "type": "string",
            "title": "Loot Id",
            "description": "Loot ID"
          },
          "legacy_loot_id": {
            "type": "integer",
            "title": "Legacy Loot Id",
            "description": "Legacy Loot ID"
          }
        },
        "type": "object",
        "required": [
          "legacy_loot_id"
        ],
        "title": "LoginLootReward",
        "description": "Login loot reward"
      },
      "LoginRequestV1": {
        "properties": {
          "grant_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GrantType"
              }
            ],
            "description": "The grant type to use for authentication"
          },
          "portal_access_token": {
            "type": "string",
            "title": "Portal Access Token",
            "description": "Token or secret used to authenticate the provided grant type",
            "default": ""
          },
          "portal_display_name": {
            "type": "string",
            "title": "Portal Display Name",
            "description": "Some grant types support client-provided names",
            "default": ""
          },
          "portal_parent_access_token": {
            "type": "string",
            "title": "Portal Parent Access Token",
            "description": "Some grant types have 2 tier authentication and require a second token/secret",
            "default": ""
          },
          "portal_parent_display_name": {
            "type": "string",
            "title": "Portal Parent Display Name",
            "description": "Some grant types have 2 tier authentication and support a second display name",
            "default": ""
          },
          "include_refresh": {
            "type": "boolean",
            "title": "Include Refresh",
            "description": "Indicates if the client wants a refresh token returned",
            "default": false
          },
          "accept_eula": {
            "type": "boolean",
            "title": "Accept Eula",
            "description": "If true, the user has accepted the EULA",
            "default": false
          },
          "accept_tos": {
            "type": "boolean",
            "title": "Accept Tos",
            "description": "If true, the user has accepted the Terms of Service",
            "default": false
          },
          "accept_privacy_policy": {
            "type": "boolean",
            "title": "Accept Privacy Policy",
            "description": "If true, the user has accepted the Privacy Policy",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "grant_type"
        ],
        "title": "LoginRequestV1"
      },
      "LoginResult": {
        "properties": {
          "portal_parent_auth_result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PortalUserInfo"
              }
            ],
            "title": "Portal Parent Auth Result",
            "description": "Parent portal auth result"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Permissions",
            "description": "List of permissions for this user.",
            "default": []
          },
          "restrictions": {
            "items": {
              "$ref": "#/components/schemas/Restriction"
            },
            "type": "array",
            "title": "Restrictions",
            "description": "List of restrictions on this player",
            "default": []
          },
          "active_player_id": {
            "type": "integer",
            "title": "Active Player Id",
            "description": "Active player ID. *DEPRECATED* use `active_player_uuid` instead",
            "deprecated": true
          },
          "active_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Active Player Uuid",
            "description": "Active player UUID"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Platform"
          },
          "portal_id": {
            "type": "integer",
            "title": "Portal Id",
            "description": "Portal ID *DEPRECATED* use `platform` instead",
            "deprecated": true
          },
          "portal_user_id": {
            "type": "string",
            "title": "Portal User Id",
            "description": "Portal user ID"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name",
            "description": "Display name"
          },
          "role_id": {
            "type": "integer",
            "title": "Role Id",
            "description": "Role ID"
          },
          "person_id": {
            "type": "string",
            "format": "uuid",
            "title": "Person Id",
            "description": "Person ID"
          },
          "access_token": {
            "type": "string",
            "title": "Access Token",
            "description": "Access token that can be used for future requests",
            "default": ""
          },
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token",
            "description": "Refresh token that can be used to refresh authentication for a new access token"
          },
          "publisher_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Publisher Uuid",
            "description": "Publisher UUID",
            "deprecated": true
          },
          "tenant_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Tenant Uuid",
            "description": "Tenant UUID",
            "deprecated": true
          },
          "config_elector_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Config Elector Uuid",
            "description": "Config elector UUID",
            "deprecated": true
          },
          "client_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Client Uuid",
            "description": "Client UUID",
            "deprecated": true
          },
          "client_id": {
            "type": "string",
            "title": "Client Id",
            "description": "Client ID"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "description": "Token type"
          },
          "expires_in": {
            "type": "integer",
            "title": "Expires In",
            "description": "Result access token expiration time in seconds"
          }
        },
        "type": "object",
        "required": [
          "publisher_uuid",
          "tenant_uuid",
          "config_elector_uuid",
          "client_uuid",
          "client_id",
          "token_type"
        ],
        "title": "LoginResult",
        "description": "Login result"
      },
      "LogoutRequest": {
        "properties": {
          "refresh_token": {
            "type": "string",
            "minLength": 1,
            "title": "Refresh Token",
            "description": "Refresh token to be invalidated"
          }
        },
        "type": "object",
        "required": [
          "refresh_token"
        ],
        "title": "LogoutRequest",
        "description": "Logout request"
      },
      "LookupResults": {
        "properties": {
          "display_names": {
            "items": {
              "additionalProperties": {
                "items": {
                  "$ref": "#/components/schemas/PlayerResponse"
                },
                "type": "array"
              },
              "type": "object"
            },
            "type": "array",
            "title": "Display Names",
            "description": "List of display names and the players that match that display name",
            "default": []
          },
          "identity_platforms": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/PlatformIdentityLookupResults"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Identity Platforms",
            "description": "*DEPRECATED* Use `identity_platforms_by_platform` instead. List of platforms and the players that match that platform user id",
            "default": {},
            "deprecated": true
          },
          "identity_platforms_by_platform": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/PlatformIdentityLookupResults"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Identity Platforms By Platform",
            "description": "List of platforms and the players that match that platform user id",
            "default": {}
          }
        },
        "type": "object",
        "title": "LookupResults",
        "description": "Lookup results for a player query"
      },
      "OAuthGrantType": {
        "type": "string",
        "enum": [
          "client_credentials"
        ],
        "title": "OAuthGrantType",
        "description": "Supported OAuth2 grant types",
        "x-enum-varnames": [
          "CLIENT_CREDENTIALS"
        ],
        "x-enum-descriptions": [
          "The OAuth2 client credentials grant type"
        ]
      },
      "OAuthPortal": {
        "type": "string",
        "enum": [
          "google",
          "apple",
          "epic",
          "xbox",
          "psn",
          "nintendo",
          "steam",
          "amazon",
          "twitch"
        ],
        "title": "OAuthPortal",
        "description": "Supported OAuth portals for V1 Login Flow",
        "x-enum-varnames": [
          "GOOGLE",
          "APPLE",
          "EPIC",
          "XBOX",
          "PSN",
          "NINTENDO",
          "STEAM",
          "AMAZON",
          "TWITCH"
        ],
        "x-enum-descriptions": [
          "Google OAuth Portal",
          "Apple OAuth Portal",
          "Epic OAuth Portal",
          "Xbox OAuth Portal",
          "Playstation Network OAuth Portal",
          "Nintendo OAuth Portal",
          "Steam OAuth Portal",
          "Amazon OAuth Portal",
          "Twitch OAuth Portal"
        ]
      },
      "OAuthTokenEchangeGrantType": {
        "type": "string",
        "enum": [
          "authorization_code"
        ],
        "title": "OAuthTokenEchangeGrantType",
        "description": "Supported grant types for OAuth Token Exchange process",
        "x-enum-varnames": [
          "authorization_code"
        ],
        "x-enum-descriptions": [
          "Authorization code grant type for OAuth token exchange."
        ]
      },
      "OAuthTokenExchange": {
        "properties": {
          "grant_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OAuthTokenEchangeGrantType"
              }
            ],
            "description": "Grant type for the OAuth exchange."
          },
          "code": {
            "type": "string",
            "minLength": 1,
            "title": "Code",
            "description": "authorization_code for the OAuth exchange."
          },
          "accepted_eula": {
            "type": "boolean",
            "title": "Accepted Eula",
            "description": "If true, the user has accepted the EULA.",
            "default": false
          },
          "accepted_tos": {
            "type": "boolean",
            "title": "Accepted Tos",
            "description": "If true, the user has accepted the TOS.",
            "default": false
          },
          "accepted_privacy_policy": {
            "type": "boolean",
            "title": "Accepted Privacy Policy",
            "description": "If true, the user has accepted the Privacy Policy.",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "grant_type",
          "code"
        ],
        "title": "OAuthTokenExchange",
        "description": "OAuth token exchange request."
      },
      "OAuthTokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token",
            "description": "Access token for the user."
          },
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token",
            "description": "Refresh token for the user."
          },
          "needs_eula": {
            "type": "boolean",
            "title": "Needs Eula",
            "description": "If true, the user must accept the EULA before a token can be generated.",
            "default": false
          },
          "needs_tos": {
            "type": "boolean",
            "title": "Needs Tos",
            "description": "If true, the user must accept the TOS before a token can be generated.",
            "default": false
          },
          "needs_privacy_policy": {
            "type": "boolean",
            "title": "Needs Privacy Policy",
            "description": "If true, the user must accept the Privacy Policy before a token can be generated.",
            "default": false
          },
          "regenerated_code": {
            "type": "string",
            "title": "Regenerated Code",
            "description": "If present, a new code was generated and can be used after the user accepts the required agreements."
          },
          "error_message": {
            "type": "string",
            "title": "Error Message",
            "description": "Error message if an error occurred."
          }
        },
        "type": "object",
        "title": "OAuthTokenResponse",
        "description": "OAuth token exchange response.  Successful response will contain an access_token and refresh_token.\n\nIf the user has not accepted all required agreements, the response will contain the appropriate\nneeds_* flags and a regenerated_code.  The regenerated_code is an authorization_code that can be used\nafter the user has accepted the required agreements."
      },
      "PersonEmailListRequest": {
        "properties": {
          "email_list_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Email List Ids",
            "description": "List of all email list ids the user is subscribed to, even if already subscribed before request",
            "default": []
          }
        },
        "type": "object",
        "title": "PersonEmailListRequest",
        "description": "Request to update a person's email list subscriptions"
      },
      "PersonEmailListResponse": {
        "properties": {
          "email_list_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Email List Ids",
            "description": "List of all email list ids the user is subscribed to"
          }
        },
        "type": "object",
        "required": [
          "email_list_ids"
        ],
        "title": "PersonEmailListResponse",
        "description": "Response for updating a person's email list subscriptions"
      },
      "PersonInfoResponse": {
        "properties": {
          "person_id": {
            "type": "string",
            "format": "uuid",
            "title": "Person Id",
            "description": "Person ID"
          },
          "active_player_id": {
            "type": "integer",
            "title": "Active Player Id",
            "description": "Active player ID, if the person has an active player."
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "Email address"
          }
        },
        "type": "object",
        "title": "PersonInfoResponse",
        "description": "Response for getting a person's info"
      },
      "PersonOperationRequest": {
        "properties": {
          "person_id": {
            "type": "string",
            "format": "uuid",
            "title": "Person Id",
            "description": "Person ID"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Platform ID"
          },
          "platform_user_id": {
            "type": "string",
            "maxLength": 2048,
            "title": "Platform User Id",
            "description": "Platform User ID"
          }
        },
        "type": "object",
        "title": "PersonOperationRequest",
        "description": "Model for doing operations on a specific person.  If person information is not provided, the information from the token claims will be used instead.\n\nPriority for finding the person ID:\n\n1. If the `person_id` is provided directly\n2. If the `platform` and `platform_user_id` are provided, the `person_id` of that platform user is used.\n3. If the Authorization header contains a user token, the platform and platform user id from the token are used to find the `person_id`."
      },
      "Platform": {
        "type": "string",
        "enum": [
          "Anon",
          "Basic",
          "XboxLive",
          "PSN",
          "NintendoNAID",
          "NintendoSwitch",
          "NintendoPPID",
          "Google",
          "GooglePlay",
          "Apple",
          "Epic",
          "Steam",
          "Amazon",
          "Twitch",
          "RallyHere",
          "LegacyName"
        ],
        "title": "Platform",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "ANON",
          "BASIC",
          "XBOX_LIVE",
          "PSN",
          "NINTENDO_NAID",
          "NINTENDO_SWITCH",
          "NINTENDO_PPID",
          "GOOGLE",
          "GOOGLE_PLAY",
          "APPLE",
          "EPIC",
          "STEAM",
          "AMAZON",
          "TWITCH",
          "RALLYHERE",
          "LEGACYNAME"
        ],
        "x-enum-descriptions": [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ]
      },
      "PlatformIdentityLookupResults": {
        "properties": {
          "identity": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PlayerResponse"
            },
            "type": "object",
            "title": "Identity",
            "description": "List of platform user ids and the players that match that platform user id",
            "default": {}
          }
        },
        "type": "object",
        "title": "PlatformIdentityLookupResults",
        "description": "Lookup results for a platform user id"
      },
      "PlatformUserLinkRequest": {
        "properties": {
          "leader_person_id": {
            "type": "string",
            "format": "uuid",
            "title": "Leader Person Id",
            "description": "Person ID of the leader to link to.  If not provided, the person will be found from the `leader_platform` and `leader_platform_user_id`"
          },
          "leader_platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Platform of the leader to link to.  If not provided, the leader will be found from the `scheme` and `credentials`"
          },
          "leader_platform_user_id": {
            "type": "string",
            "maxLength": 2048,
            "title": "Leader Platform User Id",
            "description": "Platform user ID of the leader to link to.  If not provided, the leader will be found from the `scheme` and `credentials`"
          },
          "follower_platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Platform of the follower to link.  If not provided, the follower will be found from the Authorization header's token"
          },
          "follower_platform_user_id": {
            "type": "string",
            "maxLength": 2048,
            "title": "Follower Platform User Id",
            "description": "Platform user ID of the follower to link.  If not provided, the follower will be found from the Authorization header's token"
          },
          "scheme": {
            "type": "string",
            "title": "Scheme",
            "description": "Scheme to use for the leader.  For most tokens, this will be `Bearer`"
          },
          "credentials": {
            "type": "string",
            "title": "Credentials",
            "description": "Credentials to use for the leader.  For most tokens, this will be the token itself."
          }
        },
        "type": "object",
        "title": "PlatformUserLinkRequest",
        "description": "Model for linking a platform user to the person of another platform user.\n\nThis is used to determine the \"leader\" person_id that will be the assigned to a \"follower\" platform user.\n\nThe Leader person is found using the following priority:\n\n1. If the `leader_person_id` is provided directly\n2. If the `leader_platform` and `leader_platform_user_id` are provided, the `person_id` of that platform user is used.\n3. If the `scheme` and `credentials` are provided, the person_id of the platform user of credentials is used.\n\nThe Follower platform user is found using the following priority:\n\n1. If the `follower_platform` and `follower_platform_user_id` are provided directly.\n2. If the Authorization header contains a user token, the platform and platform user id from the token are used."
      },
      "PlatformUserOperationRequest": {
        "properties": {
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Platform ID"
          },
          "platform_user_id": {
            "type": "string",
            "maxLength": 2048,
            "title": "Platform User Id",
            "description": "Platform User ID"
          }
        },
        "type": "object",
        "title": "PlatformUserOperationRequest",
        "description": "Model for doing operations on a specific platform user.  If platform/userid information is not provided, the information from the token claims will be used instead."
      },
      "PlatformUserResponse": {
        "properties": {
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Platform to search/create with"
          },
          "platform_user_id": {
            "type": "string",
            "maxLength": 2048,
            "title": "Platform User Id",
            "description": "Platform user ID to search/create with"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name",
            "description": "Platform Display name"
          },
          "player_id": {
            "type": "integer",
            "title": "Player Id",
            "description": "Player ID *DEPRECATED* use `player_uuid` instead",
            "deprecated": true
          },
          "player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Player Uuid",
            "description": "Player UUID"
          },
          "person_id": {
            "type": "string",
            "format": "uuid",
            "title": "Person Id",
            "description": "Person ID"
          },
          "active_player_id": {
            "type": "integer",
            "title": "Active Player Id",
            "description": "*DEPRECATED* use `active_player_uuid` instead.  Active player ID, if the player has an active player.",
            "deprecated": true
          },
          "active_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Active Player Uuid",
            "description": "Active player UUID, if the player has an active player."
          }
        },
        "type": "object",
        "required": [
          "platform",
          "platform_user_id",
          "player_id",
          "player_uuid",
          "person_id"
        ],
        "title": "PlatformUserResponse",
        "description": "Response for successfully creating a platform user"
      },
      "PlayerIdWrapper": {
        "properties": {
          "player_id": {
            "type": "integer",
            "title": "Player Id",
            "description": "Player ID"
          }
        },
        "type": "object",
        "required": [
          "player_id"
        ],
        "title": "PlayerIdWrapper",
        "description": "Model for getting a player ID from a player UUID"
      },
      "PlayerIterateResponse": {
        "properties": {
          "players": {
            "items": {
              "$ref": "#/components/schemas/PlayerResponse"
            },
            "type": "array",
            "title": "Players",
            "description": "List of players.  An empty list means iteration is complete",
            "default": []
          },
          "cursor": {
            "type": "string",
            "title": "Cursor",
            "description": "Cursor to continue iteration",
            "default": ""
          }
        },
        "type": "object",
        "title": "PlayerIterateResponse",
        "description": "Response from the player iteration API"
      },
      "PlayerLinkedPortalsResponse": {
        "properties": {
          "player": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerPersonResponse"
              }
            ],
            "title": "Player",
            "description": "Player info"
          },
          "linked_portals": {
            "items": {
              "$ref": "#/components/schemas/PortalUserResponse"
            },
            "type": "array",
            "title": "Linked Portals",
            "description": "List of linked portals"
          }
        },
        "type": "object",
        "required": [
          "player",
          "linked_portals"
        ],
        "title": "PlayerLinkedPortalsResponse",
        "description": "Response for getting a player's linked portals"
      },
      "PlayerPersonResponse": {
        "properties": {
          "player_id": {
            "type": "integer",
            "title": "Player Id",
            "description": "Player ID *DEPRECATED* use `player_uuid` instead",
            "deprecated": true
          },
          "player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Player Uuid",
            "description": "Player UUID"
          },
          "active_player_id": {
            "type": "integer",
            "title": "Active Player Id",
            "description": "*DEPRECATED* use `active_player_uuid` instead.  Active player ID, if the player has an active player.",
            "deprecated": true
          },
          "active_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Active Player Uuid",
            "description": "Active player UUID, if the player has an active player."
          },
          "person_id": {
            "type": "string",
            "format": "uuid",
            "title": "Person Id",
            "description": "Person ID"
          },
          "role_id": {
            "type": "string",
            "title": "Role Id",
            "description": "Role ID of the person, if available"
          }
        },
        "type": "object",
        "required": [
          "player_id",
          "player_uuid",
          "person_id"
        ],
        "title": "PlayerPersonResponse",
        "description": "Response for getting a player's info"
      },
      "PlayerResponse": {
        "properties": {
          "player_id": {
            "type": "integer",
            "title": "Player Id",
            "description": "Player ID *DEPRECATED* use `player_uuid` instead",
            "deprecated": true
          },
          "player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Player Uuid",
            "description": "Player UUID"
          }
        },
        "type": "object",
        "required": [
          "player_id",
          "player_uuid"
        ],
        "title": "PlayerResponse",
        "description": "Response for getting a player's info"
      },
      "PlayerUuidFromId": {
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid",
            "description": "Player UUID"
          }
        },
        "type": "object",
        "required": [
          "uuid"
        ],
        "title": "PlayerUuidFromId",
        "description": "Model for getting a player UUID from a player ID"
      },
      "PortalTokenDetailsGrantType": {
        "type": "string",
        "enum": [
          "ps4_v1",
          "ps4_v3",
          "ps5_v3"
        ],
        "title": "PortalTokenDetailsGrantType",
        "description": "The grant type used to authenticate the portal tokens",
        "x-enum-varnames": [
          "PS4_V1",
          "PS4_V3",
          "PS5_V3"
        ],
        "x-enum-descriptions": [
          "Playstation Network v1 auth token validated using the configured PS4 credentials",
          "Playstation Network v3 auth token validated using the configured PS4 credentials",
          "Playstation Network v3 auth token validated using the configured PS5 credentials"
        ]
      },
      "PortalTokenDetailsRequest": {
        "properties": {
          "grant_type": {
            "$ref": "#/components/schemas/PortalTokenDetailsGrantType"
          },
          "portal_access_token": {
            "type": "string",
            "title": "Portal Access Token",
            "description": "Token or secret used to authenticate the provided grant type"
          }
        },
        "type": "object",
        "required": [
          "grant_type",
          "portal_access_token"
        ],
        "title": "PortalTokenDetailsRequest"
      },
      "PortalUserInfo": {
        "properties": {
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Platform for the user"
          },
          "portal_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__schemas__Portal"
              }
            ],
            "description": "Portal ID. *DEPRECATED* use `platform` instead",
            "deprecated": true
          },
          "portal_user_id": {
            "type": "string",
            "title": "Portal User Id",
            "description": "Platform User ID"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name",
            "description": "Display name"
          },
          "device_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeviceType"
              }
            ],
            "description": "Platform-verified device type of the login"
          }
        },
        "type": "object",
        "required": [
          "platform",
          "portal_id",
          "portal_user_id",
          "display_name"
        ],
        "title": "PortalUserInfo",
        "description": "Portal user info"
      },
      "PortalUserResponse": {
        "properties": {
          "portal_user_id": {
            "type": "string",
            "title": "Portal User Id",
            "description": "Portal user ID"
          },
          "portal_id": {
            "type": "integer",
            "title": "Portal Id",
            "description": "Portal ID *DEPRECATED* use `platform` instead",
            "deprecated": true
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Platform"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name",
            "description": "Display name"
          },
          "player_id": {
            "type": "integer",
            "title": "Player Id",
            "description": "Player ID *DEPRECATED* use `player_uuid` instead",
            "deprecated": true
          },
          "player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Player Uuid",
            "description": "Player UUID"
          }
        },
        "type": "object",
        "required": [
          "portal_id",
          "platform",
          "player_id",
          "player_uuid"
        ],
        "title": "PortalUserResponse"
      },
      "PublicKey": {
        "properties": {
          "kid": {
            "type": "string",
            "title": "Kid",
            "description": "Key ID - see https://datatracker.ietf.org/doc/html/rfc7517#section-4.5"
          },
          "kty": {
            "type": "string",
            "title": "Kty",
            "description": "Key Type - see https://datatracker.ietf.org/doc/html/rfc7517#section-4.1"
          },
          "n": {
            "type": "string",
            "title": "N",
            "description": "Modulus - see https://www.rfc-editor.org/rfc/rfc7518.html#section-6.3.1"
          },
          "e": {
            "type": "string",
            "title": "E",
            "description": "Exponent - see https://www.rfc-editor.org/rfc/rfc7518.html#section-6.3.1"
          }
        },
        "type": "object",
        "required": [
          "kid",
          "kty",
          "n",
          "e"
        ],
        "title": "PublicKey",
        "description": "Public key for verifying Access Token JWTs\n\nThis is in the JWK format as defined in https://datatracker.ietf.org/doc/html/rfc7517#section-4"
      },
      "PublicKeyList": {
        "properties": {
          "keys": {
            "items": {
              "$ref": "#/components/schemas/PublicKey"
            },
            "type": "array",
            "title": "Keys",
            "description": "List of public keys for verifying Access Token JWTs"
          }
        },
        "type": "object",
        "required": [
          "keys"
        ],
        "title": "PublicKeyList",
        "description": "List of public keys for verifying Access Token JWTs.\n\nThis is in the JWK Set format as defined in https://datatracker.ietf.org/doc/html/rfc7517#section-5"
      },
      "PurgeRequest": {
        "properties": {
          "suggested_purge_time": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          }
        },
        "type": "object",
        "title": "PurgeRequest",
        "description": "Purge request to purge a person from the system.  This will remove all data about that player from the system."
      },
      "PurgeResponse": {
        "properties": {
          "person_id": {
            "type": "string",
            "format": "uuid",
            "title": "Person Id",
            "description": "Person ID that will be purged"
          },
          "purge_on": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "last_modified_on": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Status of the purge request"
          }
        },
        "type": "object",
        "required": [
          "person_id",
          "purge_on",
          "created_on",
          "last_modified_on",
          "status"
        ],
        "title": "PurgeResponse",
        "description": "Purge response from a purge request"
      },
      "Restriction": {
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RestrictionType"
              }
            ],
            "description": "Type of restriction"
          },
          "reason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RestrictionReasonCode"
              }
            ],
            "description": "Reason the restriction was applied"
          },
          "expiration": {
            "type": "string",
            "format": "date-time",
            "title": "Expiration",
            "description": "Date the restriction expires.  Null means the restriction is permanent"
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "Restriction",
        "description": "Restriction applied to a player"
      },
      "RestrictionCreate": {
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RestrictionType"
              }
            ],
            "description": "Type of restriction"
          },
          "reason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RestrictionReasonCode"
              }
            ],
            "description": "Reason the restriction was applied"
          },
          "expiration": {
            "type": "string",
            "format": "date-time",
            "title": "Expiration",
            "description": "Date the restriction expires.  Null means the restriction is permanent"
          },
          "issuer_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RestrictionIssuerType"
              }
            ],
            "description": "Type of the Issuer"
          },
          "issuer": {
            "type": "string",
            "title": "Issuer",
            "description": "The creator of the restriction"
          }
        },
        "type": "object",
        "required": [
          "type",
          "issuer_type",
          "issuer"
        ],
        "title": "RestrictionCreate",
        "description": "Restriction applied to a player"
      },
      "RestrictionIssuerType": {
        "type": "string",
        "enum": [
          "support",
          "gm",
          "admin",
          "anticheat",
          "punish_system",
          "guardian"
        ],
        "title": "RestrictionIssuerType",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "SUPPORT",
          "GM",
          "ADMIN",
          "ANTICHEAT",
          "PUNISH_SYSTEM",
          "GUARDIAN"
        ],
        "x-enum-descriptions": [
          "Support staff",
          "In-Game GM",
          "System Administrator",
          "Anti-cheat provider (see issuer for more specific information)",
          "Automated Punishment system, based on user activity",
          "User's parent/guardian"
        ]
      },
      "RestrictionReasonCode": {
        "type": "string",
        "enum": [
          "cheating_autodetected",
          "speedhack_autodetect",
          "other",
          "cheating_observed",
          "cheating_reported_by_player",
          "threats",
          "language",
          "griefing",
          "fraud",
          "revoke_failed",
          "unknown",
          "guardian",
          "issuer_process",
          "account_migration",
          "user_request",
          "maintenance",
          "pending_deletion"
        ],
        "title": "RestrictionReasonCode",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "CHEATING_AUTODETECTED",
          "SPEEDHACK_AUTODETECT",
          "OTHER",
          "CHEATING_OBSERVED",
          "CHEATING_REPORTED_BY_PLAYER",
          "THREATS",
          "LANGUAGE",
          "GRIEFING",
          "FRAUD",
          "REVOKE_FAILED",
          "UNKNOWN",
          "GUARDIAN",
          "ISSUER_PROCESS",
          "ACCOUNT_MIGRATION",
          "USER_REQUEST",
          "MAINTENANCE",
          "PENDING_DELETION"
        ],
        "x-enum-descriptions": [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ]
      },
      "RestrictionType": {
        "type": "string",
        "enum": [
          "account_ban",
          "account_lockout",
          "account_pending_deletion",
          "account_deny_auth"
        ],
        "title": "RestrictionType",
        "description": "Restrictions that can be applied to a player. Resitrictions are applied to a player by an admin and often types indicates that the player is banned.",
        "x-enum-varnames": [
          "ACCOUNT_BAN",
          "ACCOUNT_LOCKOUT",
          "ACCOUNT_PENDING_DELETION",
          "ACCOUNT_DENY_AUTH"
        ],
        "x-enum-descriptions": [
          "Account is banned.  User is not allowed to login",
          "Account is locked out.  User is not allowed to login",
          "Account is pending deletion and will be deleted in the future.  User is not allowed to login",
          "Account has been banned from authentication.  User is not allowed to login"
        ]
      },
      "Restrictions": {
        "properties": {
          "restrictions": {
            "items": {
              "$ref": "#/components/schemas/Restriction"
            },
            "type": "array",
            "title": "Restrictions",
            "description": "List of restrictions applied to a user",
            "default": []
          }
        },
        "type": "object",
        "title": "Restrictions",
        "description": "List of restrictions applied to a user"
      },
      "Role": {
        "properties": {
          "role_id": {
            "type": "string",
            "title": "Role Id",
            "description": "Unique Role ID"
          },
          "legacy_role_id": {
            "type": "integer",
            "title": "Legacy Role Id",
            "description": "Legacy role ID",
            "default": 0
          },
          "custom_data": {
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data for the role",
            "default": {}
          },
          "auth_bypass": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoleAuthBypass"
              }
            ],
            "description": "Level of auth bypass for limited/locked modes",
            "default": "none"
          },
          "login_loot_rewards": {
            "items": {
              "$ref": "#/components/schemas/LoginLootReward"
            },
            "type": "array",
            "title": "Login Loot Rewards",
            "description": "List of loot ids that are fulfilled for the player when they begin a new inventory session",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "role_id"
        ],
        "title": "Role",
        "description": "Role object that is used to define a role for a player"
      },
      "RoleAuthBypass": {
        "type": "string",
        "enum": [
          "none",
          "limited",
          "locked"
        ],
        "title": "RoleAuthBypass",
        "description": "Role auth bypass options",
        "x-enum-varnames": [
          "NONE",
          "LIMITED",
          "LOCKED"
        ],
        "x-enum-descriptions": [
          "Does not bypass any auth states",
          "Allow bypass of the limited auth state",
          "Auth bypass for the limited and locked auth states"
        ]
      },
      "TokenRequest": {
        "properties": {
          "grant_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OAuthGrantType"
              }
            ],
            "description": "OAuth2 grant type"
          }
        },
        "type": "object",
        "required": [
          "grant_type"
        ],
        "title": "TokenRequest",
        "description": "OAuth2 Token Request"
      },
      "TokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token",
            "description": "Result access token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "description": "Result token type"
          },
          "refresh_token": {
            "type": "string",
            "title": "Refresh Token",
            "description": "Result refresh token that can be used to get new access tokens"
          },
          "expires_in": {
            "type": "integer",
            "title": "Expires In",
            "description": "Result access token expiration time in seconds"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "token_type",
          "expires_in"
        ],
        "title": "TokenResponse",
        "description": "OAuth2 Token Response"
      },
      "UpdatePersonInfoRequest": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email",
            "description": "Email address to update to"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "UpdatePersonInfoRequest",
        "description": "Request to update a person's info"
      },
      "UserLinkHistory": {
        "properties": {
          "entries": {
            "items": {
              "$ref": "#/components/schemas/UserLinkHistoryEntry"
            },
            "type": "array",
            "title": "Entries",
            "description": "The link history entries"
          },
          "continuation_token": {
            "type": "string",
            "title": "Continuation Token",
            "description": "Token to retrieve the next page of results"
          }
        },
        "type": "object",
        "required": [
          "entries"
        ],
        "title": "UserLinkHistory"
      },
      "UserLinkHistoryEntry": {
        "properties": {
          "entry_id": {
            "type": "string",
            "title": "Entry Id",
            "description": "entry ID"
          },
          "player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Player Uuid",
            "description": "player UUID"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "platform"
          },
          "platform_user_id": {
            "type": "string",
            "maxLength": 2048,
            "title": "Platform User Id",
            "description": "platform user ID"
          },
          "person_id": {
            "type": "string",
            "format": "uuid",
            "title": "Person Id",
            "description": "person ID"
          },
          "active_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Active Player Uuid",
            "description": "active player UUID"
          },
          "action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkAction"
              }
            ],
            "description": "action"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          }
        },
        "type": "object",
        "required": [
          "action"
        ],
        "title": "UserLinkHistoryEntry"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "dependencies__schemas__Portal": {
        "type": "integer",
        "enum": [
          2,
          4,
          5,
          9,
          10,
          11,
          13,
          14,
          16,
          22,
          24,
          26,
          27,
          28,
          33
        ],
        "title": "Portal",
        "description": "Portals a.k.a platforms that a player can be linked/authenticated with",
        "x-enum-varnames": [
          "ANON",
          "AMAZON",
          "STEAM",
          "PSN",
          "XBOXLIVE",
          "BASIC",
          "GOOGLE",
          "RALLYHERE",
          "TWITCH",
          "NINTENDO_SWITCH",
          "APPLE",
          "NINTENDO",
          "LEGACYNAME",
          "EPIC",
          "NINTENDO_PPID"
        ],
        "x-enum-descriptions": [
          "Anonymous portal used for testing. This is not intended to be used by real players.",
          "Amazon portal",
          "Steam portal",
          "Playstation Network portal",
          "Xbox Live portal",
          "Basic portal",
          "Google portal",
          "RallyHere Developer portal",
          "Twitch portal",
          "Nintendo Switch portal",
          "Apple portal",
          "Nintendo portal",
          "Legacy name portal",
          "Epic portal",
          "Nintendo PPID portal"
        ]
      },
      "fastapicommon__platforms__Portal": {
        "type": "integer",
        "enum": [
          -2,
          -1,
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33
        ],
        "title": "Portal",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "FREE",
          "SWEAT",
          "UNKNOWN",
          "STANDARD",
          "ANON",
          "KONGREGATE",
          "AMAZON",
          "STEAM",
          "TCLS",
          "LEVELUP_LATAM",
          "LEVELUP_BRA",
          "PSN",
          "XBOX_LIVE",
          "BASIC",
          "FACEBOOK",
          "GOOGLE",
          "RALLYHERE",
          "RIVALS_MOBILE",
          "TWITCH",
          "PALADINS_STRIKE",
          "SMITE_BLITZ",
          "FACEBOOK_SMITE",
          "FACEBOOK_PALADINS",
          "FACEBOOK_HOTG",
          "NINTENDO_SWITCH",
          "TUNE",
          "APPLE",
          "DISCORD",
          "NINTENDO",
          "LEGACYNAME",
          "EPIC",
          "FORTE",
          "SIMULMEDIA",
          "LUNA",
          "GOOGLE_PLAY",
          "NINTENDO_PPID"
        ],
        "x-enum-descriptions": [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ]
      }
    },
    "securitySchemes": {
      "HTTPBasic": {
        "type": "http",
        "scheme": "basic"
      },
      "HTTPBearerHeadersOrCookie": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "Auth",
      "description": "RallyHere Authentication API\n\nThis API is used by clients to retrieve an access token to be used when accessing other RallyHere APIs.\n\n## User-based Client Logins\n\nThe /v1/login endpoint supports user-based authentication for a variety of platforms by \"wrapping\" a user's platform\naccess token using a multi-step process:\n\n1. The client must authenticate the user and retrieve an access token for their respective platform.\n2. The client must subsequently authenticate the user using the /v1/login endpoint by setting the `grant_type` to the\nappropriate platform, and setting the `portal_access_token` to the access token retrieved above, which will return a\nnew access token to be used for RallyHere APIs.\n\n## OAuth\n\n### Version 1\n\nThe /v1/oauth endpoints support user-based client authentication for a variety of different platforms, utilizing secure\nredirects to third-party authentication URLs. The OAuth flow allows authentication to the RallyHere APIs without the use\nof a game client.\n\n### Version 2\n\nCurrently, the /v2/oauth endpoints only support a `grant_type` value of `client_credentials`, for the purposes of\nuser-less client authentication, utilizing Basic authentication containing a RallyHere client ID and client secret. This\ntype of authentication enables trusted clients (such as backend game instances) to access the RallyHere APIs without\nuser-specific authentication.\n\nThe /v2/oauth endpoint will be updated in the future to include user-based authentication modes.\n\n"
    },
    {
      "name": "Users",
      "description": "User Endpoints to query user information, search for users, purge users (for GDPR or other delete reasons), and update linking/cross-progresion status for users."
    }
  ]
}
