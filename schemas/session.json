{
  "openapi": "3.1.0",
  "info": {
    "title": "session-api",
    "description": "Hi-Rez Studios session-api.",
    "version": "0.2.0"
  },
  "servers": [
    {
      "url": "/session"
    }
  ],
  "paths": {
    "/v1/template": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get All Session Templates",
        "description": "Get the config about all session templates\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:config`\n\n\n\nRequired Session Permissions: None",
        "operationId": "get_all_session_templates",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionTemplates"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/template/{session_type}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Session Template By Type",
        "description": "Get config about a session template by ID\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:config`\n\n\n\nRequired Session Permissions: None",
        "operationId": "get_session_template_by_type",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Type"
            },
            "name": "session_type",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionTemplate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/browser": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Browser Sessions By Type",
        "description": "Get all public sessions of a specific type\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:browser`\n\n\n\nRequired Permissions: None",
        "operationId": "get_browser_sessions_by_type",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Type"
            },
            "name": "session_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0.0,
              "title": "Cursor",
              "default": 0
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50.0,
              "minimum": 1.0,
              "title": "Page Size",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Region Id"
            },
            "name": "region_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create Or Join Session",
        "description": "Join the first publicly available session of given type. If there is no public session, and the session type\npermits player made sessions, create a new session and put the player in it\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:create`\n\n\n\nRequired Session Permissions: None",
        "operationId": "create_or_join_session",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrJoinRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionJoinResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Session By Id",
        "description": "Get Session by ID. This request will return limited results for non-members of the session, such as excluding info for \nhow to connect to the instance. Elevated permissions can bypass that restriction\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:any`, `session:read:self`\n\n\n\nRequired Session Permissions: None for limited results. `SessionPermissions.active_in_session` to get complete results for users who do not have the `session:read:any` auth permission",
        "operationId": "get_session_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Delete Session",
        "description": "Delete this session. It will be removed from the public browser, matchmaking, and backfills before being deleted\n\nFor all sessions:\n\n* Required auth permissions are any of: `session:*`, `session:delete:any`\n\n* Required session permissions are None\n\nFor sessions you are actively in:\n\n* Required auth permissions are any of: `session:*`, `session:delete:active`\n\n* Required session permissions are `SessionPermissions.session_admin`\n\nFor sessions you are an admin in:\n\n* None",
        "operationId": "delete_session",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Session By Id",
        "description": "Update session info by session id\n\nFor all sessions:\n\n* Required auth permissions are any of: `session:*`, `session:update:any`\n\n* Required session permissions are None\n\nFor sessions you are actively in:\n\n* Required auth permissions are any of: `session:*`, `session:update:any`, `session:update:self`\n\n* Required session permissions are `SessionPermissions.session_admin`",
        "operationId": "update_session_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}:generate-short-code": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Generate Session Short Code",
        "description": "Create a short code for a session that can be used in place of the full session id. Generation may fail and return an\nerror if too many unusable codes are generated.\n\nFor all sessions:\n\n* Required auth permissions are any of: `session:*`, `session:shortcode:any`\n\n* Required session permissions are None\n\nFor sessions you are actively in:\n\n* Required auth permissions are : `session:shortcode:active`\n\n* Required session permissions are `SessionPermissions.active_in_session`",
        "operationId": "generate_session_short_code",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionShortCodeResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/team/{team_id}": {
      "patch": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Team By Id",
        "description": "Update specific team info by session and team id\n\nFor all sessions:\n\n* Required auth permissions are any of: `session:*`, `session:update:any`\n\n* Required session permissions are None\n\nFor sessions you are actively in:\n\n* Required auth permissions are any of: `session:*`, `session:update:any`, `session:update:self`\n\n* Required session permissions are `SessionPermissions.session_admin`",
        "operationId": "update_team_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0.0,
              "title": "Team Id"
            },
            "name": "team_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionTeam"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/allocation/{allocation_id}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Session By Allocation Id",
        "description": "Get session by allocation ID. Returns the same limited results as getting the session by session id\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:allocation`\n\n\n\nRequired Session Permissions: None",
        "operationId": "get_session_by_allocation_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Allocation Id"
            },
            "name": "allocation_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/browser": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Post Browser Info",
        "description": "Register session in the public browser\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update:browser`\n\n\n\nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:*` auth permission",
        "operationId": "post_browser_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrowserInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowserInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Delete Browser Info",
        "description": "Delete the session from the public browser\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update:browser`\n\n\n\nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:*` auth permission",
        "operationId": "delete_browser_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Browser Info",
        "description": "Update the browser info for the session\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update:browser`\n\n\n\nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:*` auth permission",
        "operationId": "update_browser_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrowserInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowserInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/connection-info": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Connection Info Self",
        "description": "Get public connection info for self\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:config`\n\n\n\nRequired Permissions: None",
        "operationId": "get_connection_info_self",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "X-Forwarded-For",
              "default": ""
            },
            "name": "x-forwarded-for",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/queue": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Join Queue",
        "description": "Add session to a matchmaking queue\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update:any`, `session:update:self`\n\n\n\nRequired Session Permissions: `SessionPermissions.session_admin`",
        "operationId": "join_queue",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueueJoinRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueJoinResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Leave Queue",
        "description": "Remove session from a matchmaking queue\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update:any`, `session:update:self`\n\n\n               \nRequired Session Permissions: `SessionPermissions.session_admin`",
        "operationId": "leave_queue",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DeleteTicketReason"
                }
              ],
              "default": "left_queue"
            },
            "name": "reason",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/match-made-session": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create Matchmade Session",
        "description": "Create a match session based on matchmaking results.\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:create:matchmade`\n\n\n\nRequired Session Permissions: None",
        "operationId": "create_matchmade_session",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingSessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/instance": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create Instance Request",
        "description": "Request an instance be spawned for the session, or register self as a host of the instance\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update:any`, `session:update:self`\n\n\n\nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:update:any` auth permission",
        "operationId": "create_instance_request",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "End Instance",
        "description": "Unregister the instance from the session.\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update:any`, `session:update:self`\n\n\n\nRequired Session Permissions: `SessionPermissions.session_host` if user does not have the `session:update:any` auth permission",
        "operationId": "end_instance",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Instance Info",
        "description": "Update info about the instance. If the instance was a result of the instance allocation system, then it will have an allocation id.\nAllocated instances must send their allocation id for updates to ensure they are still the proper allocation.\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update:any`, `session:update:self`\n\n\n\nRequired Session Permissions: `SessionPermissions.session_host` if user does not have the `session:update:any` auth permission",
        "operationId": "update_instance_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceInfoUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/instance/health": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Instance Health Check",
        "description": "Endpoint to post health status of an instance\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:instance:health`\n\n\n\nsession:instance:health",
        "operationId": "instance_health_check",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceHealthStatusUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceHealthStatusResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/instance/health/config": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Instance Health Config",
        "description": "Get config about expected poll rates for instance health, and when instances will go missing/unhealthy\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:config`",
        "operationId": "instance_health_config",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceHealthSettingsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/platform/{platform}/platform-session/{platform_session_id_base64}/session/{session_id}": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Add Platform Session To Rally Here Session",
        "description": "Add a platform session to an existing RallyHere session. The requesting player will be added to the platform session\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update:platform`\n\n\n\nRequired Session Permissions: `SessionPermissions.active_in_session` for users that do not have the `session:update:any` auth permission",
        "operationId": "add_platform_session_to_rally_here_session",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1,
              "title": "Platform Session Id Base64"
            },
            "name": "platform_session_id_base64",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSession"
                }
              }
            }
          },
          "403": {
            "description": "User is not authenticated, or does not have sufficient role access to perform request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Platform Session or Platform Player doesn't exist.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Delete Platform Session From Rally Here Session",
        "description": "Remove a platform session from a Rally Here session\n               \nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update:platform`\n\n\n\nRequired Session Permissions: `SessionPermissions.active_in_session` for users that do not have the `session:update:any` auth permission",
        "operationId": "delete_platform_session_from_rally_here_session",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1,
              "title": "Platform Session Id Base64"
            },
            "name": "platform_session_id_base64",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "User is not authenticated, or does not have sufficient role access to perform request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Platform Session or Platform Player doesn't exist.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/platform/{platform}/platform-session/{platform_session_id_base64}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Platform Session Info",
        "description": "Get information about a platform session\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:platform`\n\n\n\nRequired Session Permissions: `SessionPermissions.active_in_session` for users that do not have the `session:read:any` auth permission",
        "operationId": "get_platform_session_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1,
              "title": "Platform Session Id Base64"
            },
            "name": "platform_session_id_base64",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSession"
                }
              }
            }
          },
          "403": {
            "description": "User is not authenticated, or does not have sufficient role access to perform request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Platform Session or Platform Player doesn't exist.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/platform/{platform}/platform-session/{platform_session_id_base64}/player/me": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Join Session By Platform Session Id Self",
        "description": "Join a platform session by ID, and the parent session\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update-player:any`\n\n- For the player themselves : `session:update-player:self`\n\nRequired Session Permissions: None",
        "operationId": "join_session_by_platform_session_id_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1,
              "title": "Platform Session Id Base64"
            },
            "name": "platform_session_id_base64",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            },
            "name": "platform",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelfSessionPlayerUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "403": {
            "description": "User is not authenticated, or does not have sufficient role access to perform request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Platform Session or Platform Player doesn't exist.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Leave Session By Platform Session Self",
        "description": "Leave a platform session by platform ID and parent platform session id\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update-player:any`\n\n- For the player themselves : `session:update-player:self`\n\nRequired Session Permissions: None",
        "operationId": "leave_session_by_platform_session_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1,
              "title": "Platform Session Id Base64"
            },
            "name": "platform_session_id_base64",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            },
            "name": "platform",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "User is not authenticated, or does not have sufficient role access to perform request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Platform Session or Platform Player doesn't exist.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/platform/{platform}/platform-session/{platform_session_id_base64}/player/{player_uuid}": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Join Session By Platform Session By Uuid",
        "description": "Join a platform session by platform ID and parent platform session id\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update-player:any`\n\n- For the player themselves : `session:update-player:self`\n\nRequired Session Permissions: None",
        "operationId": "join_session_by_platform_session_by_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1,
              "title": "Platform Session Id Base64"
            },
            "name": "platform_session_id_base64",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            },
            "name": "platform",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelfSessionPlayerUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "403": {
            "description": "User is not authenticated, or does not have sufficient role access to perform request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Platform Session or Platform Player doesn't exist.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Leave Session By Platform Session By Uuid",
        "description": "Leave a platform session by platform ID and parent platform session id\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update-player:any`\n\n- For the player themselves : `session:update-player:self`\n\nRequired Session Permissions: None",
        "operationId": "leave_session_by_platform_session_by_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1,
              "title": "Platform Session Id Base64"
            },
            "name": "platform_session_id_base64",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "User is not authenticated, or does not have sufficient role access to perform request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Platform Session or Platform Player doesn't exist.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/player/{player_uuid}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Player In Session",
        "description": "Get a specific player from a session by id.\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:any`, `session:read:self`\n\n\n\nRequired Session Permissions: None",
        "operationId": "get_player_in_session",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPlayer"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Session Player By Uuid V2",
        "description": "Add or invite a player to the session, or change the status of a player already in the session\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:promote:any`, `session:promote:self`\n\n\n\nRequired Session Permissions: None if session is publicly joinable or the player has been invited. \n`SessionPermissions.session_admin` for other operations\n\n**DEPRECATED** - Use the appropriate move, invite, promote, or update V2 endpoint instead",
        "operationId": "update_session_player_by_uuid_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionPlayerUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPlayerUpdateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Kick Player From Session By Uuid V2",
        "description": "Kick or Remove a player from a session, or cancel an invite for a player to the session\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update-player:any`\n\n- For the player themselves : `session:update-player:self`\n\nRequired Session Permissions: None for users operating on themselves. \nRequired Session Permissions: `kick` for users that do not have the above permissions, and are not a session admin",
        "operationId": "kick_player_from_session_by_uuid_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Reason"
            },
            "name": "reason",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/player": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Players In Session",
        "description": "Get a page of players in a specific session.\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:any`, `session:read:self`\n\n\n\nRequired Session Permissions: None",
        "operationId": "get_players_in_session",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0.0,
              "title": "Cursor",
              "default": 0
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50.0,
              "minimum": 1.0,
              "title": "Page Size",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedPlayersResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/player/me": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Join Session By Id Self",
        "description": "Join a session with currently authed player\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update-player:any`\n\n- For the player themselves : `session:update-player:self`\n\nRequired Session Permissions: None",
        "operationId": "join_session_by_id_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelfSessionPlayerUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPlayerUpdateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Leave Session By Id Self",
        "description": "Leave a session with currently authed player\n\nRequired Permissions:\n\n- For any player (including themselves) : `session:*`\n\n- For the player themselves : `session:update:self`\n\nRequired Permissions: None",
        "operationId": "leave_session_by_id_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Reason"
            },
            "name": "reason",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/player/{player_uuid}/permission": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Player Permission By Uuid",
        "description": "Get a specific player's intra-session permissions\n\nFor all sessions:\n\n* Required auth permissions are any of: `session:*`, `session:read:permission:any`\n\n* Required session permissions are None\n\nFor sessions you are actively in:\n\n* Required auth permissions are any of: `session:*`, `session:read:permission:active`\n\n* Required session permissions are `SessionPermissions.active_in_session`\n\nFor sessions you are an admin in:\n\n* None",
        "operationId": "get_player_permission_by_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPermissions"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/player/{player_uuid}/permission/{permission}": {
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Remove Player Permission By Uuid",
        "description": "Remove intra-session permissions from a specific player\n\nFor all sessions:\n\n* Required auth permissions are any of: `session:*`, `session:remove:permission:any`\n\n* Required session permissions are None\n\nFor sessions you are actively in:\n\n* Required auth permissions are any of: `session:*`, `session:remove:permission:active`\n\n* Required session permissions are `SessionPermissions.active_in_session`\n\nFor sessions you are an admin in:\n\n* None",
        "operationId": "remove_player_permission_by_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntraSessionPermissions"
            },
            "name": "permission",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Sessions"
        ],
        "summary": "Give Player Permission By Uuid",
        "description": "Give a specific player intra-session permissions\n\nFor all sessions:\n\n* Required auth permissions are any of: `session:*`, `session:give:permission:any`\n\n* Required session permissions are None\n\nFor sessions you are actively in:\n\n* Required auth permissions are any of: `session:*`, `session:give:permission:active`\n\n* Required session permissions are `SessionPermissions.active_in_session`\n\nFor sessions you are an admin in:\n\n* None",
        "operationId": "give_player_permission_by_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntraSessionPermissions"
            },
            "name": "permission",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPermissions"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/session/{session_id}/player/{player_uuid}:invite": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Invite Player By Uuid V2",
        "description": "Invite a player to the session\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update:any`, `session:update:self`\n\n\n\nRequired Session Permissions: `invite` for users that do not have the above permissions, and are not a session admin",
        "operationId": "invite_player_by_uuid_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerInviteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPlayerUpdateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/session/{session_id}/player/{player_uuid}:promote": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Promote Player By Uuid V2",
        "description": "Invite a player to the session\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:promote:any`, `session:promote:self`\n\n\n\nRequired Session Permissions: `SessionPermissions.session_admin` for users that do not have the `session:promote:any` auth permission",
        "operationId": "promote_player_by_uuid_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPlayerUpdateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/session/{session_id}/player/{player_uuid}:move": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Move Player By Uuid V2",
        "description": "Move a specific player to a different team in a specific session\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update-player:any`\n\n- For the player themselves : `session:update-player:self`\n\nRequired Session Permissions: `move` for users that do not have the above permissions, and are not a session admin",
        "operationId": "move_player_by_uuid_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerMoveRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPlayerUpdateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/session/{session_id}/player/{player_uuid}": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Player By Uuid V2",
        "description": "Update data about a specific player in a specific session\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update-player:any`\n\n- For the player themselves : `session:update-player:self`\n\nRequired Session Permissions: `SessionPermissions.session_admin` for users that do not have the `session:promote:any` auth permission",
        "operationId": "update_player_by_uuid_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPlayerUpdateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/player/uuid/{player_uuid}": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Session Player By Uuid",
        "description": "Add or invite a player to the session, or change the status of a player already in the session\n\nTo promote players\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:promote:any`, `session:promote:self`\n\n\n\nTo invite players\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update-player:any`\n\n- For the player themselves : `session:update-player:self`\nRequired Session Permissions: `invite` for users that do not have the above permissions, and are not a session admin\n\nTo move players\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update-player:any`\n\n- For the player themselves : `session:update-player:self`\nRequired Session Permissions: `move` for users that do not have the above permissions, and are not a session admin\n\nFor all else\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update-player:any`\n\n- For the player themselves : `session:update-player:self`\n\nRequired Session Permissions: None if session is publicly joinable or the player has been invited. \n`SessionPermissions.session_admin` for other operations\n**DEPRECATED** - Use player/{player_uuid} endpoint instead",
        "operationId": "update_session_player_by_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionPlayerUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPlayerUpdateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Kick Player From Session By Uuid",
        "description": "Kick or Remove a player from a session, or cancel an invite for a player to the session\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update-player:any`\n\n- For the player themselves : `session:update-player:self`\n\nRequired Session Permissions: `kick` for users that do not have the above permissions, and are not a session admin\n**DEPRECATED** - Use player/{player_uuid} endpoint instead",
        "operationId": "kick_player_from_session_by_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Reason"
            },
            "name": "reason",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/player/id/{player_id}": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Session Player By Id",
        "description": "Add or invite a player to the session, or change the status of a player already in the session\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:promote:any`, `session:promote:self`\n\n\n\nRequired Session Permissions: None if session is publicly joinable or the player has been invited.\n`SessionPermissions.session_admin` for other operations\n\n**DEPRECATED** - Use the player endpoint instead",
        "operationId": "update_session_player_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Player Id"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionPlayerUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPlayerUpdateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Kick Player From Session By Id",
        "description": "Kick or Remove a player from a session, or cancel an invite for a player to the session\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update-player:any`\n\n- For the player themselves : `session:update-player:self`\n\nRequired Session Permissions: None for players operating on themselves.\nRequired Session Permissions: `kick` for users that do not have the above permissions, and are not a session admin\n**DEPRECATED** - Use the player endpoint instead",
        "operationId": "kick_player_from_session_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Player Id"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Reason"
            },
            "name": "reason",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/me/session": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Player Sessions Self",
        "description": "Get all session IDs associated with the token's player.  NOTE This list is eventually consistent with the data from the session by ID endpoints.\n\nRequired Auth Permissions: `session:read-player:self`\n\nRequired Session Permissions: None",
        "operationId": "get_player_sessions_self",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerSessions"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_uuid}/session": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Player Sessions By Uuid V2",
        "description": "Get all session IDs associated with a player.  NOTE This list is eventually consistent with the data from the session by ID endpoints.\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read-player:any`\n\n- For the player themselves : `session:read-player:self`\n\nRequired Session Permissions: None",
        "operationId": "get_player_sessions_by_uuid_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerSessions"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/uuid/{player_uuid}/session": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Player Sessions By Uuid",
        "description": "Get all session IDs associated with a player.  NOTE This list is eventually consistent with the data from the session by ID endpoints.\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read-player:any`\n\n- For the player themselves : `session:read-player:self`\n\nRequired Session Permissions: None\n**DEPRECATED** - Use /v1/player/{player_uuid}/session endpoint instead",
        "operationId": "get_player_sessions_by_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerSessions"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/id/{player_id}/session": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Player Sessions",
        "description": "Get all session IDs associated with a player.  NOTE This list is eventually consistent with the data from the session by ID endpoints.\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read-player:any`\n\n- For the player themselves : `session:read-player:self`\n\nRequired Session Permissions: None\n\n**DEPRECATED** - Use player endpoint instead",
        "operationId": "get_player_sessions",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Player Id"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerSessions"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/player:swap": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Swap Players In Session",
        "description": "Swap two players on different teams. Leaders cannot be swapped\n\nFor all sessions:\n\n* Required auth permissions are any of: `session:*`, `session:update:any`\n\n* Required session permissions are None\n\nFor sessions you are actively in:\n\n* Required auth permissions are any of: `session:*`, `session:update:any`, `session:update:self`\n\n* Required session permissions are `SessionPermissions.session_admin`",
        "operationId": "swap_players_in_session",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerSwapRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPlayersUpdateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/backfill/config": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Backfill Config",
        "description": "Get config about how often backfill heartbeats must be sent in order to prevent the backfill resource from being deleted\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:config`",
        "operationId": "backfill_config",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackfillSettingsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/backfill/session/{session_id}": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Acknowledge Backfill Request",
        "description": "Acknowledge a backfill request, and keep it alive. If an acknowledgment is missed, open-match will delete the backfill object",
        "operationId": "acknowledge_backfill_request",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcknowledgeBackfillRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcknowledgeBackfillResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Backfill resource could not be found on the session, or in the open-match system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Delete Backfill Request",
        "description": "Manually delete the backfill associated with this session",
        "operationId": "delete_backfill_request",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseBackfillRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Backfill resource could not be found on the session, or in the open-match system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Backfill Request",
        "description": "Update a existing backfill's search fields and extensions",
        "operationId": "update_backfill_request",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBackfillRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Backfill resource could not be found on the session, or in the open-match system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/invited-session/{invited_session_id}:invite": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Invite Session To Session",
        "description": "Invite an entire session to a target session\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update-player:any`\n\n to invite any session regardless of membership status\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update-player:any`, `session:update-player:self`\n\n to invite a session you are part of\n\nRequired Session Permissions: None",
        "operationId": "invite_session_to_session",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Invited Session Id"
            },
            "name": "invited_session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerInviteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInviteResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/kicked-session/{kicked_session_id}": {
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Kick Session From Session",
        "description": "Remove players from a session, `{kicked_session_id}`, if they are also in the session `{session_id}`\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:update-player:any`\n\n to kick any session regardless of membership status\n\nRequired Permissions:\n\n- For any player (including themselves) : `session:update-player:as-leader`\n\n to invite a session you are part of\n\nRequired Session Permissions: `SessionPermissions.session_admin",
        "operationId": "kick_session_from_session",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Kicked Session Id"
            },
            "name": "kicked_session_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/queues": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get All Queue Info",
        "description": "Get all the available and active queues that sessions can try to join\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:config`\n\n\n\nRequired Session Permissions: None\n**DEPRECATED** - Use the V2 endpoint instead",
        "operationId": "get_all_queue_info",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0.0,
              "title": "Cursor",
              "default": 0
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50.0,
              "minimum": 1.0,
              "title": "Page Size",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueuesResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/queues": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get All Queue Info V2",
        "description": "Get all the available and active queues that sessions can try to join\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:config`\n\n\n\nRequired Session Permissions: None",
        "operationId": "get_all_queue_info_v2",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0.0,
              "title": "Cursor",
              "default": 0
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50.0,
              "minimum": 1.0,
              "title": "Page Size",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueuesResponseV2"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/instance-launch-templates/{instance_launch_template_id}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get All Map Game Info",
        "description": "Get the config used to launch an instance by the launch template id. Launch template ID can be found in\nMatchMakingProfiles that are return by the `/v1/match-making-templates/` endpoint\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:config`\n\n\n\nRequired Session Permissions: None\n**DEPRECATED** - Use the /v1/instance-request-template endpoint instead. This endpoint does not support loading data from the developer-portal",
        "operationId": "get_all_map_game_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Instance Launch Template Id"
            },
            "name": "instance_launch_template_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceLaunchTemplate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/instance-request-template/{instance_request_template_id}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Instance Request Template",
        "description": "Get the config used to request an instance by the InstanceRequestTemplate ID. This ID can be found in\nMatchMakingProfiles that are return by the `/v1/match-making-templates/` endpoint\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:config`\n\n\n\nRequired Session Permissions: None",
        "operationId": "get_instance_request_template",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Instance Request Template Id"
            },
            "name": "instance_request_template_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceRequestTemplate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/match-making-templates/{template_group_id}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Match Making Templates",
        "description": "Get match making templates, rules, and profiles for a template group. Groups can be found on the queue information\nfrom the `queues` config endpoints\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:config`\n\n\n            \nRequired Session Permissions: None\n**DEPRECATED** Use the V2 endpoint instead",
        "operationId": "get_match_making_templates",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Template Group Id"
            },
            "name": "template_group_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingTemplateGroup"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/match-making-profile/{match_making_profile_id}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Match Making Profile",
        "description": "Get info about a specific match making profile\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:config`\n\n\n\nRequired Session Permissions: None\n**DEPRECATED** Use the V2 endpoint instead",
        "operationId": "get_match_making_profile",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Match Making Profile Id"
            },
            "name": "match_making_profile_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingProfile"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/match-making-profile/{match_making_profile_id}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Match Making Profile V2",
        "description": "Get info about a specific match making profile\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:config`\n\n\n\nRequired Session Permissions: None",
        "operationId": "get_match_making_profile_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Match Making Profile Id"
            },
            "name": "match_making_profile_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingProfileV2"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/match-making-templates/{template_group_id}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Match Making Templates V2",
        "description": "Get match making templates, rules, and profiles for a template group. Groups can be found on the queue information\nfrom the `queues` config endpoints\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:config`\n\n\n\nRequired Session Permissions: None\n**DEPRECATED** Use the V2 endpoint instead",
        "operationId": "get_match_making_templates_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Template Group Id"
            },
            "name": "template_group_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingTemplateGroupV2"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/regions": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get All Regions",
        "description": "Get all of the enabled regions and their configuration\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:read:config`\n\n\n\nRequired Session Permissions: None",
        "operationId": "get_all_regions",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0.0,
              "title": "Cursor",
              "default": 0
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50.0,
              "minimum": 1.0,
              "title": "Page Size",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegionsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/audit": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Session Audit",
        "description": "Get all audit events for a specific session or player. Empty list means there is no audit history.\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session-audit:read:all`, `session:*`\n\n for all sessions\n\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session-audit:read:self`, `session:*`\n\n for sessions you are a member of\n\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session-player-audit:read:all`, `session:*`\n\n to read audit information about any player\n\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session-player-audit:read:self`, `session:*`\n\n to read audit information about yourself",
        "operationId": "get_session_audit",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0.0,
              "title": "Page Num",
              "default": 0
            },
            "name": "page_num",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50.0,
              "minimum": 1.0,
              "title": "Page Size",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Time Zone Aware Datetime",
              "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Time Zone Aware Datetime",
              "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
            },
            "name": "end_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create Session Audit",
        "description": "Create an audit event in the log for this session.\nInternal session operations will create new events that are accessible from the get request.\n\nPlayer clients and instances are expected to create events here when something occurs on their clients that is\nrelevant. Customer created events will be prepended with 'customer.'\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session-audit:update:all`, `session:*`\n\n\n\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session-audit:update:self`, `session:*`\n\n for sessions you are a member of\n\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session-player-audit:update:all`, `session:*`\n\n to read audit information about any player\n\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session-player-audit:update:self`, `session:*`\n\n to read audit information about yourself",
        "operationId": "create_session_audit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAuditRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/voip/vivox:login": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Vivox Login Token",
        "description": "Generate a token to login with vivox\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:vivox:login`",
        "operationId": "get_vivox_login_token",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoipTokenResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/player/me/voip/vivox:{vivox_action}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Vivox Action Token Me",
        "description": "Generate a token for one of the specific vivox actions except logging in\n\n`JOIN` Required Permissions:\n\n- For the player themselves : `session:vivox:join`\n\n`JOIN_MUTED` Required Permissions:\n\n- For the player themselves : `session:vivox:join_muted`\n\n`KICK` Required Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:vivox:kick:all`\n\n- For the player themselves : `session:vivox:kick:self`\n\nor be leader of session and have Required Permissions:\n\n- For any player (including themselves) : `session:vivox:kick:as-leader`\n\n\n\n`MUTE` Required Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:vivox:mute:all`\n\n- For the player themselves : `session:vivox:mute:self`\n\nor be leader of session and have Required Permissions:\n\n- For any player (including themselves) : `session:vivox:kick:as-leader`\n\n\n\n`TRANSCRIBE` Required Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:vivox:transcribe:any`\n\n- For the player themselves : `session:vivox:transcribe:as-member`",
        "operationId": "get_vivox_action_token_me",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VivoxSessionActionSingle"
            },
            "name": "vivox_action",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VoipSessionType"
            },
            "name": "voip_session_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoipTokenResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/player/{player_uuid}/voip/vivox:{vivox_action}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Vivox Action Token",
        "description": "Generate a token for one of the specific vivox actions except logging in\n\n`JOIN` Required Permissions:\n\n- For the player themselves : `session:vivox:join`\n\n`JOIN_MUTED` Required Permissions:\n\n- For the player themselves : `session:vivox:join_muted`\n\n`KICK` Required Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:vivox:kick:all`\n\n- For the player themselves : `session:vivox:kick:self`\n\nor be leader of session and have Required Permissions:\n\n- For any player (including themselves) : `session:vivox:kick:as-leader`\n\n\n\n`MUTE` Required Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:vivox:mute:all`\n\n- For the player themselves : `session:vivox:mute:self`\n\nor be leader of session and have Required Permissions:\n\n- For any player (including themselves) : `session:vivox:mute:as-leader`\n\n\n\n`TRANSCRIBE` Required Permissions:\n\n- For any player (including themselves) any of: `session:*`, `session:vivox:transcribe:any`\n\n- For the player themselves : `session:vivox:transcribe:as-member`",
        "operationId": "get_vivox_action_token",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VivoxSessionActionSingle"
            },
            "name": "vivox_action",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VoipSessionType"
            },
            "name": "voip_session_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoipTokenResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/player/me/voip/epic:join": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Epic Voice Join Token Me",
        "description": "Generate Epic voice room credentials for the current player\n\nRequired Permissions:\n\n- For the player themselves : `session:voip:epic:join`",
        "operationId": "get_epic_voice_join_token_me",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VoipSessionType"
            },
            "name": "voip_session_type",
            "in": "query"
          },
          {
            "description": "If true, join the muted room",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Join Muted",
              "description": "If true, join the muted room",
              "default": false
            },
            "name": "join_muted",
            "in": "query"
          },
          {
            "description": "Epic Connect ID Token to use to identify the user's ProductUserId.  If not set, their identity will be queried based on the identity provided to RallyHere.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Connect Id Token",
              "description": "Epic Connect ID Token to use to identify the user's ProductUserId.  If not set, their identity will be queried based on the identity provided to RallyHere."
            },
            "name": "connect_id_token",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Refresh Ttl",
              "default": true
            },
            "name": "refresh_ttl",
            "in": "query"
          },
          {
            "description": "IP Address hint",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 32,
              "title": "X-Rh-Client-Addr",
              "description": "IP Address hint"
            },
            "name": "x-rh-client-addr",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EpicVoipCredentialsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/deserter": {
      "get": {
        "tags": [
          "Deserter"
        ],
        "summary": "Get All Deserter Configs",
        "description": "Get all deserter configs",
        "operationId": "get_all_deserter_configs",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeserterConfigResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/deserter/{deserter_id}": {
      "get": {
        "tags": [
          "Deserter"
        ],
        "summary": "Get Specific Deserter Config",
        "description": "Get specific deserter configs",
        "operationId": "get_specific_deserter_config",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deserter Id"
            },
            "name": "deserter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeserterConfig"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/me/deserter/{deserter_id}": {
      "get": {
        "tags": [
          "Deserter"
        ],
        "summary": "Get Player Deserter Self",
        "description": "Get currently authed player's deserter status",
        "operationId": "get_player_deserter_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deserter Id"
            },
            "name": "deserter_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerDeserterStatus"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_uuid}/deserter/{deserter_id}": {
      "get": {
        "tags": [
          "Deserter"
        ],
        "summary": "Get Player Deserter",
        "description": "Get a specific player's deserter status",
        "operationId": "get_player_deserter",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deserter Id"
            },
            "name": "deserter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerDeserterStatus"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Deserter"
        ],
        "summary": "Put Player Deserter",
        "description": "Update a specific player's deserter status",
        "operationId": "put_player_deserter",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deserter Id"
            },
            "name": "deserter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeserterUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerDeserterStatus"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Deserter"
        ],
        "summary": "Delete Player Deserter",
        "description": "Delete a single deserter status for a specific player",
        "operationId": "delete_player_deserter",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deserter Id"
            },
            "name": "deserter_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_uuid}/deserter": {
      "get": {
        "tags": [
          "Deserter"
        ],
        "summary": "Get All Player Deserters",
        "description": "Get a specific player's deserter status",
        "operationId": "get_all_player_deserters",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllPlayerDeserterStatuses"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Deserter"
        ],
        "summary": "Delete All Player Deserter",
        "description": "Delete all of a player's deserter statuses",
        "operationId": "delete_all_player_deserter",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/deserter:clear": {
      "post": {
        "tags": [
          "Deserter"
        ],
        "summary": "Clear All Deserter",
        "description": "Clear deserter status for all deserter ids",
        "operationId": "clear_all_deserter",
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/deserter/{deserter_id}:clear": {
      "post": {
        "tags": [
          "Deserter"
        ],
        "summary": "Clear Specific Deserter",
        "description": "Clear deserter status for a specific deserter id",
        "operationId": "clear_specific_deserter",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deserter Id"
            },
            "name": "deserter_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AcknowledgeBackfillRequest": {
        "properties": {
          "instance_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Instance Id",
            "description": "The instance ID for this backfill request"
          },
          "extensions": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Extensions",
            "description": "Additional extensions to add to the Assignment for the backfill resource associated with the session"
          },
          "overflow_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TeamOverflowAction"
              }
            ],
            "description": "How to handle backfills that return too many players for a team",
            "default": "fail"
          },
          "styles": {
            "items": {
              "$ref": "#/components/schemas/BackfillStyle"
            },
            "type": "array",
            "description": "The styles of backfill to acknowledge. Can provide multiple for backwards compatibility."
          }
        },
        "type": "object",
        "required": [
          "instance_id"
        ],
        "title": "AcknowledgeBackfillRequest"
      },
      "AcknowledgeBackfillResponse": {
        "properties": {
          "backfilled_players": {
            "items": {
              "$ref": "#/components/schemas/SessionPlayer"
            },
            "type": "array",
            "title": "Backfilled Players",
            "description": "List of players that were backfilled. If empty, no players were backfilled",
            "default": []
          }
        },
        "type": "object",
        "title": "AcknowledgeBackfillResponse"
      },
      "AdditionalJoinParams": {
        "properties": {
          "double_args": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Double Args",
            "description": "Additional double arguments to add to the matchmaking ticket",
            "default": {}
          },
          "string_args": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "String Args",
            "description": "Additional string arguments to add to the matchmaking ticket",
            "default": {}
          },
          "tags": {
            "items": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "array",
            "title": "Tags",
            "description": "Additional tags to add to the matchmaking ticket",
            "default": []
          },
          "extensions": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Extensions",
            "description": "Additional extensions to add to the matchmaking ticket. Value is a base64 string representation of the protobuf binary data. The data will be converted back to binary before being put on the ticket",
            "default": {}
          }
        },
        "type": "object",
        "title": "AdditionalJoinParams",
        "description": "Additional parameters to apply to a matchmaking ticket"
      },
      "AllPlayerDeserterStatuses": {
        "properties": {
          "deserter_statuses": {
            "items": {
              "$ref": "#/components/schemas/PlayerDeserterStatus"
            },
            "type": "array",
            "title": "Deserter Statuses",
            "description": "List of all of a player's deserter statuses."
          }
        },
        "type": "object",
        "required": [
          "deserter_statuses"
        ],
        "title": "AllPlayerDeserterStatuses"
      },
      "AuditEvent": {
        "properties": {
          "event_name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Event Name",
            "description": "Name of the audit event you are creating. Customer created events will be prepended with 'customer.'"
          },
          "session_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Session Id",
            "description": "ID of the session this event occurred in"
          },
          "reason": {
            "type": "string",
            "title": "Reason",
            "description": "Reason for this event to occur"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data for this audit request"
          },
          "session_type": {
            "type": "string",
            "title": "Session Type",
            "description": "Type of the session this event occurred in"
          },
          "region_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Region Id",
            "description": "Region ID for this event"
          },
          "joinable": {
            "type": "boolean",
            "title": "Joinable",
            "description": "Whether or not the session is publicly joinable"
          },
          "joinability": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionJoinability"
              }
            ],
            "title": "Joinability",
            "description": "Joinability flags about the session"
          },
          "updated_teams": {
            "items": {
              "$ref": "#/components/schemas/TeamUpdate"
            },
            "type": "array",
            "maxItems": 50,
            "title": "Updated Teams",
            "description": "Updated team numbers and sizes"
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InviteSource"
              }
            ],
            "description": "The source of an invite"
          },
          "player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Player Uuid",
            "description": "UUID of a specific player being effected in this event"
          },
          "team_id": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Team Id",
            "description": "ID of the team being effected in this event"
          },
          "invited_session_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Invited Session Id",
            "description": "ID of the session being invited in this event"
          },
          "removed_session_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Removed Session Id",
            "description": "ID of the session being removed in this event"
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "Version updated in this event"
          },
          "client_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientSettings"
              }
            ],
            "title": "Client Settings",
            "description": "Client settings updated as part of this event"
          },
          "crossplay_preferences": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossplayPreferences"
              }
            ],
            "title": "Crossplay Preferences",
            "description": "Crossplay preferences updated as part of this event"
          },
          "player_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionPlayerStatus"
              }
            ],
            "description": "Player's status updated as part of this event"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Platform updated as part of this event"
          },
          "platform_session_id": {
            "type": "string",
            "maxLength": 4096,
            "minLength": 1,
            "title": "Platform Session Id",
            "description": "ID of the platform session being effected in this event"
          },
          "instance_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Instance Id",
            "description": "ID of the instance being effected in this event"
          },
          "host_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HostType"
              }
            ],
            "description": "Type of the host being effected in this event"
          },
          "host_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Host Player Uuid",
            "description": "UUID of the player hosting during this event"
          },
          "instance_request_template": {
            "type": "string",
            "format": "uuid",
            "title": "Instance Request Template",
            "description": "ID of the instance request template being used in this event"
          },
          "map": {
            "type": "string",
            "title": "Map",
            "description": "Map being used in this event"
          },
          "mode": {
            "type": "string",
            "title": "Mode",
            "description": "Mode being used in this event"
          },
          "allocation_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Allocation Id",
            "description": "Allocation ID of instance in this event"
          },
          "join_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceJoinableStatus"
              }
            ],
            "description": "Instance's joinability status"
          },
          "join_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JoinParams"
              }
            ],
            "title": "Join Params",
            "description": "Instance's join parameters for this event"
          },
          "instance_health": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceHealthStatus"
              }
            ],
            "description": "Instance's health status for this event"
          },
          "queue_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Queue Id",
            "description": "ID for the queue in this event"
          },
          "ticket_id": {
            "type": "string",
            "title": "Ticket Id",
            "description": "Matchmaking ticket id in this event"
          },
          "additional_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AdditionalJoinParams"
              }
            ],
            "title": "Additional Params",
            "description": "Additional matchmaking parameters in this event"
          },
          "map_preferences": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Map Preferences",
            "description": "Map preferences in this event"
          },
          "queued_session_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Queued Session Id",
            "description": "ID of the session that was/is in a matchmaking queue for this event"
          },
          "match_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Match Id",
            "description": "ID of a match that was associated with this session"
          },
          "ticket_wait_seconds": {
            "type": "integer",
            "title": "Ticket Wait Seconds",
            "description": "The total time in seconds that the ticket waited before being assigned to a match"
          },
          "match_making_profile_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Match Making Profile Id",
            "description": "ID of the MatchMakingProfile used to create this session"
          },
          "requesting_user_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Requesting User Uuid"
          },
          "event_datetime": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          }
        },
        "type": "object",
        "required": [
          "event_name",
          "session_id",
          "event_datetime"
        ],
        "title": "AuditEvent"
      },
      "AuditResponse": {
        "properties": {
          "events": {
            "items": {
              "$ref": "#/components/schemas/AuditEvent"
            },
            "type": "array",
            "title": "Events",
            "description": "List of audit events",
            "default": []
          }
        },
        "type": "object",
        "title": "AuditResponse"
      },
      "BackfillInfo": {
        "properties": {
          "backfill_id": {
            "type": "string",
            "minLength": 1,
            "title": "Backfill Id",
            "description": "Unique ID for the backfill object"
          },
          "extensions": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Extensions",
            "description": "Optional additional extensions used when acknowledging backfill requests"
          }
        },
        "type": "object",
        "required": [
          "backfill_id"
        ],
        "title": "BackfillInfo",
        "description": "Info about the open-match backfill object in a session"
      },
      "BackfillSettingsResponse": {
        "properties": {
          "timeout": {
            "type": "number",
            "format": "time-delta",
            "title": "Timeout",
            "description": "How often we expect backfill heartbeats to occur"
          }
        },
        "type": "object",
        "required": [
          "timeout"
        ],
        "title": "BackfillSettingsResponse"
      },
      "BackfillStyle": {
        "type": "string",
        "enum": [
          "team_request",
          "composition"
        ],
        "title": "BackfillStyle",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "TEAM_REQUEST",
          "COMPOSITION"
        ],
        "x-enum-descriptions": [
          "",
          ""
        ]
      },
      "BackfillTeam": {
        "properties": {
          "players_required": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Players Required",
            "description": "The number of players we want to backfill"
          },
          "team_id": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Team Id",
            "description": "Id for the team that requires backfilled players"
          }
        },
        "type": "object",
        "required": [
          "players_required",
          "team_id"
        ],
        "title": "BackfillTeam"
      },
      "BaseBackfillRequest": {
        "properties": {
          "instance_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Instance Id",
            "description": "The instance ID for this backfill request"
          }
        },
        "type": "object",
        "required": [
          "instance_id"
        ],
        "title": "BaseBackfillRequest"
      },
      "BrowserInfo": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data with the listing of the instance in the Session browser",
            "default": {}
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          }
        },
        "type": "object",
        "title": "BrowserInfo",
        "description": "Information about the browser resource in a session"
      },
      "BrowserResponse": {
        "properties": {
          "cursor": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Cursor",
            "description": "Cursor to continue iterating through browser sessions. 0 means we have returned the last entry"
          },
          "browser_sessions": {
            "items": {
              "$ref": "#/components/schemas/BrowserSessionInfo"
            },
            "type": "array",
            "title": "Browser Sessions",
            "description": "List of sessions in the browser"
          }
        },
        "type": "object",
        "required": [
          "cursor",
          "browser_sessions"
        ],
        "title": "BrowserResponse",
        "description": "A response with a list of browsers, and a cursor to continue iterating through them"
      },
      "BrowserSessionInfo": {
        "properties": {
          "session_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Session Id",
            "description": "ID for the session"
          },
          "instance_health": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceHealthStatus"
              }
            ],
            "description": "The health status of the instance if it exists"
          },
          "player_count": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Player Count",
            "description": "Number of players actively in this session"
          },
          "max_player_count": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Max Player Count",
            "description": "Maximum number of players that can be in this session"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data with the listing of the instance in the Session browser"
          }
        },
        "type": "object",
        "required": [
          "session_id"
        ],
        "title": "BrowserSessionInfo",
        "description": "Information about a session listed in a browser"
      },
      "ClientSettings": {
        "properties": {
          "platform_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlatformID"
              }
            ],
            "description": "DEPRECATED. Use 'platform' instead. Id for which platform this client is on. ID will be ignored if 'platform' is given. At least one of the two is required"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Which platform this client is on. If one is not provided, will get the platform from the 'platform_id'. Platform is now read from client's authorization claims if available"
          },
          "input": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Input"
              }
            ],
            "description": "Which input type this client is using"
          },
          "device_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeviceType"
              }
            ],
            "description": "Platform verified device type for this client"
          }
        },
        "type": "object",
        "required": [
          "input"
        ],
        "title": "ClientSettings",
        "description": "A player's platform and input settings"
      },
      "ConnectionInfo": {
        "properties": {
          "ip": {
            "type": "string",
            "title": "Ip",
            "description": "IP that sent the request"
          }
        },
        "type": "object",
        "required": [
          "ip"
        ],
        "title": "ConnectionInfo",
        "description": "Connection info about the requesting client"
      },
      "CreateAuditRequest": {
        "properties": {
          "event_name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Event Name",
            "description": "Name of the audit event you are creating. Customer created events will be prepended with 'customer.'"
          },
          "session_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Session Id",
            "description": "ID of the session this event occurred in"
          },
          "reason": {
            "type": "string",
            "title": "Reason",
            "description": "Reason for this event to occur"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data for this audit request"
          },
          "session_type": {
            "type": "string",
            "title": "Session Type",
            "description": "Type of the session this event occurred in"
          },
          "region_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Region Id",
            "description": "Region ID for this event"
          },
          "joinable": {
            "type": "boolean",
            "title": "Joinable",
            "description": "Whether or not the session is publicly joinable"
          },
          "joinability": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionJoinability"
              }
            ],
            "title": "Joinability",
            "description": "Joinability flags about the session"
          },
          "updated_teams": {
            "items": {
              "$ref": "#/components/schemas/TeamUpdate"
            },
            "type": "array",
            "maxItems": 50,
            "title": "Updated Teams",
            "description": "Updated team numbers and sizes"
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InviteSource"
              }
            ],
            "description": "The source of an invite"
          },
          "player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Player Uuid",
            "description": "UUID of a specific player being effected in this event"
          },
          "team_id": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Team Id",
            "description": "ID of the team being effected in this event"
          },
          "invited_session_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Invited Session Id",
            "description": "ID of the session being invited in this event"
          },
          "removed_session_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Removed Session Id",
            "description": "ID of the session being removed in this event"
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "Version updated in this event"
          },
          "client_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientSettings"
              }
            ],
            "title": "Client Settings",
            "description": "Client settings updated as part of this event"
          },
          "crossplay_preferences": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossplayPreferences"
              }
            ],
            "title": "Crossplay Preferences",
            "description": "Crossplay preferences updated as part of this event"
          },
          "player_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionPlayerStatus"
              }
            ],
            "description": "Player's status updated as part of this event"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Platform updated as part of this event"
          },
          "platform_session_id": {
            "type": "string",
            "maxLength": 4096,
            "minLength": 1,
            "title": "Platform Session Id",
            "description": "ID of the platform session being effected in this event"
          },
          "instance_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Instance Id",
            "description": "ID of the instance being effected in this event"
          },
          "host_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HostType"
              }
            ],
            "description": "Type of the host being effected in this event"
          },
          "host_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Host Player Uuid",
            "description": "UUID of the player hosting during this event"
          },
          "instance_request_template": {
            "type": "string",
            "format": "uuid",
            "title": "Instance Request Template",
            "description": "ID of the instance request template being used in this event"
          },
          "map": {
            "type": "string",
            "title": "Map",
            "description": "Map being used in this event"
          },
          "mode": {
            "type": "string",
            "title": "Mode",
            "description": "Mode being used in this event"
          },
          "allocation_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Allocation Id",
            "description": "Allocation ID of instance in this event"
          },
          "join_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceJoinableStatus"
              }
            ],
            "description": "Instance's joinability status"
          },
          "join_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JoinParams"
              }
            ],
            "title": "Join Params",
            "description": "Instance's join parameters for this event"
          },
          "instance_health": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceHealthStatus"
              }
            ],
            "description": "Instance's health status for this event"
          },
          "queue_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Queue Id",
            "description": "ID for the queue in this event"
          },
          "ticket_id": {
            "type": "string",
            "title": "Ticket Id",
            "description": "Matchmaking ticket id in this event"
          },
          "additional_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AdditionalJoinParams"
              }
            ],
            "title": "Additional Params",
            "description": "Additional matchmaking parameters in this event"
          },
          "map_preferences": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Map Preferences",
            "description": "Map preferences in this event"
          },
          "queued_session_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Queued Session Id",
            "description": "ID of the session that was/is in a matchmaking queue for this event"
          },
          "match_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Match Id",
            "description": "ID of a match that was associated with this session"
          },
          "ticket_wait_seconds": {
            "type": "integer",
            "title": "Ticket Wait Seconds",
            "description": "The total time in seconds that the ticket waited before being assigned to a match"
          },
          "match_making_profile_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Match Making Profile Id",
            "description": "ID of the MatchMakingProfile used to create this session"
          },
          "players": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "title": "Players",
            "description": "List of players uuids that were effected in this event. Each player will get a unique event"
          }
        },
        "type": "object",
        "required": [
          "event_name",
          "session_id"
        ],
        "title": "CreateAuditRequest"
      },
      "CreateOrJoinRequest": {
        "properties": {
          "client_version": {
            "type": "string",
            "title": "Client Version",
            "description": "String representation of semver for client"
          },
          "client_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientSettings"
              }
            ],
            "title": "Client Settings",
            "description": "Which input type the client is using. Platform is now gotten from authorization claims, and will overwrite the platform passed here"
          },
          "crossplay_preferences": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossplayPreferences"
              }
            ],
            "title": "Crossplay Preferences",
            "description": "Client's desired crossplay settings to determine which other clients it can play with. If not defined, assumed to be as permissive as possible"
          },
          "session_type": {
            "type": "string",
            "title": "Session Type",
            "description": "Type of session client is creating or joining"
          },
          "password": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Password",
            "description": "Password to set on a session if a new one is created"
          },
          "region_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Region Id",
            "description": "Preferred region for the instance and match to take place in"
          },
          "player": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SelfSessionPlayerUpdateRequest"
              }
            ],
            "title": "Player",
            "description": "Optional information about player in order to join the new/existing session. V2 version of CreateOrJoin will require this"
          }
        },
        "type": "object",
        "required": [
          "client_version",
          "client_settings",
          "session_type"
        ],
        "title": "CreateOrJoinRequest",
        "description": "A request body for a player to join a session"
      },
      "CrossplayInput": {
        "type": "string",
        "enum": [
          "desired_inputs_any",
          "desired_inputs_keyboardandmouse",
          "desired_inputs_gamepad",
          "desired_inputs_touch"
        ],
        "title": "CrossplayInput",
        "description": "Crossplay input preferences. Used to determine whether players can queue together, and the pools of players that are used to generate matches",
        "x-enum-varnames": [
          "ANY",
          "KBM",
          "GAMEPAD",
          "TOUCH"
        ],
        "x-enum-descriptions": [
          "No crossplay input preferences. Can play with players using any input",
          "Can only play with players using a keyboard and mouse",
          "Can only player with players using a gamepad/controller",
          "Can only player with players using a touch screen"
        ]
      },
      "CrossplayPlatform": {
        "type": "string",
        "enum": [
          "desired_platforms_any",
          "desired_platforms_xboxlike",
          "desired_platforms_playstationlike"
        ],
        "title": "CrossplayPlatform",
        "description": "Crossplay platform preferences. Used to determine whether players can queue together, and the pools of players that are used to generate matches",
        "x-enum-varnames": [
          "ANY",
          "XBOX",
          "PLAYSTATION"
        ],
        "x-enum-descriptions": [
          "No crossplay platform preferences. Can play with players any platforms",
          "Can only play with players on xbox-like platforms (xbox-one, xsx etc.)",
          "Can only play with players on playstation-like platform (ps4, ps5 etc.)"
        ]
      },
      "CrossplayPreferences": {
        "properties": {
          "permitted_platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossplayPlatform"
              }
            ],
            "description": "The platform type that the client is allowed to play with (any, xbox-like only, playstation-like only etc.)"
          },
          "permitted_input": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossplayInput"
              }
            ],
            "description": "The input type that the client is allowed to play with (keyboard and mouse, gamepad, touch input etc.)"
          }
        },
        "type": "object",
        "required": [
          "permitted_platform",
          "permitted_input"
        ],
        "title": "CrossplayPreferences",
        "description": "A session's or player's preferences around crossplay platforms and inputs. Permitted platforms and inputs will be checked when new players attempt to join a session"
      },
      "DeleteTicketReason": {
        "type": "string",
        "enum": [
          "assigned",
          "backfilled",
          "left_queue",
          "timeout",
          "party_changed"
        ],
        "title": "DeleteTicketReason",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "assigned",
          "backfilled",
          "left_queue",
          "timeout",
          "party_changed"
        ],
        "x-enum-descriptions": [
          "",
          "",
          "",
          "",
          ""
        ]
      },
      "DeserterConfig": {
        "properties": {
          "deserter_id": {
            "type": "string",
            "format": "uuid",
            "title": "Deserter Id",
            "description": "Unique id for this set of deserter config"
          },
          "last_cleared_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          }
        },
        "type": "object",
        "required": [
          "deserter_id"
        ],
        "title": "DeserterConfig"
      },
      "DeserterConfigResponse": {
        "properties": {
          "deserter_configs": {
            "items": {
              "$ref": "#/components/schemas/DeserterConfig"
            },
            "type": "array",
            "title": "Deserter Configs",
            "description": "List of desertion config objects"
          }
        },
        "type": "object",
        "required": [
          "deserter_configs"
        ],
        "title": "DeserterConfigResponse"
      },
      "DeserterUpdateRequest": {
        "properties": {
          "deserter_expiration": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "deserter_reset": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "deserter_count": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Deserter Count",
            "description": "The number of times a player has deserted before the expiration"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data about a players desertion status"
          }
        },
        "type": "object",
        "required": [
          "deserter_expiration",
          "deserter_count"
        ],
        "title": "DeserterUpdateRequest"
      },
      "Determiner": {
        "type": "string",
        "enum": [
          "allOf",
          "anyOf",
          "oneOf",
          "noneOf"
        ],
        "title": "Determiner",
        "description": "Determiner for how many rules must be satisfied in order to satisfy the ruleset",
        "x-enum-varnames": [
          "ALL",
          "ANY",
          "ONE",
          "NONE"
        ],
        "x-enum-descriptions": [
          "All rules must be satisfied",
          "At least one rule must be satisfied",
          "Exactly one rule must be satisfied",
          "All rules must not be satisfied"
        ]
      },
      "DeviceType": {
        "type": "string",
        "enum": [
          "pc",
          "xbox_series",
          "xbox_one",
          "web"
        ],
        "title": "DeviceType",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "pc",
          "xbox_series",
          "xbox_one",
          "web"
        ],
        "x-enum-descriptions": [
          "",
          "",
          "",
          ""
        ]
      },
      "EpicVoipCredentialsResponse": {
        "properties": {
          "room_id": {
            "type": "string",
            "title": "Room Id",
            "description": "Epic voice room identifier"
          },
          "participant_token": {
            "type": "string",
            "title": "Participant Token",
            "description": "Token for the participant to join the Epic voice room"
          },
          "client_base_url": {
            "type": "string",
            "title": "Client Base Url",
            "description": "Base URL for Epic voice client connections"
          },
          "product_user_id": {
            "type": "string",
            "title": "Product User Id",
            "description": "Epic ProductUserId for the authenticated user"
          }
        },
        "type": "object",
        "required": [
          "room_id",
          "participant_token",
          "client_base_url",
          "product_user_id"
        ],
        "title": "EpicVoipCredentialsResponse"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HostType": {
        "type": "string",
        "enum": [
          "dedicated",
          "player",
          "preallocated"
        ],
        "title": "HostType",
        "description": "Whether the host is another player, or a dedicated instance",
        "x-enum-varnames": [
          "dedicated",
          "player",
          "preallocated"
        ],
        "x-enum-descriptions": [
          "A dedicated, standalone instance",
          "A player hosted instance",
          "A preallocated instance that isn't player owned"
        ]
      },
      "HzApiErrorModel": {
        "properties": {
          "auth_success": {
            "type": "boolean",
            "title": "Auth Success",
            "default": true
          },
          "error_code": {
            "type": "string",
            "title": "Error Code"
          },
          "desc": {
            "type": "string",
            "title": "Desc"
          }
        },
        "type": "object",
        "required": [
          "error_code",
          "desc"
        ],
        "title": "HzApiErrorModel"
      },
      "Input": {
        "type": "string",
        "enum": [
          "keyboardandmouse",
          "gamepad",
          "touch"
        ],
        "title": "Input",
        "description": "The different input types that players can use",
        "x-enum-varnames": [
          "KBM",
          "GAMEPAD",
          "TOUCH"
        ],
        "x-enum-descriptions": [
          "Input for players using a keyboard and mouse",
          "Input for players using a gamepad/controller",
          "Input for players using a touch screen"
        ]
      },
      "InstanceHealthSettingsResponse": {
        "properties": {
          "cadence_seconds": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Cadence Seconds",
            "description": "How often we expect instance health checks to occur",
            "minimum": 0.0
          },
          "unhealthy_health_check_percentage": {
            "type": "number",
            "exclusiveMinimum": true,
            "title": "Unhealthy Health Check Percentage",
            "description": "What percentage of health checks must be missing before an instance's status becomes unhealthy",
            "minimum": 0.0
          },
          "missed_checks_before_unknown": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Missed Checks Before Unknown",
            "description": "How many health checks we must miss in a row before an instance's status becomes unknown",
            "minimum": 0.0
          }
        },
        "type": "object",
        "required": [
          "cadence_seconds",
          "unhealthy_health_check_percentage",
          "missed_checks_before_unknown"
        ],
        "title": "InstanceHealthSettingsResponse"
      },
      "InstanceHealthStatus": {
        "type": "string",
        "enum": [
          "healthy",
          "unhealthy",
          "degraded",
          "unknown"
        ],
        "title": "InstanceHealthStatus",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "HEALTHY",
          "UNHEALTHY",
          "DEGRADED",
          "UNKNOWN"
        ],
        "x-enum-descriptions": [
          "Instance is in a healthy state",
          "Instance is in an unhealthy state and cannot handle connections",
          "Instance performance is degraded, and may be unable to handle new or existing connections",
          "Instance health checks have stopped, and instance status is unknown"
        ]
      },
      "InstanceHealthStatusResponse": {
        "properties": {
          "updated_instance_health": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceHealthStatus"
              }
            ],
            "description": "The new health status of the instance. It may not match the status sent up if too few health checks are being recieved"
          }
        },
        "type": "object",
        "required": [
          "updated_instance_health"
        ],
        "title": "InstanceHealthStatusResponse",
        "description": "Response body for an instance health check"
      },
      "InstanceHealthStatusUpdate": {
        "properties": {
          "instance_health": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceHealthStatus"
              }
            ],
            "description": "The health status of the instance"
          },
          "instance_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Instance Id",
            "description": "The instance ID for the instance whose health you are reporting"
          }
        },
        "type": "object",
        "required": [
          "instance_health",
          "instance_id"
        ],
        "title": "InstanceHealthStatusUpdate",
        "description": "A request body for an instances health check"
      },
      "InstanceInfo": {
        "properties": {
          "allocation_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Allocation Id",
            "description": "Allocation ID for instance that's been spun up"
          },
          "instance_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Instance Id",
            "description": "Unique ID for the host/session relationship"
          },
          "host_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HostType"
              }
            ],
            "description": "Type of the host"
          },
          "host_player_id": {
            "type": "integer",
            "title": "Host Player Id",
            "description": "Player ID of the host, if the host type is player"
          },
          "host_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Host Player Uuid",
            "description": "Player UUID of the host, if the host type is player"
          },
          "host_dedicated_process_id": {
            "type": "string",
            "title": "Host Dedicated Process Id",
            "description": "Unique ID for the process that is running this instance"
          },
          "host_dedicated_server_id": {
            "type": "string",
            "title": "Host Dedicated Server Id",
            "description": "Unique ID for the machine running the instance"
          },
          "join_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceJoinableStatus"
              }
            ],
            "description": "Is the instance joinable at this time?"
          },
          "join_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JoinParams"
              }
            ],
            "title": "Join Params",
            "description": "Parameters to join the instance"
          },
          "instance_startup_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceStartupParams"
              }
            ],
            "title": "Instance Startup Params",
            "description": "Parameters used by the host to startup. For UE5 this will contain the map and gamemode"
          },
          "version": {
            "type": "string",
            "format": "semver",
            "title": "Version",
            "description": "Product Client Version number.  Used for compatibility checking with players",
            "example": "21.3.15-beta+12345"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "instance-defined custom data",
            "default": {}
          },
          "instance_health": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceHealthStatus"
              }
            ],
            "description": "The current status of the instance"
          },
          "match_making_profile_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Match Making Profile Id",
            "description": "The profile id that this instance was spawned from"
          },
          "match_id": {
            "type": "string",
            "title": "Match Id",
            "description": "The match ID associated with this instance"
          }
        },
        "type": "object",
        "required": [
          "instance_id",
          "host_type",
          "join_status",
          "created"
        ],
        "title": "InstanceInfo",
        "description": "Information about the instance resource in a session"
      },
      "InstanceInfoUpdate": {
        "properties": {
          "allocation_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Allocation Id",
            "description": "Allocation ID for instance that's been spun up"
          },
          "join_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceJoinableStatus"
              }
            ],
            "description": "Is the instance joinable at this time?"
          },
          "join_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JoinParams"
              }
            ],
            "title": "Join Params",
            "description": "Parameters to join the instance"
          },
          "version": {
            "type": "string",
            "format": "semver",
            "title": "Version",
            "description": "Product Client Version number.  Used for compatibility checking with players.  Must be compatible with all players to spawn",
            "example": "21.3.15-beta+12345"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "instance-defined custom data",
            "default": {}
          },
          "match_id": {
            "type": "string",
            "title": "Match Id",
            "description": "The match ID associated with this instance"
          }
        },
        "type": "object",
        "title": "InstanceInfoUpdate",
        "description": "A request body to update the instance resource in a session"
      },
      "InstanceJoinableStatus": {
        "type": "string",
        "enum": [
          "requested",
          "allocated",
          "pending",
          "joinable",
          "unjoinable",
          "closed"
        ],
        "title": "InstanceJoinableStatus",
        "description": "What state the instance is currently in",
        "x-enum-varnames": [
          "requested",
          "allocated",
          "pending",
          "joinable",
          "unjoinable",
          "closed"
        ],
        "x-enum-descriptions": [
          "Searching for a host",
          "Host has been found, and is loading its session information",
          "Host has arrived and is loading",
          "Host is ready to accept players",
          "Host has marked itself as no longer ready to accept players, but may transition back to joinable",
          "Host has left, been timed out, or could not be found"
        ]
      },
      "InstanceLaunchTemplate": {
        "properties": {
          "instance_launch_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Instance Launch Template Id",
            "description": "ID to uniquely identify this instance launch template"
          },
          "map_selection_list": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MapSelectionList"
              }
            ],
            "title": "Map Selection List",
            "description": "A selection list of maps that can be chosen to launch into"
          },
          "default_host_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HostType"
              }
            ],
            "description": "Default host type for this template. Can be overriden in instance requests"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data that will be passed to the session during the instance launch request",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "instance_launch_template_id",
          "map_selection_list",
          "default_host_type"
        ],
        "title": "InstanceLaunchTemplate",
        "description": "**DEPRECATED** Configuration about how an instance should behave when it's allocated"
      },
      "InstanceRequest": {
        "properties": {
          "instance_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Instance Id",
            "description": "Unique ID for the instance, a new one will be generated if not provided"
          },
          "instance_startup_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceStartupParams"
              }
            ],
            "title": "Instance Startup Params",
            "description": "Parameters used by the host to startup. For UE5 this will contain the map and gamemode"
          },
          "host_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HostType"
              }
            ],
            "description": "Type of the host",
            "default": "dedicated"
          },
          "instance_request_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Instance Request Template Id",
            "description": "Which instance request template should be used to request this instance. Takes priority over instance_startup_params and host_type"
          },
          "host_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Host Player Uuid",
            "description": "Player UUID of the host, if the host type is player"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "instance-defined custom data",
            "default": {}
          }
        },
        "type": "object",
        "title": "InstanceRequest",
        "description": "A request body to create an instance resource in a session"
      },
      "InstanceRequestTemplate": {
        "properties": {
          "instance_request_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Instance Request Template Id",
            "description": "ID to uniquely identify this instance launch template"
          },
          "map_selection_list": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MapSelectionListV2"
              }
            ],
            "title": "Map Selection List",
            "description": "A selection list of maps that can be chosen to launch into"
          },
          "default_host_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HostType"
              }
            ],
            "description": "Default host type for this template. Can be overriden in instance requests"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data that will be passed to the session during the instance launch request",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "instance_request_template_id",
          "map_selection_list",
          "default_host_type"
        ],
        "title": "InstanceRequestTemplate",
        "description": "Configuration about how an instance should behave when it's allocated"
      },
      "InstanceStartupParams": {
        "properties": {
          "map": {
            "type": "string",
            "title": "Map",
            "description": "Name of the map for the instance to spawn with"
          },
          "mode": {
            "type": "string",
            "title": "Mode",
            "description": "Game mode for the instance to spawn in"
          },
          "misc_params": {
            "type": "string",
            "title": "Misc Params",
            "description": "Additional commandline parameters for the instance"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data to pass through to the instance",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "map",
          "misc_params"
        ],
        "title": "InstanceStartupParams",
        "description": "Parameters given to an instance to change what map and mode it loads, and other gameplay behavior"
      },
      "IntraSessionPermissions": {
        "type": "string",
        "enum": [
          "invite",
          "kick",
          "move"
        ],
        "title": "IntraSessionPermissions",
        "description": "Subset of leader permissions that can be individual assigned to specific players within a session",
        "x-enum-varnames": [
          "invite",
          "kick",
          "move"
        ],
        "x-enum-descriptions": [
          "",
          "",
          ""
        ]
      },
      "InviteSource": {
        "type": "string",
        "enum": [
          "BACKFILL",
          "MATCHMAKING",
          "PLAYER"
        ],
        "title": "InviteSource",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "BACKFILL",
          "MATCHMAKING",
          "PLAYER"
        ],
        "x-enum-descriptions": [
          "",
          "",
          ""
        ]
      },
      "JoinParams": {
        "properties": {
          "public_conn_str": {
            "type": "string",
            "title": "Public Conn Str",
            "description": "Public connection string for instance"
          },
          "private_conn_str": {
            "type": "string",
            "title": "Private Conn Str",
            "description": "Private connection string for instance"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data to join a instance",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "public_conn_str",
          "private_conn_str"
        ],
        "title": "JoinParams",
        "description": "Parameters provided by the allocation system or an instance on how to connect"
      },
      "MMRGroupingMethod": {
        "type": "string",
        "enum": [
          "worst",
          "best",
          "avg_weighted_by_sigma",
          "avg"
        ],
        "title": "MMRGroupingMethod",
        "description": "What method should be used to determine a linking's group MMR based on the individuals",
        "x-enum-varnames": [
          "WORST",
          "BEST",
          "AVERAGE_BY_VARIANCE",
          "AVERAGE"
        ],
        "x-enum-descriptions": [
          "Use the lowest MMR of any player in the linking",
          "Use the highest MMR of any player in the linking",
          "Use the arithmetic mean of the players' skill multiplied by their variance. This is the sum of each player's skill times variance divided by the number of players",
          "Use the arithmetic mean of the players' skill. This is the sum of each player's skill divided by the number of players"
        ]
      },
      "MapConfig": {
        "properties": {
          "map_game_id": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Map Game Id",
            "description": "ID to uniquely identify this map game",
            "default": 0
          },
          "map_name": {
            "type": "string",
            "title": "Map Name",
            "description": "Name of the map the instance should load into"
          },
          "mode": {
            "type": "string",
            "title": "Mode",
            "description": "Game mode for the instance to spawn in"
          },
          "selection_chance": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Selection Chance",
            "description": "Chance that this map will get selected in a rotation list",
            "default": 0
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data to pass through to the instance",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "map_name"
        ],
        "title": "MapConfig",
        "description": "DEPRECATED Configuration about a specific map for an instance to load into"
      },
      "MapConfigV2": {
        "properties": {
          "map_id": {
            "type": "string",
            "title": "Map Id",
            "description": "ID to uniquely identify this map game"
          },
          "map_name": {
            "type": "string",
            "title": "Map Name",
            "description": "Name of the map the instance should load into"
          },
          "mode": {
            "type": "string",
            "title": "Mode",
            "description": "Game mode for the instance to spawn in"
          },
          "map_weight": {
            "type": "number",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Map Weight",
            "description": "Chance that this map will get selected in a rotation list"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data to pass through to the instance",
            "default": {}
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Human readable name for this map"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the map"
          },
          "misc_params": {
            "type": "string",
            "title": "Misc Params",
            "description": "Misc params to be passed to the instance when using this map"
          }
        },
        "type": "object",
        "required": [
          "map_id",
          "map_name",
          "map_weight"
        ],
        "title": "MapConfigV2",
        "description": "Configuration about a specific map for an instance to load into"
      },
      "MapSelectionList": {
        "properties": {
          "map_selection_list_id": {
            "type": "string",
            "title": "Map Selection List Id",
            "description": "ID to uniquely identify this map selection list"
          },
          "maps": {
            "items": {
              "$ref": "#/components/schemas/MapConfig"
            },
            "type": "array",
            "title": "Maps",
            "description": "List of maps that can be chosen in this selection list"
          }
        },
        "type": "object",
        "required": [
          "map_selection_list_id",
          "maps"
        ],
        "title": "MapSelectionList",
        "description": "DEPRECATED A list of maps that can be chosen from when an instance is launching"
      },
      "MapSelectionListV2": {
        "properties": {
          "map_selection_list_id": {
            "type": "string",
            "title": "Map Selection List Id",
            "description": "ID to uniquely identify this map selection list"
          },
          "maps": {
            "items": {
              "$ref": "#/components/schemas/MapConfigV2"
            },
            "type": "array",
            "title": "Maps",
            "description": "List of maps that can be chosen in this selection list"
          }
        },
        "type": "object",
        "required": [
          "map_selection_list_id",
          "maps"
        ],
        "title": "MapSelectionListV2"
      },
      "MatchInfo": {
        "properties": {
          "match_id": {
            "type": "string",
            "title": "Match Id",
            "description": "Unique ID"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "instance-defined custom data",
            "default": {}
          },
          "ticket_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Ticket Ids",
            "description": "List of tickets that were assigned to this match if created by matchmaking",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "match_id",
          "created"
        ],
        "title": "MatchInfo",
        "description": "DEPRECATED Information about a match"
      },
      "MatchMakingProfile": {
        "properties": {
          "profile_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Profile Id",
            "description": "ID of the matchmaking profile to join"
          },
          "join_mode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProfileJoinMode"
              }
            ],
            "description": "What mode to set on the matchmaking profile (normal, backfill etc)",
            "default": "normal"
          },
          "instance_launch_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Instance Launch Template Id",
            "description": "Which instance template to use when launching a match in this profile"
          },
          "rank_id": {
            "type": "string",
            "title": "Rank Id",
            "description": "Which rank this profile should use MMR from to make matches from, and update at the end of match (1v1 MMR or 2v2 MMR for example)"
          },
          "num_sides": {
            "type": "integer",
            "title": "Num Sides",
            "description": "The number of sides a game in this profile will have (2 in a 1v1 and 3 in a 1v1v1 for example"
          },
          "max_players_per_side": {
            "type": "integer",
            "title": "Max Players Per Side",
            "description": "The maximum number of players that can be on each team"
          },
          "min_players_per_side": {
            "type": "integer",
            "title": "Min Players Per Side",
            "description": "The minimum number of players that can be on each team"
          },
          "deserter_id": {
            "type": "string",
            "title": "Deserter Id",
            "description": "Unused in the legacy profile. Must use V2 for deserter functionality. Which deserter this profile should check before allowing players to join matchmaking"
          },
          "legacy_config": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Legacy Config",
            "description": "Legacy config to help migrate clients",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "profile_id",
          "instance_launch_template_id"
        ],
        "title": "MatchMakingProfile",
        "description": "DEPRECATED A profile that describes what pools of players a session will be a part of when matchmaking"
      },
      "MatchMakingProfileV2": {
        "properties": {
          "match_making_profile_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Match Making Profile Id",
            "description": "ID of the matchmaking profile to join"
          },
          "join_mode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProfileJoinMode"
              }
            ],
            "description": "What mode to set on the matchmaking profile (normal, backfill etc)",
            "default": "normal"
          },
          "instance_request_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Instance Request Template Id",
            "description": "Which instance template to use when launching a match in this profile"
          },
          "rank_id": {
            "type": "string",
            "title": "Rank Id",
            "description": "Which rank this profile should use MMR from to make matches from, and update at the end of match (1v1 MMR or 2v2 MMR for example)"
          },
          "num_sides": {
            "type": "integer",
            "title": "Num Sides",
            "description": "The number of sides a game in this profile will have (2 in a 1v1 and 3 in a 1v1v1 for example"
          },
          "max_players_per_side": {
            "type": "integer",
            "title": "Max Players Per Side",
            "description": "The maximum number of players that can be on each team"
          },
          "min_players_per_side": {
            "type": "integer",
            "title": "Min Players Per Side",
            "description": "The minimum number of players that can be on each team"
          },
          "legacy_config": {
            "type": "object",
            "title": "Legacy Config",
            "description": "Legacy config to help migrate clients"
          },
          "deserter_id": {
            "type": "string",
            "title": "Deserter Id",
            "description": "Which deserter this profile should check before allowing players to join matchmaking"
          },
          "session_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Session Template Id",
            "description": "What type of session should result from matchmaking on this profile"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data about this profile",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "match_making_profile_id"
        ],
        "title": "MatchMakingProfileV2",
        "description": "A profile that describes what pools of players a session will be a part of when matchmaking"
      },
      "MatchMakingRuleset": {
        "properties": {
          "rules": {
            "items": {
              "$ref": "#/components/schemas/Rule"
            },
            "type": "array",
            "title": "Rules",
            "description": "A list of the rules to be checked for this ruleset",
            "default": []
          },
          "determiner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Determiner"
              }
            ],
            "description": "Determiner of how many rules must be satisfied in this rulest (all, any, one, none)",
            "default": "allOf"
          },
          "players_to_validate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayersToValidate"
              }
            ],
            "description": "Which members of a session must be validated to satisfy this ruleset",
            "default": "leader"
          }
        },
        "type": "object",
        "title": "MatchMakingRuleset",
        "description": "A collection of rules that are used to determine whether a MatchMakingTemplate should be used"
      },
      "MatchMakingSessionRequest": {
        "properties": {
          "teams": {
            "items": {
              "$ref": "#/components/schemas/SessionTeam"
            },
            "type": "array",
            "title": "Teams",
            "description": "List of teams that are to be invited to session"
          },
          "session_tickets": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Session Tickets",
            "description": "List of sessions and tickets the match was made with. Used to verify this match should still be created. Takes priority over the session list. One of the two is required"
          },
          "sessions": {
            "items": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1
            },
            "type": "array",
            "title": "Sessions",
            "description": "List of sessions that should be a part of this matchmade session. Used if session_tickets is empty. One of the two is required"
          },
          "instance_launch_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Instance Launch Template Id",
            "description": "DEPRECATED. Which launch template should be used to request an instance"
          },
          "instance_request_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Instance Request Template Id",
            "description": "DEPRECATED. Which launch template should be used to request an instance"
          },
          "region_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Region Id",
            "description": "Region to start the instance in"
          },
          "match_id": {
            "type": "string",
            "title": "Match Id",
            "description": "Unique ID for this generated match"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data about the match",
            "default": {}
          },
          "host_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Host Player Uuid",
            "description": "Player UUID of the host, if the host type is player"
          },
          "backfill_id": {
            "type": "string",
            "minLength": 1,
            "title": "Backfill Id",
            "description": "ID for the open-match backfill object"
          },
          "match_create_request_time": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "evaluation_score": {
            "type": "number",
            "title": "Evaluation Score",
            "description": "The evaluation score sent to the open-match evaluator"
          },
          "rank_quality": {
            "type": "number",
            "title": "Rank Quality",
            "description": "The calculated rank quality of the match. Often matches the evaluation score"
          },
          "match_making_profile_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Match Making Profile Id",
            "description": "The MatchMakingProfileID that was ultimately used to create this match"
          },
          "ticket_added_unix_time": {
            "additionalProperties": {
              "type": "number",
              "minimum": 0.0
            },
            "type": "object",
            "title": "Ticket Added Unix Time",
            "description": "Map of ticket_id to unix time that each ticket was added to the match"
          }
        },
        "type": "object",
        "required": [
          "teams",
          "region_id",
          "match_id",
          "match_create_request_time",
          "match_making_profile_id"
        ],
        "title": "MatchMakingSessionRequest",
        "description": "A request body for a new matchmade session to be created"
      },
      "MatchMakingTemplate": {
        "properties": {
          "match_making_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Id",
            "description": "ID for this unique MatchMakingTemplate"
          },
          "mmr_grouping_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MMRGroupingMethod"
              }
            ],
            "description": "What method should be used to calculate a group's MMR based on the individual player's ranks"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchMakingRuleset"
              }
            ],
            "title": "Ruleset",
            "description": "A set of rules that determine whether or not this matchmaking config should be used."
          },
          "profiles": {
            "items": {
              "$ref": "#/components/schemas/MatchMakingProfile"
            },
            "type": "array",
            "title": "Profiles",
            "description": "A list of which match making profiles are going to be created on the ticket"
          }
        },
        "type": "object",
        "required": [
          "mmr_grouping_method",
          "profiles"
        ],
        "title": "MatchMakingTemplate",
        "description": "DEPRECATED Configuration about what rules must be satisfied to use this template, and what matchmaking profiles the ticket will be a part of"
      },
      "MatchMakingTemplateGroup": {
        "properties": {
          "template_group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Template Group Id",
            "description": "ID for this set of potential matchmaking templates"
          },
          "template_options": {
            "items": {
              "$ref": "#/components/schemas/MatchMakingTemplate"
            },
            "type": "array",
            "title": "Template Options",
            "description": "List of the different matchmaking templates that could be used. The config is chosen based on a set of rules in each MatchMakingTemplate object. If there are no rules, it's the default template"
          },
          "required_item_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "uniqueItems": true,
            "title": "Required Item Ids",
            "description": "Set of all the item ids that are required to validate every rule contained in this template group",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "template_group_id",
          "template_options"
        ],
        "title": "MatchMakingTemplateGroup",
        "description": "DEPRECATED A collection of MatchMakingTemplates that may be used when a session enters a queue. The first template that satisfies the necessary rules will be used"
      },
      "MatchMakingTemplateGroupV2": {
        "properties": {
          "match_making_template_group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Group Id",
            "description": "ID for this set of potential matchmaking templates"
          },
          "template_options": {
            "items": {
              "$ref": "#/components/schemas/MatchMakingTemplateV2"
            },
            "type": "array",
            "title": "Template Options",
            "description": "List of the different matchmaking templates that could be used. The config is chosen based on a set of rules in each MatchMakingTemplate object. If there are no rules, it's the default template"
          },
          "required_item_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "uniqueItems": true,
            "title": "Required Item Ids",
            "description": "DEPRECATED. Set of all the item ids that are required to validate every rule contained in this template group",
            "default": []
          },
          "requires_all_players_items": {
            "type": "boolean",
            "title": "Requires All Players Items",
            "description": "DEPRECATED. Whether or not the rulesets under this group will require us to query all players inventory, or just the leader's",
            "default": false
          },
          "includes_session_rule": {
            "type": "boolean",
            "title": "Includes Session Rule",
            "description": "DEPRECATED. Whether or not the rulesets under this group will require us to validate session data",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "match_making_template_group_id",
          "template_options"
        ],
        "title": "MatchMakingTemplateGroupV2",
        "description": "A collection of MatchMakingTemplates that may be used when a session enters a queue. The first template that satisfies the necessary rules will be used"
      },
      "MatchMakingTemplateV2": {
        "properties": {
          "match_making_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Id",
            "description": "ID for this unique MatchMakingTemplate"
          },
          "mmr_grouping_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MMRGroupingMethod"
              }
            ],
            "description": "What method should be used to calculate a group's MMR based on the individual player's ranks"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchMakingRuleset"
              }
            ],
            "title": "Ruleset",
            "description": "A set of rules that determine whether or not this matchmaking config should be used."
          },
          "profiles": {
            "items": {
              "$ref": "#/components/schemas/MatchMakingProfileV2"
            },
            "type": "array",
            "title": "Profiles",
            "description": "A list of which match making profiles are going to be created on the ticket"
          }
        },
        "type": "object",
        "required": [
          "mmr_grouping_method",
          "profiles"
        ],
        "title": "MatchMakingTemplateV2",
        "description": "Configuration about what rules must be satisfied to use this template, and what matchmaking profiles the ticket will be a part of"
      },
      "MatchmakingInfo": {
        "properties": {
          "ticket_id": {
            "type": "string",
            "title": "Ticket Id",
            "description": "Unique ID for this attempt at matchmaking"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "session-defined custom data",
            "default": {}
          },
          "queue_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Queue Id",
            "description": "Unique ID for the joined queue"
          }
        },
        "type": "object",
        "required": [
          "ticket_id"
        ],
        "title": "MatchmakingInfo",
        "description": "Info about the matchmaking status in a session"
      },
      "MatchmakingResults": {
        "properties": {
          "match_making_id": {
            "type": "string",
            "title": "Match Making Id",
            "description": "Unique ID"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "MMF defined custom data",
            "default": {}
          },
          "ticket_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Ticket Ids",
            "description": "List of tickets that were assigned to this match if created by matchmaking",
            "default": []
          },
          "ticket_data": {
            "items": {
              "$ref": "#/components/schemas/TicketData"
            },
            "type": "array",
            "title": "Ticket Data",
            "description": "List of all the ticket data that was used when generating this match",
            "default": []
          },
          "tickets_assigned": {
            "type": "boolean",
            "title": "Tickets Assigned",
            "description": "Whether or not the tickets from these results have been assigned",
            "default": false
          },
          "profile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchMakingProfileV2"
              }
            ],
            "title": "Profile",
            "description": "The profile used to create this match"
          },
          "ticket_wait_seconds": {
            "additionalProperties": {
              "type": "integer",
              "minimum": 0.0
            },
            "type": "object",
            "title": "Ticket Wait Seconds",
            "description": "The total time in seconds that each ticket waited before being assigned to a match"
          }
        },
        "type": "object",
        "required": [
          "match_making_id",
          "created"
        ],
        "title": "MatchmakingResults"
      },
      "Operation": {
        "type": "string",
        "enum": [
          "eq",
          "ne",
          "lt",
          "le",
          "gt",
          "ge",
          "in_set",
          "not_in_set"
        ],
        "title": "Operation",
        "description": "What comparison operation should be used when evaluating a rule",
        "x-enum-varnames": [
          "EQUAL",
          "NOT_EQUAL",
          "LESS_THAN",
          "LESS_THAN_EQUAL",
          "GREATER_THAN",
          "GREATER_THAN_EQUAL",
          "INCLUDED_IN_SET",
          "EXCLUDED_FROM_SET"
        ],
        "x-enum-descriptions": [
          "The two values must be equal",
          "The two values must not be equal",
          "Value A must be less than value B",
          "Value A must be less than or equal to value B",
          "Value A must be greater than value B",
          "Value A must be greater than or equal to value B",
          "Value A must be in the set of values B",
          "Value A must not be in the set of values B"
        ]
      },
      "PagedPlayersResponse": {
        "properties": {
          "teams": {
            "items": {
              "$ref": "#/components/schemas/SessionTeam"
            },
            "type": "array",
            "title": "Teams",
            "description": "List of returned teams and players. Player list in the teams may be incomplete",
            "default": []
          },
          "cursor": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Cursor",
            "description": "Cursor to continue iterating through players in a session. 0 means we have returned the last entry"
          }
        },
        "type": "object",
        "required": [
          "cursor"
        ],
        "title": "PagedPlayersResponse"
      },
      "Platform": {
        "type": "string",
        "enum": [
          "Anon",
          "Basic",
          "XboxLive",
          "PSN",
          "NintendoNAID",
          "NintendoSwitch",
          "NintendoPPID",
          "Google",
          "GooglePlay",
          "Apple",
          "Epic",
          "Steam",
          "Amazon",
          "Twitch",
          "RallyHere",
          "LegacyName"
        ],
        "title": "Platform",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "ANON",
          "BASIC",
          "XBOX_LIVE",
          "PSN",
          "NINTENDO_NAID",
          "NINTENDO_SWITCH",
          "NINTENDO_PPID",
          "GOOGLE",
          "GOOGLE_PLAY",
          "APPLE",
          "EPIC",
          "STEAM",
          "AMAZON",
          "TWITCH",
          "RALLYHERE",
          "LEGACYNAME"
        ],
        "x-enum-descriptions": [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ]
      },
      "PlatformID": {
        "type": "integer",
        "enum": [
          2,
          4,
          5,
          9,
          10,
          11,
          13,
          16,
          22,
          24,
          26,
          28
        ],
        "title": "PlatformID",
        "description": "DEPRECATED. Use Platform instead. Unique ids for different client platforms",
        "x-enum-varnames": [
          "ANON",
          "AMAZON",
          "STEAM",
          "PSN",
          "XBOX_LIVE",
          "BASIC",
          "GOOGLE",
          "TWITCH",
          "NINTENDO_SWITCH",
          "APPLE",
          "NINTENDO",
          "EPIC"
        ],
        "x-enum-descriptions": [
          "DEPRECATED. Use platform instead. ID for the platform Anon",
          "DEPRECATED. Use platform instead. ID for the platform Amazon",
          "DEPRECATED. Use platform instead. ID for the platform Steam",
          "DEPRECATED. Use platform instead. ID for the platform PSN",
          "DEPRECATED. Use platform instead. ID for the platform XboxLive",
          "DEPRECATED. Use platform instead. ID for the platform Basic",
          "DEPRECATED. Use platform instead. ID for the platform Google",
          "DEPRECATED. Use platform instead. ID for the platform Twitch",
          "DEPRECATED. Use platform instead. ID for the platform NintendoSwitch",
          "DEPRECATED. Use platform instead. ID for the platform Apple",
          "DEPRECATED. Use platform instead. ID for the platform NintendoNAID",
          "DEPRECATED. Use platform instead. ID for the platform Epic"
        ]
      },
      "PlatformScout": {
        "properties": {
          "player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Player Uuid",
            "description": "UUID of player who is the designated scout for the platform session"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Which platform this specified player is a scout for"
          }
        },
        "type": "object",
        "required": [
          "player_uuid",
          "platform"
        ],
        "title": "PlatformScout"
      },
      "PlatformSession": {
        "properties": {
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Platform that this session is for"
          },
          "platform_session_type": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Platform Session Type",
            "description": "Platform-Specific Identifier for the Platform's template"
          },
          "platform_session_id_base64": {
            "type": "string",
            "maxLength": 4096,
            "minLength": 1,
            "title": "Platform Session Id Base64",
            "description": "Platform session's unique identifier"
          },
          "players": {
            "items": {
              "$ref": "#/components/schemas/PlatformSessionPlayer"
            },
            "type": "array",
            "title": "Players",
            "description": "DEPRECATED. PlatformSessions no longer keep tracking of players. Players in the platform session"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Product defined custom data fields about the platform session",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "platform",
          "platform_session_type",
          "platform_session_id_base64",
          "players"
        ],
        "title": "PlatformSession",
        "description": "A platform session resource in a RallyHere session"
      },
      "PlatformSessionPlayer": {
        "properties": {
          "player_id": {
            "type": "integer",
            "title": "Player Id",
            "description": "Player ID representing the current player"
          },
          "player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Player Uuid",
            "description": "Player UUID representing the current player"
          },
          "leader": {
            "type": "boolean",
            "title": "Leader",
            "description": "Is this player the leader of the platform session?  When setting up the parent session, if all players are from the same platform session, leadership is coordinated",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "player_uuid"
        ],
        "title": "PlatformSessionPlayer",
        "description": "A platform player resource in a platform session"
      },
      "PlatformSessionTemplate": {
        "properties": {
          "platform_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlatformID"
              }
            ],
            "description": "DEPRECATED. ID for the platform type for this template. Use 'platform' instead"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Platform"
          },
          "platform_session_type": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Platform Session Type",
            "description": "Platform-Specific Identifier for the Platform's template"
          },
          "max_players": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Max Players",
            "description": "The maximum number of players that can be a part of this platform session"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Product-defined custom data",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "platform_id",
          "platform",
          "platform_session_type"
        ],
        "title": "PlatformSessionTemplate",
        "description": "Template used to create new platform sessions for a specific type of platform. Configurable in the developer portal"
      },
      "PlayerDeserterStatus": {
        "properties": {
          "deserter_id": {
            "type": "string",
            "title": "Deserter Id",
            "description": "ID for which type of deserter this is"
          },
          "deserter_status": {
            "type": "boolean",
            "title": "Deserter Status",
            "description": "Flag of whether or not the player is a deserter"
          },
          "deserter_expiration": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "deserter_reset": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "deserter_count": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Deserter Count",
            "description": "The number of times a player has deserted before the expiration",
            "default": 0
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data about a players desertion status"
          }
        },
        "type": "object",
        "required": [
          "deserter_id",
          "deserter_status"
        ],
        "title": "PlayerDeserterStatus"
      },
      "PlayerInviteRequest": {
        "properties": {
          "team_id": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Team Id",
            "description": "Which team the invited players should prioritize being put on"
          },
          "overflow_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TeamOverflowAction"
              }
            ],
            "description": "How we should handle too many players being invited to the chosen team",
            "default": "fail"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data for all players being invited",
            "default": {}
          }
        },
        "type": "object",
        "title": "PlayerInviteRequest"
      },
      "PlayerMoveRequest": {
        "properties": {
          "team_id": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Team Id",
            "description": "Which team the player should be moved to"
          }
        },
        "type": "object",
        "title": "PlayerMoveRequest"
      },
      "PlayerSession": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "description": "template type"
          },
          "session_ids": {
            "items": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1
            },
            "type": "array",
            "uniqueItems": true,
            "title": "Session Ids",
            "description": "Sessions the player is currently a part of for this session type, if any.",
            "default": []
          },
          "pending_invites": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PlayerSessionInvite"
            },
            "type": "object",
            "title": "Pending Invites",
            "description": "Pending invites, if any, for the current player in this session type",
            "default": {}
          },
          "reserved_sessions": {
            "items": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1
            },
            "type": "array",
            "uniqueItems": true,
            "title": "Reserved Sessions",
            "description": "Sessions that the player has a reserved place in, but has not yet been invited",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "PlayerSession",
        "description": "Information about the sessions of a specific type that a player is currently a member of, or invited to"
      },
      "PlayerSessionInvite": {
        "properties": {
          "session_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Session Id",
            "description": "Session ID for the invite"
          },
          "inviting_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Inviting Player Uuid",
            "description": "Player who sent the invite"
          }
        },
        "type": "object",
        "required": [
          "session_id"
        ],
        "title": "PlayerSessionInvite",
        "description": "Information about an invite to a session that a player received"
      },
      "PlayerSessions": {
        "properties": {
          "sessions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PlayerSession"
            },
            "type": "object",
            "title": "Sessions",
            "description": "Session associated with this player, and any pending invites",
            "default": {}
          },
          "last_updated_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          }
        },
        "type": "object",
        "title": "PlayerSessions",
        "description": "Information about all sessions that a player is currently a member of, or invited to"
      },
      "PlayerSwapRequest": {
        "properties": {
          "players": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "maxItems": 2,
            "minItems": 2,
            "title": "Players",
            "description": "Two player UUIDs for players who will swap teams"
          }
        },
        "type": "object",
        "required": [
          "players"
        ],
        "title": "PlayerSwapRequest",
        "description": "Request to swap two players on different teams"
      },
      "PlayerUpdateRequest": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data for the player",
            "default": {}
          }
        },
        "type": "object",
        "title": "PlayerUpdateRequest"
      },
      "PlayerVisibility": {
        "type": "string",
        "enum": [
          "ALL",
          "TEAM",
          "SELF",
          "NONE"
        ],
        "title": "PlayerVisibility",
        "description": "What subset of players any given player will have information about",
        "x-enum-varnames": [
          "ALL",
          "TEAM",
          "SELF",
          "NONE"
        ],
        "x-enum-descriptions": [
          "",
          "",
          "",
          ""
        ]
      },
      "PlayersToValidate": {
        "type": "string",
        "enum": [
          "leader",
          "all_members",
          "any_member"
        ],
        "title": "PlayersToValidate",
        "description": "Which subset of players in a session need to satisfy a ruleset for it to be considered valid",
        "x-enum-varnames": [
          "LEADER",
          "ALL_MEMBERS",
          "ANY_MEMBER"
        ],
        "x-enum-descriptions": [
          "Only the leader must be validated",
          "All members of a session must be validated",
          "Any single member must be validated"
        ]
      },
      "ProfileJoinMode": {
        "type": "string",
        "enum": [
          "normal",
          "backfill",
          "created_before"
        ],
        "title": "ProfileJoinMode",
        "description": "Mode that determines what types of match requests the ticket will appear in",
        "x-enum-varnames": [
          "NORMAL",
          "BACKFILL",
          "CREATED_BEFORE"
        ],
        "x-enum-descriptions": [
          "Ticket will be used to fulfill normal requests (players joining queue regularly to find games)",
          "Ticket will be used to fulfill backfill requests",
          "Ticket will be used in normal requests only after a specified amount of time. This makes tickets wait before having their linkings considered"
        ]
      },
      "QueueConfig": {
        "properties": {
          "queue_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Queue Id",
            "description": "ID to uniquely identify this queue"
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Flag for whether or not the queue is active, and can be joined or sessions created from it"
          },
          "ranking_type": {
            "type": "integer",
            "title": "Ranking Type",
            "description": "Which rank this queue should use MMR from to make matches from, and update at the end of match (1v1 MMR or 2v2 MMR for example)"
          },
          "num_sides": {
            "type": "integer",
            "title": "Num Sides",
            "description": "The number of sides a game in this queue will have (2 in a 1v1 and 3 in a 1v1v1 for example"
          },
          "max_players_per_side": {
            "type": "integer",
            "title": "Max Players Per Side",
            "description": "The maximum number of players that can be on each team"
          },
          "min_players_per_side": {
            "type": "integer",
            "title": "Min Players Per Side",
            "description": "The minimum number of players that can be on each team"
          },
          "max_queue_group_size": {
            "type": "integer",
            "title": "Max Queue Group Size",
            "description": "The maximum size of a group that can join this queue"
          },
          "match_making_template_group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Group Id",
            "description": "ID for which group of matchmaking templates/rules will be used when joining this queue"
          }
        },
        "type": "object",
        "required": [
          "queue_id",
          "active",
          "ranking_type",
          "num_sides",
          "max_players_per_side",
          "min_players_per_side",
          "max_queue_group_size",
          "match_making_template_group_id"
        ],
        "title": "QueueConfig",
        "description": "DEPRECATED - V1 Configuration about a specific queue"
      },
      "QueueConfigV2": {
        "properties": {
          "queue_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Queue Id",
            "description": "ID to uniquely identify this queue"
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Flag for whether or not the queue is active, and can be joined or sessions created from it"
          },
          "max_queue_group_size": {
            "type": "integer",
            "title": "Max Queue Group Size",
            "description": "The maximum size of a group that can join this queue"
          },
          "match_making_template_group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Group Id",
            "description": "ID for which group of matchmaking templates/rules will be used when joining this queue"
          },
          "legacy_config": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Legacy Config",
            "description": "Legacy config to help migrate clients",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "queue_id",
          "active",
          "max_queue_group_size",
          "match_making_template_group_id"
        ],
        "title": "QueueConfigV2",
        "description": "V2 Configuration about a specific queue"
      },
      "QueueJoinRequest": {
        "properties": {
          "queue_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Queue Id",
            "description": "ID of the queue to join"
          },
          "additional_join_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AdditionalJoinParams"
              }
            ],
            "title": "Additional Join Params",
            "description": "Additional fields put on the matchmaking ticket for open match to search with (see https://openmatch.dev/site/docs/reference/api/#searchfields)"
          },
          "map_preferences": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Map Preferences",
            "description": "List of map preferences in order from most desired, to least desired",
            "default": []
          },
          "passed_queue_time_seconds": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Passed Queue Time Seconds",
            "description": "Argument to artifcially add queue time to a ticket. Older tickets are considered for lower quaulity matches. This can be used to get faster matches at the expense of quality, or to restore a session's place in queue after a failure",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "queue_id"
        ],
        "title": "QueueJoinRequest",
        "description": "A request body to enter into a matchmaking queue"
      },
      "QueueJoinResponse": {
        "properties": {
          "ticket_id": {
            "type": "string",
            "title": "Ticket Id",
            "description": "ID for the newly created match making ticket"
          }
        },
        "type": "object",
        "required": [
          "ticket_id"
        ],
        "title": "QueueJoinResponse",
        "description": "A response for successfully joining a matchmaking queue"
      },
      "QueuesResponse": {
        "properties": {
          "queues": {
            "items": {
              "$ref": "#/components/schemas/QueueConfig"
            },
            "type": "array",
            "title": "Queues",
            "description": "List of queues"
          }
        },
        "type": "object",
        "required": [
          "queues"
        ],
        "title": "QueuesResponse",
        "description": "DEPRECATED - A list of configuration about queues"
      },
      "QueuesResponseV2": {
        "properties": {
          "queues": {
            "items": {
              "$ref": "#/components/schemas/QueueConfigV2"
            },
            "type": "array",
            "title": "Queues",
            "description": "List of queues"
          }
        },
        "type": "object",
        "required": [
          "queues"
        ],
        "title": "QueuesResponseV2",
        "description": "A list of configuration about queues"
      },
      "RankData": {
        "properties": {
          "rank_uuid": {
            "type": "string",
            "title": "Rank Uuid",
            "description": "UUID for this rank"
          },
          "mu": {
            "type": "number",
            "title": "Mu",
            "description": "Ticket's group mu for this rank"
          }
        },
        "type": "object",
        "required": [
          "rank_uuid"
        ],
        "title": "RankData"
      },
      "Region": {
        "properties": {
          "region_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Region Id",
            "description": "ID for this region"
          },
          "sort_order": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Sort Order",
            "description": "The sorting priority order for this region"
          },
          "custom_only": {
            "type": "boolean",
            "title": "Custom Only",
            "description": "Indicates if the region is for custom games only"
          },
          "description": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Description",
            "description": "Text description of the region"
          }
        },
        "type": "object",
        "required": [
          "region_id",
          "sort_order",
          "custom_only"
        ],
        "title": "Region",
        "description": "Information about a specific region"
      },
      "RegionsResponse": {
        "properties": {
          "regions": {
            "items": {
              "$ref": "#/components/schemas/Region"
            },
            "type": "array",
            "title": "Regions",
            "description": "List of all regions"
          },
          "cursor": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Cursor",
            "description": "Cursor to continue iterating through enabled regions. Non 0 cursor in the response means there are more regions. Pass the returned cursor up on a subsequent call to continue. A 0 cursor in the response means you have reached the end"
          }
        },
        "type": "object",
        "required": [
          "regions",
          "cursor"
        ],
        "title": "RegionsResponse",
        "description": "A list of regions and a cursor to continue iterating"
      },
      "Rule": {
        "properties": {
          "rule_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RuleType"
              }
            ],
            "description": "What type of rule this is"
          },
          "comparison_operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Operation"
              }
            ],
            "description": "Comparison operation to be performed"
          },
          "comparison_value": {
            "type": "integer",
            "title": "Comparison Value",
            "description": "Integer Value to compare to"
          },
          "comparison_value_set": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true,
            "title": "Comparison Value Set",
            "description": "Set of string values to compare to"
          },
          "item_id": {
            "type": "integer",
            "title": "Item Id",
            "description": "Id of the item we are comparing if this is an inventory rule"
          }
        },
        "type": "object",
        "required": [
          "rule_type",
          "comparison_operation"
        ],
        "title": "Rule",
        "description": "A rule to determine which MatchMakingTemplate should be used on a session entering matchmaking"
      },
      "RuleType": {
        "type": "string",
        "enum": [
          "Inventory",
          "InventoryLevel",
          "JoiningSessionSize",
          "RegionList"
        ],
        "title": "RuleType",
        "description": "What type of rule is being evaluated",
        "x-enum-varnames": [
          "INVENTORY",
          "INVENTORY_LEVEL",
          "JOINING_SESSION_SIZE",
          "REGION_LIST"
        ],
        "x-enum-descriptions": [
          "Comparing the count of a specific item that a player owns",
          "Comparing the level of a specific item that a player owns",
          "Comparing the number of session members to be queued",
          "Comparing the region of the session to a list of regions"
        ]
      },
      "SelfSessionPlayerUpdateRequest": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionPlayerStatus"
              }
            ],
            "description": "Status that the player would like after the request is complete. Note that some join operations may promote the player from `member` to `leader`",
            "default": "member"
          },
          "client_version": {
            "type": "string",
            "title": "Client Version",
            "description": "Semver for updated client"
          },
          "client_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientSettings"
              }
            ],
            "title": "Client Settings",
            "description": "Which input type and platform the client is using"
          },
          "team_id": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Team Id",
            "description": "Which team the player is one"
          },
          "crossplay_preferences": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossplayPreferences"
              }
            ],
            "title": "Crossplay Preferences",
            "description": "Client's desired crossplay settings to determine which other clients it can play with. If not defined, assumed to be as permissive as possible"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "player-defined custom data",
            "default": {}
          },
          "password": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Password",
            "description": "Password to join a password protected session that you are not invited to"
          },
          "friend_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Friend Uuid",
            "description": "UUID of the friend whose session you are joining"
          }
        },
        "type": "object",
        "required": [
          "client_version",
          "client_settings",
          "team_id"
        ],
        "title": "SelfSessionPlayerUpdateRequest",
        "description": "A request body for a player updating information about themselves"
      },
      "Session": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "description": "template type"
          },
          "session_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Session Id",
            "description": "unique ID for this session within its type"
          },
          "instance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceInfo"
              }
            ],
            "title": "Instance",
            "description": "Info about the current active instance for the session"
          },
          "match": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchInfo"
              }
            ],
            "title": "Match",
            "description": "DEPRECATED Info about the current match in the instance",
            "deprecated": true
          },
          "matchmaking_results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchmakingResults"
              }
            ],
            "title": "Matchmaking Results",
            "description": "Info about the matchmaking results that resulted in this session"
          },
          "matchmaking": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchmakingInfo"
              }
            ],
            "title": "Matchmaking",
            "description": "Info about the matchmaking state of the session, if it is in the process of matchmaking"
          },
          "backfill": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BackfillInfo"
              }
            ],
            "title": "Backfill",
            "description": "Info about the open-match backfill object for the session"
          },
          "browser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrowserInfo"
              }
            ],
            "title": "Browser",
            "description": "Info about the browser state of the session"
          },
          "joinable": {
            "type": "boolean",
            "title": "Joinable",
            "description": "DEPRECATED. Use Joinability object instead. Is this session freely joinable by players without an invite?",
            "deprecated": true
          },
          "joinability": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionJoinability"
              }
            ],
            "title": "Joinability",
            "description": "Flags regarding the joinability of this session"
          },
          "teams": {
            "items": {
              "$ref": "#/components/schemas/SessionTeam"
            },
            "type": "array",
            "title": "Teams",
            "description": "List of teams of players currently in the session"
          },
          "teams_suppressed": {
            "type": "boolean",
            "title": "Teams Suppressed",
            "description": "Flag showing if the list of players has been automatically suppressed due to its size.",
            "default": false
          },
          "platform_session": {
            "items": {
              "$ref": "#/components/schemas/PlatformSession"
            },
            "type": "array",
            "title": "Platform Session",
            "description": "Child Platform Sessions for this session.  A player joining one of the child platform sessions implicitly joins the parent session",
            "default": []
          },
          "platform_scouts": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PlatformScout"
            },
            "type": "object",
            "title": "Platform Scouts",
            "description": "List of platform scouts for this session"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Leader Player or instance defined custom data about this session",
            "default": {}
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "region_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Region Id",
            "description": "Preferred region for the instance and match to take place in"
          },
          "created_by_matchmaking": {
            "type": "boolean",
            "title": "Created By Matchmaking",
            "description": "Flag of whether or not this session was created by matchmaking or not",
            "default": false
          },
          "short_code": {
            "type": "string",
            "maxLength": 12,
            "minLength": 5,
            "title": "Short Code",
            "description": "Shortened join code associated with this session"
          }
        },
        "type": "object",
        "required": [
          "type",
          "session_id",
          "joinable",
          "teams",
          "created"
        ],
        "title": "Session",
        "description": "A session resource"
      },
      "SessionInviteResponse": {
        "properties": {
          "players": {
            "items": {
              "$ref": "#/components/schemas/SessionPlayerUpdateResponse"
            },
            "type": "array",
            "title": "Players",
            "description": "List of players that were updated"
          }
        },
        "type": "object",
        "required": [
          "players"
        ],
        "title": "SessionInviteResponse",
        "description": "Response to a request to update a session cohort"
      },
      "SessionJoinResponse": {
        "properties": {
          "session_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Session Id",
            "description": "Session ID the player is now a part of"
          }
        },
        "type": "object",
        "required": [
          "session_id"
        ],
        "title": "SessionJoinResponse",
        "description": "Response when a player successfully joins a session"
      },
      "SessionJoinability": {
        "properties": {
          "open": {
            "type": "boolean",
            "title": "Open",
            "description": "All players can join without an invite. If enabled, it overwrites other permissions",
            "default": false
          },
          "friends": {
            "type": "boolean",
            "title": "Friends",
            "description": "Friends can join this session without an invite",
            "default": false
          },
          "platform": {
            "type": "boolean",
            "title": "Platform",
            "description": "Players can join through platform sessions",
            "default": true
          }
        },
        "type": "object",
        "title": "SessionJoinability"
      },
      "SessionPermissions": {
        "properties": {
          "player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Player Uuid",
            "description": "Unique identifier for this player"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/IntraSessionPermissions"
            },
            "type": "array",
            "uniqueItems": true,
            "description": "List of intra session permissions for a specific player",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "player_uuid"
        ],
        "title": "SessionPermissions"
      },
      "SessionPlayer": {
        "properties": {
          "player_id": {
            "type": "integer",
            "title": "Player Id",
            "description": "Legacy id for this player"
          },
          "player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Player Uuid",
            "description": "UUID for this player"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionPlayerStatus"
              }
            ],
            "description": "Status of the player in the session"
          },
          "inviting_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Inviting Player Uuid",
            "description": "UUID of the player who sent this players invite, if any"
          },
          "source_session_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Source Session Id",
            "description": "The UUID of the session that this player was invited from"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "player-defined custom data",
            "default": {}
          },
          "version": {
            "type": "string",
            "format": "semver",
            "title": "Version",
            "description": "Product Client Version number.  Used for compatibility checking with other players and instances",
            "example": "21.3.15-beta+12345"
          },
          "client_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientSettings"
              }
            ],
            "title": "Client Settings",
            "description": "Which input type and platform the client is using"
          },
          "crossplay_preferences": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossplayPreferences"
              }
            ],
            "title": "Crossplay Preferences",
            "description": "Client's desired crossplay settings to determine which other clients it can play with. If not defined, assumed to be as permissive as possible"
          },
          "invited": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "joined": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "session_permissions": {
            "items": {
              "$ref": "#/components/schemas/IntraSessionPermissions"
            },
            "type": "array",
            "uniqueItems": true,
            "description": "A list of intra session permissions granted to this specific player",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "player_uuid",
          "status"
        ],
        "title": "SessionPlayer",
        "description": "A player resource in a session"
      },
      "SessionPlayerStatus": {
        "type": "string",
        "enum": [
          "leader",
          "member",
          "invited",
          "reserved"
        ],
        "title": "SessionPlayerStatus",
        "description": "What membership state players have in a session",
        "x-enum-varnames": [
          "leader",
          "member",
          "invited",
          "reserved"
        ],
        "x-enum-descriptions": [
          "Player is the leader of the session. Is allowed to perform admin actions on the session",
          "Player is an active member of the session. Is allowed basic actions on the session",
          "Player has been invited to the session, but has not accepted or declined",
          "Player's spot has been reserved on the session, but the player has not yet been notified"
        ]
      },
      "SessionPlayerUpdateRequest": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionPlayerStatus"
              }
            ],
            "description": "Status that the player would like after the request is complete.  Note that some join operations may promote the player from `member` to `leader`",
            "default": "member"
          },
          "team_id": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Team Id",
            "description": "Which team the player should be on"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "player-defined custom data",
            "default": {}
          },
          "overflow_action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TeamOverflowAction"
              }
            ],
            "description": "How we should handle too many players being invited to the chosen team",
            "default": "fail"
          }
        },
        "type": "object",
        "title": "SessionPlayerUpdateRequest",
        "description": "A request body to update information about a player in a session"
      },
      "SessionPlayerUpdateResponse": {
        "properties": {
          "player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Player Uuid",
            "description": "Player UUID of the player updated"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionPlayerStatus"
              }
            ],
            "description": "Status of the player after the request is completed"
          },
          "team_id": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Team Id",
            "description": "Which team the player joined"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Resulting custom data about the player",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "status",
          "team_id"
        ],
        "title": "SessionPlayerUpdateResponse",
        "description": "Response to a request to update a player in a session"
      },
      "SessionPlayersUpdateResponse": {
        "properties": {
          "players": {
            "items": {
              "$ref": "#/components/schemas/SessionPlayerUpdateResponse"
            },
            "type": "array",
            "title": "Players",
            "description": "List of updated players"
          }
        },
        "type": "object",
        "required": [
          "players"
        ],
        "title": "SessionPlayersUpdateResponse"
      },
      "SessionShortCodeResponse": {
        "properties": {
          "short_code": {
            "type": "string",
            "maxLength": 12,
            "minLength": 5,
            "title": "Short Code",
            "description": "Generated short code for session"
          }
        },
        "type": "object",
        "required": [
          "short_code"
        ],
        "title": "SessionShortCodeResponse"
      },
      "SessionTeam": {
        "properties": {
          "players": {
            "items": {
              "$ref": "#/components/schemas/SessionPlayer"
            },
            "type": "array",
            "title": "Players",
            "description": "Players currently on this team"
          },
          "max_size": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Max Size",
            "description": "Maximum number of players allowed on this team"
          },
          "team_id": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Team Id",
            "description": "Which team this is"
          },
          "ticket_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Ticket Ids",
            "description": "Matchmaking tickets that were assigned to this team"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data about this team"
          }
        },
        "type": "object",
        "required": [
          "players",
          "max_size"
        ],
        "title": "SessionTeam",
        "description": "A team of SessionPlayers in a session"
      },
      "SessionTemplate": {
        "properties": {
          "session_type": {
            "type": "string",
            "title": "Session Type",
            "description": "unique name for this template"
          },
          "engine_session_type": {
            "type": "string",
            "title": "Engine Session Type",
            "description": "Engine identifier for sessions of this type.  For UE, this is commonly `Party` or `Game`.",
            "default": "Game"
          },
          "can_join_matchmaking": {
            "type": "boolean",
            "title": "Can Join Matchmaking",
            "description": "Are sessions of this type allowed to join matchmaking?",
            "default": false
          },
          "can_be_created_by_players_directly": {
            "type": "boolean",
            "title": "Can Be Created By Players Directly",
            "description": "Are players allowed to create sessions of this type?",
            "default": false
          },
          "joinable": {
            "type": "boolean",
            "title": "Joinable",
            "description": "DEPRECATED. Use 'attempt_auto_join' instead. Should players join existing sessions of this type before creating a new one",
            "default": false
          },
          "attempt_auto_join": {
            "type": "boolean",
            "title": "Attempt Auto Join",
            "description": "Should players join existing sessions of this type before creating a new one",
            "default": false
          },
          "default_public": {
            "type": "boolean",
            "title": "Default Public",
            "description": "Should sessions of this type should be publicly joinable by default",
            "default": false
          },
          "auto_add_to_browser": {
            "type": "boolean",
            "title": "Auto Add To Browser",
            "description": "Should session be automatically added to the browser list",
            "default": false
          },
          "auto_browser_params": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Auto Browser Params",
            "description": "Browser parameters that can be used to filter results",
            "default": {}
          },
          "can_be_added_to_server_browser": {
            "type": "boolean",
            "title": "Can Be Added To Server Browser",
            "description": "Are sessions of this type able to be added to the server browser by players?",
            "default": false
          },
          "keep_alive_on_empty": {
            "type": "boolean",
            "title": "Keep Alive On Empty",
            "description": "Should the session stay around, or be destroyed when the last player leaves it?",
            "default": false
          },
          "platform_templates": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PlatformSessionTemplate"
            },
            "type": "object",
            "title": "Platform Templates",
            "description": "Platform-Specific session mappings that are used to coordinate Rally Here sessions with OnlineSubsystem sessions",
            "default": {}
          },
          "auto_startup_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceStartupParams"
              }
            ],
            "title": "Auto Startup Params",
            "description": "Parameters used to start an instance for this session when it is created. Has lower priority than auto_startup_instance_template_id"
          },
          "auto_startup_instance_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Auto Startup Instance Template Id",
            "description": "ID of instance request template to be used to automatically request an instance on creation of a session of this type. Takes priority over auto_startup_params"
          },
          "min_session_count": {
            "type": "integer",
            "title": "Min Session Count",
            "description": "Minimum number of this type of session to be running at any given time per region.",
            "default": 0
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Product-defined custom data about this session type",
            "default": {}
          },
          "num_teams": {
            "type": "integer",
            "maximum": 50.0,
            "minimum": 1.0,
            "title": "Num Teams",
            "description": "The number of teams this session type can have",
            "default": 1
          },
          "players_per_team": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Players Per Team",
            "description": "The number of players that can be on each team",
            "default": 4
          },
          "can_change_own_team": {
            "type": "boolean",
            "title": "Can Change Own Team",
            "description": "Whether or not a player can change which team they are on. If true, they are able to. If False, they player's team can only be changed by an admin",
            "default": true
          },
          "notify_on_reservation": {
            "type": "boolean",
            "title": "Notify On Reservation",
            "description": "If players should be notified when they are reserved in this type of session instead of waiting until they're invited",
            "default": true
          },
          "player_visibility": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerVisibility"
              }
            ],
            "description": "What subset of players a regular client will receive info about. With sufficiently large sessions, visibility will automatically be lowered",
            "default": "ALL"
          },
          "admin_player_visibility": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerVisibility"
              }
            ],
            "description": "What subset of players an admin client with elevated privileges will receive info about",
            "default": "ALL"
          },
          "player_notification_frequency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerVisibility"
              }
            ],
            "description": "What subset of notifications a client should receive about players in a session. With sufficiently large sessions, frequency will be automatically lowered",
            "default": "ALL"
          },
          "admin_player_notification_frequency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerVisibility"
              }
            ],
            "description": "What subset of notifications an admin client with elevated privileges will receive about players in a session",
            "default": "ALL"
          },
          "player_culling_timeout": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Player Culling Timeout",
            "description": "How many seconds must pass with a player not querying a session before they get culled. If unset or 0, then players will not be culled"
          }
        },
        "type": "object",
        "required": [
          "session_type"
        ],
        "title": "SessionTemplate",
        "description": "Template used to create new RallyHere sessions of a specific type. Configurable in the developer portal"
      },
      "SessionTemplates": {
        "properties": {
          "templates": {
            "additionalProperties": {
              "$ref": "#/components/schemas/SessionTemplate"
            },
            "type": "object",
            "title": "Templates",
            "description": "Dictionary of SessionTemplates keyed on their template type",
            "default": {}
          }
        },
        "type": "object",
        "title": "SessionTemplates",
        "description": "A mapping of RallyHere session template types to the templates"
      },
      "SessionUpdate": {
        "properties": {
          "region_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Region Id",
            "description": "Preferred region for the instance and match to take place in"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Leader Player or instance defined custom data about this session"
          },
          "joinable": {
            "type": "boolean",
            "title": "Joinable",
            "description": "DEPRECATED. Use joinability object instead. Flag for if players can freely join this session without an invite"
          },
          "joinability": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionJoinability"
              }
            ],
            "title": "Joinability",
            "description": "Flags regarding the joinability of this session"
          },
          "teams": {
            "items": {
              "$ref": "#/components/schemas/TeamUpdate"
            },
            "type": "array",
            "maxItems": 50,
            "title": "Teams",
            "description": "List of team size updates for this session. The length of the list represents the number of desired teams"
          },
          "password": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Password",
            "description": "A password to join this session"
          }
        },
        "type": "object",
        "title": "SessionUpdate",
        "description": "A request body to update information about a session resource"
      },
      "TeamOverflowAction": {
        "type": "string",
        "enum": [
          "fail",
          "allow_overflow",
          "partial_with_overflow",
          "partial_without_overflow",
          "overfill"
        ],
        "title": "TeamOverflowAction",
        "description": "How too many players being invited to a single team should be handled",
        "x-enum-varnames": [
          "fail",
          "allow_overflow",
          "partial_with_overflow",
          "partial_without_overflow",
          "overfill"
        ],
        "x-enum-descriptions": [
          "Raise an error when too many players are invited to the same team",
          "Attempt to fill other teams when too many players are invited to one team. Will return an error if there is not enough room for all players",
          "Invite as many players as possible, and allow them to overflow onto other teams if necessary. Some players may not get invited. Will return an error if no players are invited",
          "Invite as many players as possible to the chosen team, and do not allow them to overflow. Some players may not get invited. Will return an error if no players are invited",
          "Overfill the specific team (ex. allow 6 players on a team that normally only allows 5)"
        ]
      },
      "TeamUpdate": {
        "properties": {
          "max_size": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 1.0,
            "title": "Max Size",
            "description": "Maximum number of players for this team"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data about this team"
          }
        },
        "type": "object",
        "title": "TeamUpdate",
        "description": "An update to a specific team's number of max players"
      },
      "TicketData": {
        "properties": {
          "ticket_id": {
            "type": "string",
            "title": "Ticket Id",
            "description": "Unique ID for this ticket"
          },
          "player_uuids": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "title": "Player Uuids",
            "description": "List of Player UUIDS that are associated with this ticket",
            "default": []
          },
          "queue_join_datetime": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "region_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Region Id",
            "description": "Which region this ticket was created for"
          },
          "queue_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Queue Id",
            "description": "Which queue was used to create this ticket"
          },
          "profile_ids": {
            "items": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1
            },
            "type": "array",
            "title": "Profile Ids",
            "description": "List of profiles that were being considered for this ticket"
          },
          "additional_join_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AdditionalJoinParams"
              }
            ],
            "title": "Additional Join Params",
            "description": "Additional join params specified on queue join"
          },
          "rank_data": {
            "items": {
              "$ref": "#/components/schemas/RankData"
            },
            "type": "array",
            "title": "Rank Data",
            "description": "List of rank data on the ticket",
            "default": []
          },
          "queued_session_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Queued Session Id",
            "description": "The session this ticket belonged to",
            "default": "unknown"
          }
        },
        "type": "object",
        "required": [
          "ticket_id",
          "queue_join_datetime",
          "region_id",
          "queue_id",
          "profile_ids"
        ],
        "title": "TicketData"
      },
      "UpdateBackfillRequest": {
        "properties": {
          "instance_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Instance Id",
            "description": "The instance ID for this backfill request"
          },
          "additional_join_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AdditionalJoinParams"
              }
            ],
            "title": "Additional Join Params",
            "description": "Additional fields put on the matchmaking ticket for open match to search with (see https://openmatch.dev/site/docs/reference/api/#searchfields)"
          },
          "teams": {
            "items": {
              "$ref": "#/components/schemas/BackfillTeam"
            },
            "type": "array",
            "title": "Teams",
            "description": "The teams and number of players that need to be backfilled. Leaving this out (or supplying an empty list) is treated as no players are currently required",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "instance_id"
        ],
        "title": "UpdateBackfillRequest"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "VivoxSessionActionSingle": {
        "type": "string",
        "enum": [
          "join",
          "join_muted",
          "kick",
          "mute",
          "trxn"
        ],
        "title": "VivoxSessionActionSingle",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "JOIN",
          "JOIN_MUTED",
          "KICK",
          "MUTE",
          "TRANSCRIBE"
        ],
        "x-enum-descriptions": [
          "",
          "",
          "",
          "",
          ""
        ]
      },
      "VoipSessionType": {
        "type": "string",
        "enum": [
          "session",
          "team"
        ],
        "title": "VoipSessionType",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "SESSION",
          "TEAM"
        ],
        "x-enum-descriptions": [
          "",
          ""
        ]
      },
      "VoipTokenResponse": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token",
            "description": "Signed auth voip login token for a specific client"
          },
          "issuer": {
            "type": "string",
            "title": "Issuer",
            "description": "Issuer for client's login token"
          },
          "server": {
            "type": "string",
            "title": "Server",
            "description": "Server for voip login"
          },
          "channel_name": {
            "type": "string",
            "title": "Channel Name",
            "description": "Channel name for the generated token if relevant"
          }
        },
        "type": "object",
        "required": [
          "token",
          "issuer",
          "server"
        ],
        "title": "VoipTokenResponse"
      }
    },
    "securitySchemes": {
      "HTTPBearerHeadersOrCookie": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "Sessions",
      "description": "\nThis API is for the creation and management of sessions, which are just generic groups of players, and operations\non those sessions, such as joining matchmaking.\n"
    },
    {
      "name": "Deserter",
      "description": "Deserter is a system to prevent players from joining matchmaking queues.  Endpoints allow setting the deserter status of individual players, and globally clearing the deserter status for all players for emergency maintenance."
    }
  ]
}
