{
  "openapi": "3.1.0",
  "info": {
    "title": "session-api",
    "description": "Hi-Rez Studios session-api.",
    "version": "0.2.0"
  },
  "servers": [
    {
      "url": "/session"
    }
  ],
  "paths": {
    "/v1/template": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get All Session Templates",
        "description": "Get the config about all session templates\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:read:config`\n\n\nRequired Session Permissions: None",
        "operationId": "get_all_session_templates",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionTemplates"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/template/{session_type}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Session Template By Type",
        "description": "Get config about a session template by ID\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:read:config`\n\n\nRequired Session Permissions: None",
        "operationId": "get_session_template_by_type",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Type"
            },
            "name": "session_type",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionTemplate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/browser": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Browser Sessions By Type",
        "description": "Get all public sessions of a specific type\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:read:browser`, `session:*`\n\n\nRequired Permissions: None",
        "operationId": "get_browser_sessions_by_type",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Type"
            },
            "name": "session_type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Cursor",
              "default": 0
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "title": "Page Size",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create Or Join Session",
        "description": "Join the first publicly available session of given type. If there is no public session, and the session type\npermits player made sessions, create a new session and put the player in it\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:create`, `session:*`\n\n\nRequired Session Permissions: None",
        "operationId": "create_or_join_session",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrJoinRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionJoinResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Session By Id",
        "description": "Get Session by ID. This request will return limited results for non-members of the session, such as excluding info for \nhow to connect to the instance. Elevated permissions can bypass that restriction\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:read:any`, `session:*`, `session:read:self`\n\n\nRequired Session Permissions: None for limited results. `SessionPermissions.active_in_session` to get complete results for users who do not have the `session:read:any` auth permission",
        "operationId": "get_session_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Session By Id",
        "description": "Update session info by session id\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:update:any`, `session:*`, `session:update:self`\n\n\nRequired Session Permissions: `SessionPermissions.session_admin` for users who do not have the `session:update:any` auth permission",
        "operationId": "update_session_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/allocation/{allocation_id}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Session By Allocation Id",
        "description": "Get session by allocation ID. Returns the same limited results as getting the session by session id\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:read:allocation`, `session:*`\n\n\nRequired Session Permissions: None",
        "operationId": "get_session_by_allocation_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Allocation Id"
            },
            "name": "allocation_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/browser": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Post Browser Info",
        "description": "Register session in the public browser\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:update:browser`\n\n\nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:*` auth permission",
        "operationId": "post_browser_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrowserInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowserInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Delete Browser Info",
        "description": "Delete the session from the public browser\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:update:browser`\n\n\nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:*` auth permission",
        "operationId": "delete_browser_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Browser Info",
        "description": "Update the browser info for the session\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:update:browser`\n\n\nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:*` auth permission",
        "operationId": "update_browser_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrowserInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowserInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/instance": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create Instance Request",
        "description": "Request an instance be spawned for the session, or register self as a host of the instance\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:update:any`, `session:*`, `session:update:self`\n\n             \nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:update:any` auth permission",
        "operationId": "create_instance_request",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "End Instance",
        "description": "Unregister the instance from the session.\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:update:any`, `session:*`, `session:update:self`\n\n             \nRequired Session Permissions: `SessionPermissions.session_host` if user does not have the `session:update:any` auth permission",
        "operationId": "end_instance",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "204": {
            "description": "No Content",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Instance Info",
        "description": "Update info about the instance\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:update:any`, `session:*`, `session:update:self`\n\n             \nRequired Session Permissions: `SessionPermissions.session_host` if user does not have the `session:update:any` auth permission",
        "operationId": "update_instance_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceInfoUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/match": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Start Match",
        "description": "Begin a new match for the current session, on the current instance\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:update:any`, `session:*`, `session:update:self`\n\n             \nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:update:any` auth permission",
        "operationId": "start_match",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "End Match",
        "description": "Unregister the match from the session.\n               \nRequired Permissions: \n\tFor any player (including themselves) any of: `session:update:any`, `session:*`, `session:update:self`\n\n             \nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:update:any` auth permission",
        "operationId": "end_match",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Match Info",
        "description": "Update info about a match\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:update:any`, `session:*`, `session:update:self`\n\n             \nRequired Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:update:any` auth permission",
        "operationId": "update_match_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/player/me": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Join Session By Id Self",
        "description": "Join a session with currently authed player\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:update-player:any`\n\tFor the player themselves: `session:update-player:self`\n\nRequired Session Permissions: None",
        "operationId": "join_session_by_id_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelfSessionPlayerUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPlayerUpdateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Leave Session By Id Self",
        "description": "Leave a session with currently authed player\n\nRequired Permissions: \n\tFor any player (including themselves): `session:*`\n\tFor the player themselves: `session:update:self`\n\nRequired Permissions: None",
        "operationId": "leave_session_by_id_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/player/uuid/{player_uuid}": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Session Player By Uuid",
        "description": "Add or invite a player to the session, or change the status of a player already in the session\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:promote:any`, `session:promote:self`, `session:*`\n\n\nRequired Session Permissions: None if session is publicly joinable or the player has been invited. \n`SessionPermissions.session_admin` for other operations",
        "operationId": "update_session_player_by_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionPlayerUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPlayerUpdateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Kick Player From Session By Uuid",
        "description": "Kick or Remove a player from a session, or cancel an invite for a player to the session\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:update-player:any`\n\tFor the player themselves: `session:update-player:self`\n\nRequired Session Permissions: None for users operating on themselves. \n`SessionPermissions.session_admin` for operating on other players in your session",
        "operationId": "kick_player_from_session_by_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/player/id/{player_id}": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Session Player By Id",
        "description": "Add or invite a player to the session, or change the status of a player already in the session\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:promote:any`, `session:promote:self`, `session:*`\n\n\nRequired Session Permissions: None if session is publicly joinable or the player has been invited.\n`SessionPermissions.session_admin` for other operations\n\n**DEPRECATED** - Use the player/uuid endpoint instead",
        "operationId": "update_session_player_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Player Id"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionPlayerUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPlayerUpdateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Kick Player From Session By Id",
        "description": "Kick or Remove a player from a session, or cancel an invite for a player to the session\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:update-player:any`\n\tFor the player themselves: `session:update-player:self`\n\nRequired Session Permissions: None for players operating on themselves.\n`SessionPermissions.session_admin` for operating on other players in your session\n\n**DEPRECATED** - Use the player/uuid endpoint instead",
        "operationId": "kick_player_from_session_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Player Id"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/event": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Session Events",
        "description": "Get all events for the session.  Empty list means there is no event history for it.\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:read:event`, `session:read-player:any`\n\n\nRequired Session Permissions: None",
        "operationId": "get_session_events",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Page Num",
              "default": 0
            },
            "name": "page_num",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "title": "Page Size",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionEvents"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create Session Event",
        "description": "Create an event in the log for this session.\nInternal session operations will create new events that are accessible from the get request.\n\nPlayer clients and instances are expected to create events here when something occurs on their clients that is\nrelevant.\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:update:any`, `session:*`, `session:update:event`\n\n\nRequired Session Permissions: None",
        "operationId": "create_session_event",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionEventCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/me/session": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Player Sessions Self",
        "description": "Get Sessions associated the current player\n\nRequired Auth Permissions: `session:read-player:self`\n            \nRequired Session Permissions: None",
        "operationId": "get_player_sessions_self",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerSessions"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/uuid/{player_uuid}/session": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Player Sessions By Uuid",
        "description": "Get Sessions associated with a player by uuid\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:read-player:any`\n\tFor the player themselves: `session:read-player:self`\n\nRequired Session Permissions: None",
        "operationId": "get_player_sessions_by_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerSessions"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/id/{player_id}/session": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Player Sessions",
        "description": "Get Sessions associated with a player by id\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:read-player:any`\n\tFor the player themselves: `session:read-player:self`\n\nRequired Session Permissions: None\n\n**DEPRECATED** - Use player/uuid endpoint instead",
        "operationId": "get_player_sessions",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Player Id"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerSessions"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/connection-info": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Connection Info Self",
        "description": "Get public connection info for self\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:read:config`\n\n\nRequired Permissions: None",
        "operationId": "get_connection_info_self",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "X-Forwarded-For",
              "default": ""
            },
            "name": "x-forwarded-for",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/queue": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Join Queue",
        "description": "Add session to a matchmaking queue\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:update:any`, `session:*`, `session:update:self`\n\n\nRequired Session Permissions: `SessionPermissions.session_admin`",
        "operationId": "join_queue",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueueJoinRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueJoinResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Leave Queue",
        "description": "Remove session from a matchmaking queue\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:update:any`, `session:*`, `session:update:self`\n\n               \nRequired Session Permissions: `SessionPermissions.session_admin`",
        "operationId": "leave_queue",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/match-made-session": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create Match",
        "description": "Create a match session based on matchmaking results. Only used by the matchmaking system, and not players\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:update:any`, `session:*`\n\n\nRequired Session Permissions: None",
        "operationId": "create_match",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingSessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Session doesn't exist or Player is not a member of the session.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/queues": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "Get All Queue Info",
        "description": "Get all the available and active queues that sessions can try to join\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:read:config`\n\n\nRequired Session Permissions: None",
        "operationId": "get_all_queue_info",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Cursor",
              "default": 0
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "title": "Page Size",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueuesResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/instance-launch-templates/{instance_launch_template_id}": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "Get All Map Game Info",
        "description": "Get the config used to launch an instance by the launch template id. Launch template ID can be found in\nMatchMakingProfiles that are return by the `/v1/match-making-templates/` endpoint\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:read:config`\n\n\nRequired Session Permissions: None",
        "operationId": "get_all_map_game_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Instance Launch Template Id"
            },
            "name": "instance_launch_template_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceLaunchTemplate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/match-making-templates/{template_group_id}": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "Get Match Making Templates",
        "description": "Get match making templates, rules, and profiles for a template group. Groups can be found on the queue information\nfrom the `/v1/queues` endpoint\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:read:config`\n\n            \nRequired Session Permissions: None",
        "operationId": "get_match_making_templates",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Template Group Id"
            },
            "name": "template_group_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingTemplateGroup"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/session/{session_id}/instance/fubar": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Report Fubar",
        "description": "Report an instance as fubar with a reason and optional metadata. Results will be graphed on your product's grafana page\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:update:fubar`, `session:*`\n\n\nRequired Session Permissions: `SessionPermissions.session_admin`",
        "operationId": "report_fubar",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceFubar"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FubarResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/regions": {
      "get": {
        "tags": [
          "Regions"
        ],
        "summary": "Get All Regions",
        "description": "Get all of the enabled regions and their configuration\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:read:config`\n\n\nRequired Session Permissions: None",
        "operationId": "get_all_regions",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Cursor",
              "default": 0
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "title": "Page Size",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegionsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/platform/{platform}/platform-session/{platform_session_id_base64}/session/{session_id}": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Add Platform Session To Rally Here Session",
        "description": "Add a platform session to an existing RallyHere session. The requesting player will be added to the platform session, and be made its leader\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:update:platform`, `session:*`\n\n\nRequired Session Permissions: `SessionPermissions.active_in_session` for users that do not have the `session:update:any` auth permission",
        "operationId": "add_platform_session_to_rally_here_session",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1,
              "title": "Platform Session Id Base64"
            },
            "name": "platform_session_id_base64",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Session Id"
            },
            "name": "session_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSession"
                }
              }
            }
          },
          "403": {
            "description": "User is not authenticated, or does not have sufficient role access to perform request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Platform Session or Platform Player doesn't exist.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/platform/{platform}/platform-session/{platform_session_id_base64}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get Platform Session Info",
        "description": "Get information about a platform session\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:read:platform`\n\n\nRequired Session Permissions: `SessionPermissions.active_in_session` for users that do not have the `session:read:any` auth permission",
        "operationId": "get_platform_session_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1,
              "title": "Platform Session Id Base64"
            },
            "name": "platform_session_id_base64",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSession"
                }
              }
            }
          },
          "403": {
            "description": "User is not authenticated, or does not have sufficient role access to perform request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Platform Session or Platform Player doesn't exist.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/platform/{platform}/platform-session/{platform_session_id_base64}/player/{player_uuid}": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Join Session By Platform Session By Uuid",
        "description": "Join a platform session by platform ID and parent platform session id\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:update-player:any`\n\tFor the player themselves: `session:update-player:self`\n\nRequired Session Permissions: None",
        "operationId": "join_session_by_platform_session_by_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1,
              "title": "Platform Session Id Base64"
            },
            "name": "platform_session_id_base64",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Player Id"
            },
            "name": "player_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "403": {
            "description": "User is not authenticated, or does not have sufficient role access to perform request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Platform Session or Platform Player doesn't exist.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Leave Session By Platform Session By Uuid",
        "description": "Leave a platform session by platform ID and parent platform session id\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:update-player:any`\n\tFor the player themselves: `session:update-player:self`\n\nRequired Session Permissions: None",
        "operationId": "leave_session_by_platform_session_by_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1,
              "title": "Platform Session Id Base64"
            },
            "name": "platform_session_id_base64",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "User is not authenticated, or does not have sufficient role access to perform request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Platform Session or Platform Player doesn't exist.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Sessions"
        ],
        "summary": "Update Platform Player By Platform Session Id",
        "description": "Promote another player in the platform session to be leader\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:update-player:any`\n\tFor the player themselves: `session:update-player:self`\n\nRequired Platform Session Permissions: `Leader`",
        "operationId": "update_platform_player_by_platform_session_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1,
              "title": "Platform Session Id Base64"
            },
            "name": "platform_session_id_base64",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSession"
                }
              }
            }
          },
          "403": {
            "description": "User is not authenticated, or does not have sufficient role access to perform request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Platform Session or Platform Player doesn't exist.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/platform/{platform}/platform-session/{platform_session_id_base64}/player/me": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Join Session By Platform Session Id Self",
        "description": "Join a platform session by ID, and the parent session\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:update-player:any`\n\tFor the player themselves: `session:update-player:self`\n\nRequired Session Permissions: None",
        "operationId": "join_session_by_platform_session_id_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1,
              "title": "Platform Session Id Base64"
            },
            "name": "platform_session_id_base64",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            },
            "name": "platform",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "403": {
            "description": "User is not authenticated, or does not have sufficient role access to perform request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Platform Session or Platform Player doesn't exist.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Leave Session By Platform Session Self",
        "description": "Leave a platform session by platform ID and parent platform session id\n\nRequired Permissions: \n\tFor any player (including themselves) any of: `session:*`, `session:update-player:any`\n\tFor the player themselves: `session:update-player:self`\n\nRequired Session Permissions: None",
        "operationId": "leave_session_by_platform_session_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1,
              "title": "Platform Session Id Base64"
            },
            "name": "platform_session_id_base64",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            },
            "name": "platform",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "User is not authenticated, or does not have sufficient role access to perform request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Platform Session or Platform Player doesn't exist.  See error code for more info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AdditionalJoinParams": {
        "properties": {
          "double_args": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Double Args",
            "description": "Additional double arguments to add to the matchmaking ticket",
            "default": {}
          },
          "string_args": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "String Args",
            "description": "Additional string arguments to add to the matchmaking ticket",
            "default": {}
          },
          "tags": {
            "items": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "array",
            "title": "Tags",
            "description": "Additional tags to add to the matchmaking ticket",
            "default": []
          },
          "extensions": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Extensions",
            "description": "Additional extensions to add to the matchmaking ticket. Value is a base64 string representation of the protobuf binary data. The data will be converted back to binary before being put on the ticket",
            "default": {}
          }
        },
        "type": "object",
        "title": "AdditionalJoinParams"
      },
      "BrowserInfo": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data with the listing of the instance in the Session browser",
            "default": {}
          }
        },
        "type": "object",
        "title": "BrowserInfo"
      },
      "BrowserResponse": {
        "properties": {
          "cursor": {
            "type": "integer",
            "minimum": 0,
            "title": "Cursor",
            "description": "Cursor to continue iterating through browser sessions. 0 means we have returned the last entry"
          },
          "browser_sessions": {
            "items": {
              "$ref": "#/components/schemas/BrowserSessionInfo"
            },
            "type": "array",
            "title": "Browser Sessions",
            "description": "List of sessions in the browser"
          }
        },
        "type": "object",
        "required": [
          "cursor",
          "browser_sessions"
        ],
        "title": "BrowserResponse"
      },
      "BrowserSessionInfo": {
        "properties": {
          "session_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Session Id",
            "description": "ID for the session"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data with the listing of the instance in the Session browser"
          }
        },
        "type": "object",
        "required": [
          "session_id"
        ],
        "title": "BrowserSessionInfo"
      },
      "ClientSettings": {
        "properties": {
          "platform_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlatformID"
              }
            ],
            "description": "DEPRECATED. Use 'platform' instead. Id for which platform this client is on. ID will be ignored if 'platform' is given. At least one of the two is required"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Which platform this client is on. If one is not provided, will get the platform from the 'platform_id'. At least one of the two is required"
          },
          "input": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Input"
              }
            ],
            "description": "Which input type this client is using"
          }
        },
        "type": "object",
        "required": [
          "input"
        ],
        "title": "ClientSettings"
      },
      "ConnectionInfo": {
        "properties": {
          "ip": {
            "type": "string",
            "title": "Ip",
            "description": "IP that sent the request"
          }
        },
        "type": "object",
        "required": [
          "ip"
        ],
        "title": "ConnectionInfo"
      },
      "CreateOrJoinRequest": {
        "properties": {
          "client_version": {
            "type": "string",
            "title": "Client Version",
            "description": "String representation of semver for client"
          },
          "client_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientSettings"
              }
            ],
            "title": "Client Settings",
            "description": "Which input type and platform the client is using"
          },
          "crossplay_preferences": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossplayPreferences"
              }
            ],
            "title": "Crossplay Preferences",
            "description": "Client's desired crossplay settings to determine which other clients it can play with. If not defined, assumed to be as permissive as possible"
          },
          "session_type": {
            "type": "string",
            "title": "Session Type",
            "description": "Type of session client is creating or joining"
          },
          "region_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Region Id",
            "description": "Preferred region for the instance and match to take place in"
          }
        },
        "type": "object",
        "required": [
          "client_version",
          "client_settings",
          "session_type"
        ],
        "title": "CreateOrJoinRequest"
      },
      "CrossplayInput": {
        "type": "string",
        "enum": [
          "desired_inputs_any",
          "desired_inputs_keyboardandmouse",
          "desired_inputs_gamepad",
          "desired_inputs_touch"
        ],
        "title": "CrossplayInput",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "ANY",
          "KBM",
          "GAMEPAD",
          "TOUCH"
        ]
      },
      "CrossplayPlatform": {
        "type": "string",
        "enum": [
          "desired_platforms_any",
          "desired_platforms_xboxlike",
          "desired_platforms_playstationlike"
        ],
        "title": "CrossplayPlatform",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "ANY",
          "XBOX",
          "PLAYSTATION"
        ]
      },
      "CrossplayPreferences": {
        "properties": {
          "permitted_platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossplayPlatform"
              }
            ],
            "description": "The platform type that the client is allowed to play with (any, xbox-like only, playstation-like only etc.)"
          },
          "permitted_input": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossplayInput"
              }
            ],
            "description": "The input type that the client is allowed to play with (keyboard and mouse, gamepad, touch input etc.)"
          }
        },
        "type": "object",
        "required": [
          "permitted_platform",
          "permitted_input"
        ],
        "title": "CrossplayPreferences"
      },
      "Determiner": {
        "type": "string",
        "enum": [
          "allOf",
          "anyOf",
          "oneOf",
          "noneOf"
        ],
        "title": "Determiner",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "ALL",
          "ANY",
          "ONE",
          "NONE"
        ]
      },
      "FubarResponse": {
        "properties": {},
        "type": "object",
        "title": "FubarResponse"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HostType": {
        "type": "string",
        "enum": [
          "dedicated",
          "player"
        ],
        "title": "HostType",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "dedicated",
          "player"
        ]
      },
      "HzApiErrorModel": {
        "properties": {
          "auth_success": {
            "type": "boolean",
            "title": "Auth Success",
            "default": true
          },
          "error_code": {
            "type": "string",
            "title": "Error Code"
          },
          "desc": {
            "type": "string",
            "title": "Desc"
          }
        },
        "type": "object",
        "required": [
          "error_code",
          "desc"
        ],
        "title": "HzApiErrorModel"
      },
      "Input": {
        "type": "string",
        "enum": [
          "keyboardandmouse",
          "gamepad",
          "touch"
        ],
        "title": "Input",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "KBM",
          "GAMEPAD",
          "TOUCH"
        ]
      },
      "InstanceFubar": {
        "properties": {
          "instance_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Instance Id",
            "description": "ID for which instance was marked as FUBAR"
          },
          "error": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Error",
            "description": "Error string describing what caused the instance failure"
          },
          "region": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Region",
            "description": "What region the failed instance was in"
          },
          "matchmaking_profile_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Matchmaking Profile Id",
            "description": "ID for which matchmaking profile was used to generate the failed instance"
          },
          "instance_source_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceSourceProvider"
              }
            ],
            "description": "Which instance provider allocated this failed instance"
          }
        },
        "type": "object",
        "required": [
          "instance_id",
          "error",
          "region"
        ],
        "title": "InstanceFubar"
      },
      "InstanceInfo": {
        "properties": {
          "allocation_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Allocation Id",
            "description": "Allocation ID for instance that's been spun up"
          },
          "instance_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Instance Id",
            "description": "Unique ID for the host/session relationship"
          },
          "host_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HostType"
              }
            ],
            "description": "Type of the host"
          },
          "host_player_id": {
            "type": "integer",
            "title": "Host Player Id",
            "description": "Player ID of the host, if the host type is player"
          },
          "host_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Host Player Uuid",
            "description": "Player UUID of the host, if the host type is player"
          },
          "host_dedicated_process_id": {
            "type": "string",
            "title": "Host Dedicated Process Id",
            "description": "Unique ID for the process that is running this instance"
          },
          "host_dedicated_server_id": {
            "type": "string",
            "title": "Host Dedicated Server Id",
            "description": "Unique ID for the machine running the instance"
          },
          "join_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceJoinableStatus"
              }
            ],
            "description": "Is the instance joinable at this time?"
          },
          "join_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JoinParams"
              }
            ],
            "title": "Join Params",
            "description": "Parameters to join the instance"
          },
          "instance_startup_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceStartupParams"
              }
            ],
            "title": "Instance Startup Params",
            "description": "Parameters used by the host to startup. For UE5 this will contain the map and gamemode"
          },
          "version": {
            "type": "string",
            "format": "semver",
            "title": "Version",
            "description": "Product Client Version number.  Used for compatibility checking with players",
            "example": "21.3.15-beta+12345"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "instance-defined custom data",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "host_type",
          "join_status",
          "created"
        ],
        "title": "InstanceInfo"
      },
      "InstanceInfoUpdate": {
        "properties": {
          "allocation_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Allocation Id",
            "description": "Allocation ID for instance that's been spun up"
          },
          "join_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceJoinableStatus"
              }
            ],
            "description": "Is the instance joinable at this time?"
          },
          "join_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JoinParams"
              }
            ],
            "title": "Join Params",
            "description": "Parameters to join the instance"
          },
          "version": {
            "type": "string",
            "format": "semver",
            "title": "Version",
            "description": "Product Client Version number.  Used for compatibility checking with players.  Must be compatible with all players to spawn",
            "example": "21.3.15-beta+12345"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "instance-defined custom data",
            "default": {}
          }
        },
        "type": "object",
        "title": "InstanceInfoUpdate"
      },
      "InstanceJoinableStatus": {
        "type": "string",
        "enum": [
          "requested",
          "allocated",
          "pending",
          "joinable",
          "closed"
        ],
        "title": "InstanceJoinableStatus",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "Searching for a host",
          "Host has been found",
          "Host has arrived",
          "Host is ready to accept players",
          "Host has left, been timed out, or could not be found"
        ],
        "x-enum-varnames": [
          "requested",
          "allocated",
          "pending",
          "joinable",
          "closed"
        ]
      },
      "InstanceLaunchTemplate": {
        "properties": {
          "instance_launch_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Instance Launch Template Id",
            "description": "ID to uniquely identify this instance launch template"
          },
          "map_selection_list": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MapSelectionList"
              }
            ],
            "title": "Map Selection List",
            "description": "A selection list of maps that can be chosen to launch into"
          },
          "default_host_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HostType"
              }
            ],
            "description": "Default host type for this template. Can be overriden in instance requests"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data that will be passed to the session during the instance launch request"
          }
        },
        "type": "object",
        "required": [
          "instance_launch_template_id",
          "map_selection_list",
          "default_host_type",
          "custom_data"
        ],
        "title": "InstanceLaunchTemplate"
      },
      "InstanceRequest": {
        "properties": {
          "instance_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Instance Id",
            "description": "Unique ID for the instance, a new one will be generated if not provided"
          },
          "instance_startup_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceStartupParams"
              }
            ],
            "title": "Instance Startup Params",
            "description": "Parameters used by the host to startup. For UE5 this will contain the map and gamemode"
          },
          "host_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HostType"
              }
            ],
            "description": "Type of the host"
          },
          "host_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Host Player Uuid",
            "description": "Player UUID of the host, if the host type is player"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "instance-defined custom data",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "host_type"
        ],
        "title": "InstanceRequest"
      },
      "InstanceSourceProvider": {
        "type": "string",
        "enum": [
          "player",
          "sic",
          "multiplay"
        ],
        "title": "InstanceSourceProvider",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "PLAYER",
          "SIC",
          "MULTIPLAY"
        ]
      },
      "InstanceStartupParams": {
        "properties": {
          "map": {
            "type": "string",
            "title": "Map",
            "description": "Name of the map for the instance to spawn with"
          },
          "mode": {
            "type": "string",
            "title": "Mode",
            "description": "Game mode for the instance to spawn in"
          },
          "misc_params": {
            "type": "string",
            "title": "Misc Params",
            "description": "Additional commandline parameters for the instance"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data to pass through to the instance",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "map",
          "misc_params"
        ],
        "title": "InstanceStartupParams"
      },
      "JoinParams": {
        "properties": {
          "public_conn_str": {
            "type": "string",
            "title": "Public Conn Str",
            "description": "Public connection string for instance"
          },
          "private_conn_str": {
            "type": "string",
            "title": "Private Conn Str",
            "description": "Private connection string for instance"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data to join a instance",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "public_conn_str",
          "private_conn_str"
        ],
        "title": "JoinParams"
      },
      "MMRGroupingMethod": {
        "type": "string",
        "enum": [
          "worst",
          "best",
          "avg_weighted_by_sigma",
          "avg"
        ],
        "title": "MMRGroupingMethod",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "WORST",
          "BEST",
          "AVERAGE_BY_VARIANCE",
          "AVERAGE"
        ]
      },
      "MapConfig": {
        "properties": {
          "map_game_id": {
            "type": "integer",
            "title": "Map Game Id",
            "description": "ID to uniquely identify this map game"
          },
          "map_name": {
            "type": "string",
            "title": "Map Name",
            "description": "Name of the map the instance should load into"
          },
          "mode": {
            "type": "string",
            "title": "Mode",
            "description": "Game mode for the instance to spawn in"
          },
          "selection_chance": {
            "type": "number",
            "maximum": 100,
            "minimum": 0,
            "title": "Selection Chance",
            "description": "Chance that this map will get selected in a rotation list"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data to pass through to the instance",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "map_game_id",
          "map_name",
          "selection_chance"
        ],
        "title": "MapConfig"
      },
      "MapSelectionList": {
        "properties": {
          "map_selection_list_id": {
            "type": "integer",
            "title": "Map Selection List Id",
            "description": "ID to uniquely identify this map selection list"
          },
          "maps": {
            "items": {
              "$ref": "#/components/schemas/MapConfig"
            },
            "type": "array",
            "title": "Maps",
            "description": "List of maps that can be chosen in this selection list"
          }
        },
        "type": "object",
        "required": [
          "map_selection_list_id",
          "maps"
        ],
        "title": "MapSelectionList"
      },
      "MatchCreateRequest": {
        "properties": {
          "match_id": {
            "type": "string",
            "title": "Match Id",
            "description": "Unique ID"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "instance-defined custom data",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "match_id"
        ],
        "title": "MatchCreateRequest"
      },
      "MatchCreateResponse": {
        "properties": {
          "match_id": {
            "type": "string",
            "title": "Match Id",
            "description": "Unique ID"
          }
        },
        "type": "object",
        "required": [
          "match_id"
        ],
        "title": "MatchCreateResponse"
      },
      "MatchInfo": {
        "properties": {
          "match_id": {
            "type": "string",
            "title": "Match Id",
            "description": "Unique ID"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "instance-defined custom data",
            "default": {}
          },
          "ticket_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Ticket Ids",
            "description": "List of tickets that were assigned to this match if created by matchmaking",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "match_id",
          "created"
        ],
        "title": "MatchInfo"
      },
      "MatchMakingProfile": {
        "properties": {
          "profile_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Profile Id",
            "description": "ID of the matchmaking profile to join"
          },
          "join_mode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProfileJoinMode"
              }
            ],
            "description": "What mode to set on the matchmaking profile (normal, backfill etc)",
            "default": "normal"
          },
          "instance_launch_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Instance Launch Template Id",
            "description": "Which instance template to use when launching a match in this profile"
          }
        },
        "type": "object",
        "required": [
          "profile_id",
          "instance_launch_template_id"
        ],
        "title": "MatchMakingProfile"
      },
      "MatchMakingRuleset": {
        "properties": {
          "rules": {
            "items": {
              "$ref": "#/components/schemas/Rule"
            },
            "type": "array",
            "title": "Rules",
            "description": "A list of the rules to be checked for this ruleset"
          },
          "determiner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Determiner"
              }
            ],
            "description": "Determiner of how many rules must be satisfied in this rulest (all, any, one, none)"
          }
        },
        "type": "object",
        "required": [
          "rules",
          "determiner"
        ],
        "title": "MatchMakingRuleset"
      },
      "MatchMakingSessionRequest": {
        "properties": {
          "teams": {
            "items": {
              "$ref": "#/components/schemas/SessionTeam"
            },
            "type": "array",
            "title": "Teams",
            "description": "List of teams that are to be invited to session"
          },
          "session_tickets": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Session Tickets",
            "description": "List of sessions and tickets the match was made with. Used to verify this match should still be created"
          },
          "instance_launch_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Instance Launch Template Id",
            "description": "Which launch template should be used to request an instance"
          },
          "region_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Region Id",
            "description": "Region to start the instance in"
          },
          "match_id": {
            "type": "string",
            "title": "Match Id",
            "description": "Unique ID for this generated match"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data about the match",
            "default": {}
          },
          "host_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Host Player Uuid",
            "description": "Player UUID of the host, if the host type is player"
          }
        },
        "type": "object",
        "required": [
          "teams",
          "session_tickets",
          "instance_launch_template_id",
          "region_id",
          "match_id"
        ],
        "title": "MatchMakingSessionRequest"
      },
      "MatchMakingTemplate": {
        "properties": {
          "mmr_group_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MMRGroupingMethod"
              }
            ],
            "description": "What method should be used to calculate a group's MMR based on the individual player's ranks"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchMakingRuleset"
              }
            ],
            "title": "Ruleset",
            "description": "A set of rules that determine whether or not this matchmaking config should be used."
          },
          "profiles": {
            "items": {
              "$ref": "#/components/schemas/MatchMakingProfile"
            },
            "type": "array",
            "title": "Profiles",
            "description": "A list of which match making profiles are going to be created on the ticket"
          }
        },
        "type": "object",
        "required": [
          "mmr_group_method",
          "profiles"
        ],
        "title": "MatchMakingTemplate"
      },
      "MatchMakingTemplateGroup": {
        "properties": {
          "template_group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Template Group Id",
            "description": "ID for this set of potential matchmaking templates"
          },
          "template_options": {
            "items": {
              "$ref": "#/components/schemas/MatchMakingTemplate"
            },
            "type": "array",
            "title": "Template Options",
            "description": "List of the different matchmaking templates that could be used. The config is chosen based on a set of rules in each MatchMakingTemplate object. If there are no rules, it's the default template"
          },
          "required_item_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "uniqueItems": true,
            "title": "Required Item Ids",
            "description": "Set of all the item ids that are required to validate every rule contained in this template group",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "template_group_id",
          "template_options"
        ],
        "title": "MatchMakingTemplateGroup"
      },
      "MatchmakingInfo": {
        "properties": {
          "ticket_id": {
            "type": "string",
            "title": "Ticket Id",
            "description": "Unique ID for this attempt at matchmaking"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "session-defined custom data",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "ticket_id"
        ],
        "title": "MatchmakingInfo"
      },
      "Operation": {
        "type": "string",
        "enum": [
          "eq",
          "ne",
          "lt",
          "le",
          "gt",
          "ge"
        ],
        "title": "Operation",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "EQUAL",
          "NOT_EQUAL",
          "LESS_THAN",
          "LESS_THAN_EQUAL",
          "GREATER_THAN",
          "GREATER_THAN_EQUAL"
        ]
      },
      "Platform": {
        "type": "string",
        "enum": [
          "Anon",
          "Basic",
          "XboxLive",
          "PSN",
          "NintendoNAID",
          "NintendoSwitch",
          "NintendoPPID",
          "Google",
          "GooglePlay",
          "Apple",
          "Epic",
          "Steam",
          "Amazon",
          "Twitch"
        ],
        "title": "Platform",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "ANON",
          "BASIC",
          "XBOX_LIVE",
          "PSN",
          "NINTENDO_NAID",
          "NINTENDO_SWITCH",
          "NINTENDO_PPID",
          "GOOGLE",
          "GOOGLE_PLAY",
          "APPLE",
          "EPIC",
          "STEAM",
          "AMAZON",
          "TWITCH"
        ]
      },
      "PlatformID": {
        "type": "integer",
        "enum": [
          2,
          4,
          5,
          9,
          10,
          11,
          13,
          16,
          22,
          24,
          26,
          28
        ],
        "title": "PlatformID",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "ANON",
          "AMAZON",
          "STEAM",
          "PSN",
          "XBOX_LIVE",
          "BASIC",
          "GOOGLE",
          "TWITCH",
          "NINTENDO_SWITCH",
          "APPLE",
          "NINTENDO",
          "EPIC"
        ]
      },
      "PlatformSession": {
        "properties": {
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Platform that this session is for"
          },
          "platform_session_type": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Platform Session Type",
            "description": "Platform-Specific Identifier for the Platform's template"
          },
          "platform_session_id_base64": {
            "type": "string",
            "maxLength": 4096,
            "minLength": 1,
            "title": "Platform Session Id Base64",
            "description": "Platform session's unique identifier"
          },
          "players": {
            "items": {
              "$ref": "#/components/schemas/PlatformSessionPlayer"
            },
            "type": "array",
            "title": "Players",
            "description": "Players in the platform session"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Product defined custom data fields about the platform session",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "platform",
          "platform_session_type",
          "platform_session_id_base64",
          "players"
        ],
        "title": "PlatformSession"
      },
      "PlatformSessionPlayer": {
        "properties": {
          "player_id": {
            "type": "integer",
            "title": "Player Id",
            "description": "Player ID representing the current player"
          },
          "player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Player Uuid",
            "description": "Player UUID representing the current player"
          },
          "leader": {
            "type": "boolean",
            "title": "Leader",
            "description": "Is this player the leader of the platform session?  When setting up the parent session, if all players are from the same platform session, leadership is coordinated",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "player_uuid"
        ],
        "title": "PlatformSessionPlayer"
      },
      "PlatformSessionTemplate": {
        "properties": {
          "platform_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlatformID"
              }
            ],
            "description": "DEPRECATED. ID for the platform type for this template. Use 'platform' instead"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Platform"
          },
          "platform_session_type": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Platform Session Type",
            "description": "Platform-Specific Identifier for the Platform's template"
          },
          "max_players": {
            "type": "integer",
            "minimum": 1,
            "title": "Max Players",
            "description": "The maximum number of players that can be a part of this platform session"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Product-defined custom data",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "platform_id",
          "platform",
          "platform_session_type"
        ],
        "title": "PlatformSessionTemplate"
      },
      "PlayerSession": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "description": "template type"
          },
          "session_ids": {
            "items": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1
            },
            "type": "array",
            "uniqueItems": true,
            "title": "Session Ids",
            "description": "Sessions the player is currently a part of for this session type, if any.",
            "default": []
          },
          "pending_invites": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PlayerSessionInvite"
            },
            "type": "object",
            "title": "Pending Invites",
            "description": "Pending invites, if any, for the current player in this session type",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "PlayerSession"
      },
      "PlayerSessionInvite": {
        "properties": {
          "session_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Session Id",
            "description": "Session ID for the invite"
          },
          "inviting_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Inviting Player Uuid",
            "description": "Player who sent the invite"
          }
        },
        "type": "object",
        "required": [
          "session_id"
        ],
        "title": "PlayerSessionInvite"
      },
      "PlayerSessions": {
        "properties": {
          "sessions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PlayerSession"
            },
            "type": "object",
            "title": "Sessions",
            "description": "Session associated with this player, and any pending invites",
            "default": {}
          },
          "last_updated_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          }
        },
        "type": "object",
        "title": "PlayerSessions"
      },
      "ProfileJoinMode": {
        "type": "string",
        "enum": [
          "normal",
          "backfill",
          "created_before"
        ],
        "title": "ProfileJoinMode",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "NORMAL",
          "BACKFILL",
          "CREATED_BEFORE"
        ]
      },
      "QueueConfig": {
        "properties": {
          "queue_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Queue Id",
            "description": "ID to uniquely identify this queue"
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Flag for whether or not the queue is active, and can be joined or sessions created from it"
          },
          "ranking_type": {
            "type": "integer",
            "title": "Ranking Type",
            "description": "Which rank this queue should use MMR from to make matches from, and update at the end of match (1v1 MMR or 2v2 MMR for example)"
          },
          "num_sides": {
            "type": "integer",
            "title": "Num Sides",
            "description": "The number of sides a game in this queue will have (2 in a 1v1 and 3 in a 1v1v1 for example"
          },
          "max_players_per_side": {
            "type": "integer",
            "title": "Max Players Per Side",
            "description": "The maximum number of players that can be on each team"
          },
          "min_players_per_side": {
            "type": "integer",
            "title": "Min Players Per Side",
            "description": "The minimum number of players that can be on each team"
          },
          "max_queue_group_size": {
            "type": "integer",
            "title": "Max Queue Group Size",
            "description": "The maximum size of a group that can join this queue"
          },
          "match_making_template_group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Group Id",
            "description": "ID for which group of matchmaking templates/rules will be used when joining this queue"
          }
        },
        "type": "object",
        "required": [
          "queue_id",
          "active",
          "ranking_type",
          "num_sides",
          "max_players_per_side",
          "min_players_per_side",
          "max_queue_group_size",
          "match_making_template_group_id"
        ],
        "title": "QueueConfig"
      },
      "QueueJoinRequest": {
        "properties": {
          "queue_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Queue Id",
            "description": "ID of the queue to join"
          },
          "additional_join_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AdditionalJoinParams"
              }
            ],
            "title": "Additional Join Params",
            "description": "Additional fields put on the matchmaking ticket for open match to search with (see https://openmatch.dev/site/docs/reference/api/#searchfields)"
          },
          "map_preferences": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Map Preferences",
            "description": "List of map preferences in order from most desired, to least desired"
          }
        },
        "type": "object",
        "required": [
          "queue_id",
          "map_preferences"
        ],
        "title": "QueueJoinRequest"
      },
      "QueueJoinResponse": {
        "properties": {
          "ticket_id": {
            "type": "string",
            "title": "Ticket Id",
            "description": "ID for the newly created match making ticket"
          }
        },
        "type": "object",
        "required": [
          "ticket_id"
        ],
        "title": "QueueJoinResponse"
      },
      "QueuesResponse": {
        "properties": {
          "queues": {
            "items": {
              "$ref": "#/components/schemas/QueueConfig"
            },
            "type": "array",
            "title": "Queues",
            "description": "List of queues"
          }
        },
        "type": "object",
        "required": [
          "queues"
        ],
        "title": "QueuesResponse"
      },
      "Region": {
        "properties": {
          "region_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Region Id",
            "description": "ID for this region"
          },
          "sort_order": {
            "type": "integer",
            "minimum": 0,
            "title": "Sort Order",
            "description": "The sorting priority order for this region"
          },
          "custom_only": {
            "type": "boolean",
            "title": "Custom Only",
            "description": "Indicates if the region is for custom games only"
          },
          "description": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Description",
            "description": "Text description of the region"
          }
        },
        "type": "object",
        "required": [
          "region_id",
          "sort_order",
          "custom_only"
        ],
        "title": "Region"
      },
      "RegionsResponse": {
        "properties": {
          "regions": {
            "items": {
              "$ref": "#/components/schemas/Region"
            },
            "type": "array",
            "title": "Regions",
            "description": "List of all regions"
          },
          "cursor": {
            "type": "integer",
            "minimum": 0,
            "title": "Cursor",
            "description": "Cursor to continue iterating through enabled regions. Non 0 cursor in the response means there are more regions. Pass the returned cursor up on a subsequent call to continue. A 0 cursor in the response means you have reached the end"
          }
        },
        "type": "object",
        "required": [
          "regions",
          "cursor"
        ],
        "title": "RegionsResponse"
      },
      "Rule": {
        "properties": {
          "operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Operation"
              }
            ],
            "description": "Comparison operation to be performed"
          },
          "value": {
            "type": "integer",
            "title": "Value",
            "description": "Value to compare to"
          }
        },
        "type": "object",
        "required": [
          "operation",
          "value"
        ],
        "title": "Rule"
      },
      "SelfSessionPlayerUpdateRequest": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionPlayerStatus"
              }
            ],
            "description": "Status that the player would like after the request is complete. Note that some join operations may promote the player from `member` to `leader`",
            "default": "member"
          },
          "client_version": {
            "type": "string",
            "title": "Client Version",
            "description": "Semver for updated client"
          },
          "client_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientSettings"
              }
            ],
            "title": "Client Settings",
            "description": "Which input type and platform the client is using"
          },
          "team_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Team Id",
            "description": "Which team the player is one"
          },
          "crossplay_preferences": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossplayPreferences"
              }
            ],
            "title": "Crossplay Preferences",
            "description": "Client's desired crossplay settings to determine which other clients it can play with. If not defined, assumed to be as permissive as possible"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "player-defined custom data",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "client_version",
          "client_settings",
          "team_id"
        ],
        "title": "SelfSessionPlayerUpdateRequest"
      },
      "Session": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "description": "template type"
          },
          "session_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Session Id",
            "description": "unique ID for this session within its type"
          },
          "instance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceInfo"
              }
            ],
            "title": "Instance",
            "description": "Info about the current active instance for the session"
          },
          "match": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchInfo"
              }
            ],
            "title": "Match",
            "description": "Info about the current match in the instance"
          },
          "matchmaking": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchmakingInfo"
              }
            ],
            "title": "Matchmaking",
            "description": "Info about the matchmaking state of the session, if it is in the process of matchmaking"
          },
          "browser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BrowserInfo"
              }
            ],
            "title": "Browser",
            "description": "Info about the browser state of the session"
          },
          "joinable": {
            "type": "boolean",
            "title": "Joinable",
            "description": "Is this session freely joinable by players without an invite?"
          },
          "teams": {
            "items": {
              "$ref": "#/components/schemas/SessionTeam"
            },
            "type": "array",
            "title": "Teams",
            "description": "List of teams of players currently in the session"
          },
          "platform_session": {
            "items": {
              "$ref": "#/components/schemas/PlatformSession"
            },
            "type": "array",
            "title": "Platform Session",
            "description": "Child Platform Sessions for this session.  A player joining one of the child platform sessions implicitly joins the parent session",
            "default": []
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Leader Player or instance defined custom data about this session",
            "default": {}
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "region_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Region Id",
            "description": "Preferred region for the instance and match to take place in"
          },
          "created_by_matchmaking": {
            "type": "boolean",
            "title": "Created By Matchmaking",
            "description": "Flag of whether or not this session was created by matchmaking or not",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "type",
          "session_id",
          "joinable",
          "teams",
          "created"
        ],
        "title": "Session"
      },
      "SessionEvent": {
        "properties": {
          "event_code": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Event Code",
            "description": "Code that identifies this type of event.  See CommonEventCode for common examples."
          },
          "description": {
            "type": "string",
            "maxLength": 4096,
            "minLength": 0,
            "title": "Description",
            "description": "Description metadata about the event",
            "default": ""
          },
          "source_player_id": {
            "type": "integer",
            "title": "Source Player Id",
            "description": "Player who triggered the event"
          },
          "source_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Source Player Uuid",
            "description": "Player who triggered the event"
          },
          "target_player_id": {
            "type": "integer",
            "title": "Target Player Id",
            "description": "Player who the event was targetted toward, if relevant"
          },
          "target_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Target Player Uuid",
            "description": "Player who the event was targetted toward, if relevant"
          },
          "instance": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Instance",
            "description": "Instance that was active at the time of the event"
          },
          "match": {
            "type": "string",
            "title": "Match",
            "description": "Match that was active at the time of the event"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Relevant platform"
          },
          "platform_session_id_base64": {
            "type": "string",
            "maxLength": 4096,
            "minLength": 1,
            "title": "Platform Session Id Base64",
            "description": "Relevant platform session id"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "custom data about this event",
            "default": {}
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          }
        },
        "type": "object",
        "required": [
          "event_code",
          "timestamp"
        ],
        "title": "SessionEvent"
      },
      "SessionEventCreateRequest": {
        "properties": {
          "event_code": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Event Code",
            "description": "Code that identifies this type of event.  See CommonEventCode for common examples."
          },
          "description": {
            "type": "string",
            "maxLength": 4096,
            "minLength": 0,
            "title": "Description",
            "description": "Description metadata about the event",
            "default": ""
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "custom data about this event",
            "default": {}
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          }
        },
        "type": "object",
        "required": [
          "event_code",
          "timestamp"
        ],
        "title": "SessionEventCreateRequest"
      },
      "SessionEvents": {
        "properties": {
          "events": {
            "items": {
              "$ref": "#/components/schemas/SessionEvent"
            },
            "type": "array",
            "title": "Events",
            "description": "A list of the events that have occurred in a given session",
            "default": []
          }
        },
        "type": "object",
        "title": "SessionEvents"
      },
      "SessionJoinResponse": {
        "properties": {
          "session_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Session Id",
            "description": "Session ID the player is now a part of"
          }
        },
        "type": "object",
        "required": [
          "session_id"
        ],
        "title": "SessionJoinResponse"
      },
      "SessionPlayer": {
        "properties": {
          "player_id": {
            "type": "integer",
            "title": "Player Id",
            "description": "Legacy id for this player"
          },
          "player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Player Uuid",
            "description": "UUID for this player"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionPlayerStatus"
              }
            ],
            "description": "Status of the player in the session"
          },
          "inviting_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Inviting Player Uuid",
            "description": "If the player is only a pending invite, this is the player that requested the invite"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "player-defined custom data",
            "default": {}
          },
          "version": {
            "type": "string",
            "format": "semver",
            "title": "Version",
            "description": "Product Client Version number.  Used for compatibility checking with other players and instances",
            "example": "21.3.15-beta+12345"
          },
          "client_settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientSettings"
              }
            ],
            "title": "Client Settings",
            "description": "Which input type and platform the client is using"
          },
          "crossplay_preferences": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossplayPreferences"
              }
            ],
            "title": "Crossplay Preferences",
            "description": "Client's desired crossplay settings to determine which other clients it can play with. If not defined, assumed to be as permissive as possible"
          },
          "invited": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "joined": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          }
        },
        "type": "object",
        "required": [
          "player_uuid",
          "status"
        ],
        "title": "SessionPlayer"
      },
      "SessionPlayerStatus": {
        "type": "string",
        "enum": [
          "leader",
          "member",
          "invited",
          "reserved"
        ],
        "title": "SessionPlayerStatus",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "leader",
          "member",
          "invited",
          "reserved"
        ]
      },
      "SessionPlayerUpdateRequest": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionPlayerStatus"
              }
            ],
            "description": "Status that the player would like after the request is complete.  Note that some join operations may promote the player from `member` to `leader`",
            "default": "member"
          },
          "team_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Team Id",
            "description": "Which team the player should be on"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "player-defined custom data",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "team_id"
        ],
        "title": "SessionPlayerUpdateRequest"
      },
      "SessionPlayerUpdateResponse": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionPlayerStatus"
              }
            ],
            "description": "Status of the player after the request is completed"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Resulting custom data about the player",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "SessionPlayerUpdateResponse"
      },
      "SessionTeam": {
        "properties": {
          "players": {
            "items": {
              "$ref": "#/components/schemas/SessionPlayer"
            },
            "type": "array",
            "title": "Players",
            "description": "Players currently on this team"
          },
          "max_size": {
            "type": "integer",
            "minimum": 1,
            "title": "Max Size",
            "description": "Maximum number of players allowed on this team"
          }
        },
        "type": "object",
        "required": [
          "players",
          "max_size"
        ],
        "title": "SessionTeam"
      },
      "SessionTemplate": {
        "properties": {
          "session_type": {
            "type": "string",
            "title": "Session Type",
            "description": "unique name for this template"
          },
          "engine_session_type": {
            "type": "string",
            "title": "Engine Session Type",
            "description": "Engine identifier for sessions of this type.  For UE, this is commonly `Party` or `Game`.",
            "default": "Game"
          },
          "can_join_matchmaking": {
            "type": "boolean",
            "title": "Can Join Matchmaking",
            "description": "Are sessions of this type allowed to join matchmaking?",
            "default": false
          },
          "can_be_created_by_players_directly": {
            "type": "boolean",
            "title": "Can Be Created By Players Directly",
            "description": "Are players allowed to create sessions of this type?",
            "default": false
          },
          "joinable": {
            "type": "boolean",
            "title": "Joinable",
            "description": "Should players join existing sessions of this type before creating a new one",
            "default": false
          },
          "auto_add_to_browser": {
            "type": "boolean",
            "title": "Auto Add To Browser",
            "description": "Should session be automatically added to the browser list",
            "default": false
          },
          "auto_browser_params": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Auto Browser Params",
            "description": "Browser parameters that can be used to filter results",
            "default": {}
          },
          "can_be_added_to_server_browser": {
            "type": "boolean",
            "title": "Can Be Added To Server Browser",
            "description": "Are sessions of this type able to be added to the server browser by players?",
            "default": false
          },
          "keep_alive_on_empty": {
            "type": "boolean",
            "title": "Keep Alive On Empty",
            "description": "Should the session stay around, or be destroyed when the last player leaves it?",
            "default": false
          },
          "platform_templates": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PlatformSessionTemplate"
            },
            "type": "object",
            "title": "Platform Templates",
            "description": "Platform-Specific session mappings that are used to coordinate Rally Here sessions with OnlineSubsystem sessions",
            "default": {}
          },
          "auto_startup_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceStartupParams"
              }
            ],
            "title": "Auto Startup Params",
            "description": "Parameters used to start an instance for this session when it is created"
          },
          "min_session_count": {
            "type": "integer",
            "title": "Min Session Count",
            "description": "Minimum number of this type of session to be running at any given time per region.",
            "default": 0
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Product-defined custom data about this session type",
            "default": {}
          },
          "num_teams": {
            "type": "integer",
            "minimum": 1,
            "title": "Num Teams",
            "description": "The number of teams this session type can have",
            "default": 1
          },
          "players_per_team": {
            "type": "integer",
            "minimum": 1,
            "title": "Players Per Team",
            "description": "The number of players that can be on each team",
            "default": 4
          },
          "can_change_own_team": {
            "type": "boolean",
            "title": "Can Change Own Team",
            "description": "Whether or not a player can change which team they are on. If true, they are able to. If False, they player's team can only be changed by an admin",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "session_type"
        ],
        "title": "SessionTemplate"
      },
      "SessionTemplates": {
        "properties": {
          "templates": {
            "additionalProperties": {
              "$ref": "#/components/schemas/SessionTemplate"
            },
            "type": "object",
            "title": "Templates",
            "description": "Dictionary of SessionTemplates keyed on their template type",
            "default": {}
          }
        },
        "type": "object",
        "title": "SessionTemplates"
      },
      "SessionUpdate": {
        "properties": {
          "region_id": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Region Id",
            "description": "Preferred region for the instance and match to take place in"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Leader Player or instance defined custom data about this session",
            "default": {}
          }
        },
        "type": "object",
        "title": "SessionUpdate"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearerHeadersOrCookie": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "Sessions",
      "description": "\nThis API is for the creation and management of sessions, which are just generic groups of players, and operations\non those sessions, such as joining matchmaking.\n"
    },
    {
      "name": "Queues",
      "description": "\nThe queue endpoints are for requesting information and configuration about queues, instance launch templates, and\nmatchmaking profiles\n"
    },
    {
      "name": "Regions",
      "description": "\nRegion endpoints for clients to request client visible regions and configuration around them\n"
    }
  ]
}
