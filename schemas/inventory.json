{
  "openapi": "3.0.2",
  "info": {
    "title": "inventory-api",
    "description": "Hi-Rez Studios inventory-api.",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "/inventory"
    }
  ],
  "paths": {
    "/v1/catalog": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog All",
        "description": "Get the entire catalog.",
        "operationId": "get_catalog_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/xp": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Xp All",
        "description": "Get all XP Tables.",
        "operationId": "get_catalog_xp_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XpTables"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/xp/{xp_table_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Xp Table",
        "description": "Get a specific XP Table.",
        "operationId": "get_catalog_xp_table",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Xp Table Id",
              "type": "integer"
            },
            "name": "xp_table_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XpTable"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/portal-use-ruleset": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Portal Use Rulesets All",
        "description": "Get all Portal Use Rulesets.",
        "operationId": "get_catalog_portal_use_rulesets_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalUseRulesets"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/portal-use-ruleset/{portal_use_ruleset_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Portal Use Ruleset",
        "description": "Get a specific Portal Use Ruleset.",
        "operationId": "get_catalog_portal_use_ruleset",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Portal Use Ruleset Id",
              "type": "integer"
            },
            "name": "portal_use_ruleset_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalUseRuleset"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/inventory-bucket-use-rule-set": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Inventory Bucket Use Rule Sets All",
        "description": "Get all Inventory Bucket Use Rule Sets.",
        "operationId": "get_catalog_inventory_bucket_use_rule_sets_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryBucketUseRuleSets"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/inventory-bucket-use-rule-set/{inventory_bucket_use_ruleset_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Inventory Bucket Use Rule Set",
        "description": "Get a specific Inventory Bucket Use Rule Set.",
        "operationId": "get_catalog_inventory_bucket_use_rule_set",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Inventory Bucket Use Ruleset Id",
              "type": "string"
            },
            "name": "inventory_bucket_use_ruleset_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryBucketUseRuleSet"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/price-point": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Price Points All",
        "description": "Get all Price Points.",
        "operationId": "get_catalog_price_points_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricePoints"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/price-point/{price_point_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Price Point",
        "description": "Get a specific Price Point.",
        "operationId": "get_catalog_price_point",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Price Point Id",
              "minLength": 1,
              "type": "string"
            },
            "name": "price_point_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricePoint"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/item": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Items All",
        "description": "Get all Items.",
        "operationId": "get_catalog_items_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Items"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/item/{item_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Item",
        "description": "Get a specific Item.",
        "operationId": "get_catalog_item",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Item Id",
              "type": "integer"
            },
            "name": "item_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/vendor": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Vendors All",
        "description": "Get all Vendors.",
        "operationId": "get_catalog_vendors_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendors"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/vendor/{vendor_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Vendor",
        "description": "Get a specific Vendor.",
        "operationId": "get_catalog_vendor",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Vendor Id",
              "type": "integer"
            },
            "name": "vendor_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/loot": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Loots All",
        "description": "Get all Loot.",
        "operationId": "get_catalog_loots_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Loots"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/loot/{loot_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Loot",
        "description": "Get a specific Loot.",
        "operationId": "get_catalog_loot",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Loot Id",
              "type": "integer"
            },
            "name": "loot_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Loot"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/time-frame": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Time Frames All",
        "description": "Get all Time Frames.",
        "operationId": "get_catalog_time_frames_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeFrames"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/time-frame/{time_frame_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Time Frame",
        "description": "Get a specific Time Frame.",
        "operationId": "get_catalog_time_frame",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Time Frame Id",
              "type": "integer"
            },
            "name": "time_frame_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeFrame"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Inventory Uuid Self",
        "description": "Get the Inventory for the currently authenticated player.",
        "operationId": "get_player_inventory_uuid_self",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Item Ids",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "default": []
            },
            "name": "item_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryContextResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request, when the server should have the resource available",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Many Player Inventory Uuid Self",
        "description": "Modify many Inventory records for the currently authenticated player.",
        "operationId": "modify_many_player_inventory_uuid_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create Player Inventory Uuid Self",
        "description": "Create Inventory for the currently authenticated player.",
        "operationId": "create_player_inventory_uuid_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Inventory Uuid",
        "description": "Get the Inventory for the specified player.",
        "operationId": "get_player_inventory_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Item Ids",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "default": []
            },
            "name": "item_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryContextResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request, when the server should have the resource available",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Many Player Inventory Uuid",
        "description": "Modify many Inventory records for the specified player.",
        "operationId": "modify_many_player_inventory_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create Player Inventory Uuid",
        "description": "Create Inventory for the specified player.",
        "operationId": "create_player_inventory_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/me/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Inventory Self",
        "description": "Get the Inventory for the currently authenticated player.",
        "operationId": "get_player_inventory_self",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Item Ids",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "default": []
            },
            "name": "item_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryContextResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request, when the server should have the resource available",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Many Player Inventory Self",
        "description": "Modify many Inventory records for the currently authenticated player.",
        "operationId": "modify_many_player_inventory_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create Player Inventory Self",
        "description": "Create Inventory for the currently authenticated player.",
        "operationId": "create_player_inventory_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_id}/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Inventory",
        "description": "Get the Inventory for the specified player.",
        "operationId": "get_player_inventory",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Item Ids",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "default": []
            },
            "name": "item_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryContextResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request, when the server should have the resource available",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Many Player Inventory",
        "description": "Modify many Inventory records for the specified player.",
        "operationId": "modify_many_player_inventory",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create Player Inventory",
        "description": "Create Inventory for the specified player.",
        "operationId": "create_player_inventory",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/inventory/{inventory_id}": {
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Player Inventory Uuid Self",
        "description": "Modify a single Inventory record for the currently authenticated player.",
        "operationId": "modify_player_inventory_uuid_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Inventory Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "inventory_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/inventory/{inventory_id}": {
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Player Inventory Uuid",
        "description": "Modify a single Inventory record for the specified player.",
        "operationId": "modify_player_inventory_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Inventory Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "inventory_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/me/inventory/{inventory_id}": {
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Player Inventory Self",
        "description": "Modify a single Inventory record for the currently authenticated player.",
        "operationId": "modify_player_inventory_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Inventory Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "inventory_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_id}/inventory/{inventory_id}": {
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Player Inventory",
        "description": "Modify a single Inventory record for the specified player.",
        "operationId": "modify_player_inventory",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Inventory Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "inventory_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/session": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Inventory Session Info By Player Uuid Self",
        "description": "Get an Inventory Session for the currently logged in player.",
        "operationId": "get_inventory_session_info_by_player_uuid_self",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySession"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Inventory Session By Player Uuid Self",
        "description": "Create a new Inventory Session for the currently logged in player.",
        "operationId": "create_new_inventory_session_by_player_uuid_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventorySessionCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySessionCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/session": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Inventory Session Info By Player Uuid",
        "description": "Get an Inventory Session for the specified player.",
        "operationId": "get_inventory_session_info_by_player_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySession"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Inventory Session By Player Uuid",
        "description": "Create a new Inventory Session for the specified player.",
        "operationId": "create_new_inventory_session_by_player_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventorySessionCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySessionCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/me/session": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Inventory Session Info Self",
        "description": "Get an Inventory Session for the currently logged in player.",
        "operationId": "get_inventory_session_info_self",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySession"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Inventory Session Self",
        "description": "Create a new Inventory Session for the currently logged in player.",
        "operationId": "create_new_inventory_session_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventorySessionCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySessionCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_id}/session": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Inventory Session Info",
        "description": "Get an Inventory Session for the specified player.",
        "operationId": "get_inventory_session_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySession"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Inventory Session",
        "description": "Create a new Inventory Session for the specified player.",
        "operationId": "create_new_inventory_session",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventorySessionCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySessionCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/entitlement": {
      "post": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Process Platform Entitlement For Me",
        "description": "Process platform entitlements, consuming from the platform inventory where possible and generating orders.  \n\nNote that some orders may not be fulfilled at the completion of this request and need to be polled separately for results",
        "operationId": "process_platform_entitlement_for_me",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformEntitlementProcessRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformEntitlementProcessResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/entitlement": {
      "post": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Process Platform Entitlements By Player Uuid",
        "description": "Process platform entitlements, consuming from the platform inventory where possible and generating orders.  \n\nNote that some orders may not be fulfilled at the completion of this request and need to be polled separately for results",
        "operationId": "process_platform_entitlements_by_player_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformEntitlementProcessRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformEntitlementProcessResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/entitlement/request/{request_id}": {
      "get": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Retrieve Entitlements For Me",
        "description": "Get the status of a platform entitlement request by request id",
        "operationId": "retrieve_entitlements_for_me",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Request Id",
              "type": "string"
            },
            "name": "request_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformEntitlementProcessResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/entitlement/request/{request_id}": {
      "get": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Retrieve Entitlements By Player Uuid",
        "description": "Get the status of a platform entitlement request by request id",
        "operationId": "retrieve_entitlements_by_player_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Request Id",
              "type": "string"
            },
            "name": "request_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformEntitlementProcessResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/order": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Uuid Orders Self",
        "description": "Get recent player orders about a player. Empty results means there were no recent orders.If starting_position and cursor are given, starting_position will be ignored in favor of cursor",
        "operationId": "get_player_uuid_orders_self",
        "parameters": [
          {
            "description": "Inclusive starting time for the first order",
            "required": false,
            "schema": {
              "title": "Time Zone Aware Datetime",
              "type": "string",
              "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
              "format": "date-time"
            },
            "name": "starting_position",
            "in": "query"
          },
          {
            "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored",
            "required": false,
            "schema": {
              "title": "Cursor",
              "type": "string",
              "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The direction to search.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "The direction to search.",
              "default": "asc"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "The number of Orders to return",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of Orders to return",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrdersResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Player Uuid Order Self",
        "description": "Create a new Order for the current logged in player.\n\nNote that some orders may not be fulfilled at the completion of this request and need to be polled separately for results.",
        "operationId": "create_new_player_uuid_order_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerOrderCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/order": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Uuid Orders",
        "description": "Get recent player orders about a player. Empty results means there were no recent orders.If starting_position and cursor are given, starting_position will be ignored in favor of cursor",
        "operationId": "get_player_uuid_orders",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "description": "Inclusive starting time for the first order",
            "required": false,
            "schema": {
              "title": "Time Zone Aware Datetime",
              "type": "string",
              "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
              "format": "date-time"
            },
            "name": "starting_position",
            "in": "query"
          },
          {
            "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored",
            "required": false,
            "schema": {
              "title": "Cursor",
              "type": "string",
              "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The direction to search.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "The direction to search.",
              "default": "asc"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "The number of Orders to return",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of Orders to return",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrdersResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Player Uuid Order",
        "description": "Create a new Order for a specific player.\n\nNote that some orders may not be fulfilled at the completion of this request and need to be polled separately for results.",
        "operationId": "create_new_player_uuid_order",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerOrderCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/me/order": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Orders Self",
        "description": "Get recent player orders about a player. Empty results means there were no recent orders.If starting_position and cursor are given, starting_position will be ignored in favor of cursor",
        "operationId": "get_player_orders_self",
        "parameters": [
          {
            "description": "Inclusive starting time for the first order",
            "required": false,
            "schema": {
              "title": "Time Zone Aware Datetime",
              "type": "string",
              "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
              "format": "date-time"
            },
            "name": "starting_position",
            "in": "query"
          },
          {
            "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored",
            "required": false,
            "schema": {
              "title": "Cursor",
              "type": "string",
              "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The direction to search.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "The direction to search.",
              "default": "asc"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "The number of Orders to return",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of Orders to return",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrdersResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Player Order Self",
        "description": "Create a new Order for the current logged in player.\n\nNote that some orders may not be fulfilled at the completion of this request and need to be polled separately for results.",
        "operationId": "create_new_player_order_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerOrderCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_id}/order": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Orders",
        "description": "Get recent player orders about a player. Empty results means there were no recent orders.If starting_position and cursor are given, starting_position will be ignored in favor of cursor",
        "operationId": "get_player_orders",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "description": "Inclusive starting time for the first order",
            "required": false,
            "schema": {
              "title": "Time Zone Aware Datetime",
              "type": "string",
              "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
              "format": "date-time"
            },
            "name": "starting_position",
            "in": "query"
          },
          {
            "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored",
            "required": false,
            "schema": {
              "title": "Cursor",
              "type": "string",
              "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The direction to search.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "The direction to search.",
              "default": "asc"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "The number of Orders to return",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of Orders to return",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrdersResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Player Order",
        "description": "Create a new Order for a specific player.\n\nNote that some orders may not be fulfilled at the completion of this request and need to be polled separately for results.",
        "operationId": "create_new_player_order",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerOrderCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/order/{order_id}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Uuid Order By Id Self",
        "description": "Get a single Order for a player by order id. This API only returns recent Orders for Players",
        "operationId": "get_player_uuid_order_by_id_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Order Id",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Order was not found for player",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/order/{order_id}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Uuid Order By Id",
        "description": "Get a single Order for a player by order id. This API only returns recent Orders for Players",
        "operationId": "get_player_uuid_order_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Order Id",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Order was not found for player",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/me/order/{order_id}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Order By Id Self",
        "description": "Get a single Order for a player by order id. This API only returns recent Orders for Players",
        "operationId": "get_player_order_by_id_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Order Id",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Order was not found for player",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_id}/order/{order_id}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Order By Id",
        "description": "Get a single Order for a player by order id. This API only returns recent Orders for Players",
        "operationId": "get_player_order_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Order Id",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Order was not found for player",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/portal/{portal_id}/processKeyEntitlements": {
      "post": {
        "tags": [
          "Key Entitlements"
        ],
        "summary": "Process Player Uuid Entitlements Self",
        "description": "Process entitlements for the current player with the given Platform. The end result will consume entitlements from the Platform and grant unclaimed Key Claims to the player.",
        "operationId": "process_player_uuid_entitlements_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Portal"
            },
            "name": "portal_id",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/portal/{portal_id}/processKeyEntitlements": {
      "post": {
        "tags": [
          "Key Entitlements"
        ],
        "summary": "Process Key Entitlements Player Uuid",
        "description": "Process entitlements for the given player with the given portal. The end result will consume entitlements from the Platform and grant unclaimed Key Claims to the player.",
        "operationId": "process_key_entitlements_player_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Portal"
            },
            "name": "portal_id",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/me/portal/{portal_id}/processKeyEntitlements": {
      "post": {
        "tags": [
          "Key Entitlements"
        ],
        "summary": "Process Key Entitlements Self",
        "description": "Process entitlements for the given player with the given portal. The end result will consume entitlements from the Platform and grant unclaimed Key Claims to the player.",
        "operationId": "process_key_entitlements_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Portal"
            },
            "name": "portal_id",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_id}/portal/{portal_id}/processKeyEntitlements": {
      "post": {
        "tags": [
          "Key Entitlements"
        ],
        "summary": "Process Key Entitlements",
        "description": "Process entitlements for the given player with the given portal. The end result will consume entitlements from the Platform and grant unclaimed Key Claims to the player.",
        "operationId": "process_key_entitlements",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Portal"
            },
            "name": "portal_id",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/keyClaim": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Key Claims For My Uuid",
        "description": "Get All Key Claims for all external Key campaigns for the current player.",
        "operationId": "get_key_claims_for_my_uuid",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaims"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/keyClaim": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Player Uuid Key Claims",
        "description": "Get All Key Claims for all external Key campaigns for the given player.",
        "operationId": "get_player_uuid_key_claims",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaims"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/me/keyClaim": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Key Claims For Me",
        "description": "Get All Key Claims for all external Key campaigns for the current player.",
        "operationId": "get_key_claims_for_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaims"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_id}/keyClaim": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Key Claims",
        "description": "Get All Key Claims for all external Key campaigns for the given player.",
        "operationId": "get_key_claims",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaims"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/keyClaim/{key_claim_uuid}": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Player Uuid Key Claim Self",
        "description": "Get Key Claim by uuid for the current player.",
        "operationId": "get_player_uuid_key_claim_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Claim Player Uuid Unclaimed Key Claim For Me",
        "description": "Claim the Key Claim by uuid for the current player. The external_key will be set to a value if any key matching the external_key_type is available.",
        "operationId": "claim_player_uuid_unclaimed_key_claim_for_me",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/keyClaim/{key_claim_uuid}": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Player Uuid Key Claim",
        "description": "Get Key Claim by uuid for the given player.",
        "operationId": "get_player_uuid_key_claim",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Claim Player Uuid Unclaimed Key Claim",
        "description": "Claim the Key Claim by uuid for the given player. The external_key will be set to a value if any key matching the external_key_type is available.",
        "operationId": "claim_player_uuid_unclaimed_key_claim",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/me/keyClaim/{key_claim_uuid}": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Key Claim For Me",
        "description": "Get Key Claim by uuid for the current player.",
        "operationId": "get_key_claim_for_me",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Claim Unclaimed Key Claim For Me",
        "description": "Claim the Key Claim by uuid for the current player. The external_key will be set to a value if any key matching the external_key_type is available.",
        "operationId": "claim_unclaimed_key_claim_for_me",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_id}/keyClaim/{key_claim_uuid}": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Key Claim",
        "description": "Get Key Claim by uuid for the given player.",
        "operationId": "get_key_claim",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Claim Unclaimed Key Claim",
        "description": "Claim the Key Claim by uuid for the given player. The external_key will be set to a value if any key matching the external_key_type is available.",
        "operationId": "claim_unclaimed_key_claim",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/marketing/campaign": {
      "get": {
        "tags": [
          "Marketing"
        ],
        "summary": "Get Marketing Campaigns",
        "description": "Get all marketing campaigns. There is currently no way to add Market Campaigns via API. Reach out to your Rally Here representative to add a new campaign.",
        "operationId": "get_marketing_campaigns",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketingCampaigns"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "CacheInfo": {
        "title": "CacheInfo",
        "required": [
          "etag"
        ],
        "type": "object",
        "properties": {
          "etag": {
            "title": "Etag",
            "minLength": 1,
            "type": "string"
          },
          "str_rep": {
            "title": "Str Rep",
            "type": "string"
          }
        },
        "description": "Cache information for the resource it is attached to. The etag value can be used with the If-None-Match and If-Match headers"
      },
      "Catalog": {
        "title": "Catalog",
        "type": "object",
        "properties": {
          "xp_tables": {
            "title": "Xp Tables",
            "allOf": [
              {
                "$ref": "#/components/schemas/XpTables"
              }
            ],
            "description": "The XP Tables."
          },
          "portal_use_rulesets": {
            "title": "Portal Use Rulesets",
            "allOf": [
              {
                "$ref": "#/components/schemas/PortalUseRulesets"
              }
            ],
            "description": "The Portal Use Rulesets. Use Inventory Bucket Use Rule Sets instead.",
            "deprecated": true
          },
          "inventory_bucket_use_rule_sets": {
            "title": "Inventory Bucket Use Rule Sets",
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucketUseRuleSets"
              }
            ],
            "description": "The rules on how to use Inventory Buckets."
          },
          "vendors": {
            "title": "Vendors",
            "allOf": [
              {
                "$ref": "#/components/schemas/Vendors"
              }
            ],
            "description": "The Vendors."
          },
          "loot": {
            "title": "Loot",
            "allOf": [
              {
                "$ref": "#/components/schemas/Loots"
              }
            ],
            "description": "The Loots."
          },
          "items": {
            "title": "Items",
            "allOf": [
              {
                "$ref": "#/components/schemas/Items"
              }
            ],
            "description": "The Items."
          },
          "price_points": {
            "title": "Price Points",
            "allOf": [
              {
                "$ref": "#/components/schemas/PricePoints"
              }
            ],
            "description": "The Price Points."
          },
          "time_frames": {
            "title": "Time Frames",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeFrames"
              }
            ],
            "description": "The Time Frames."
          },
          "cache_info": {
            "title": "Cache Info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CacheInfo"
              }
            ],
            "description": "Cache info for the Catalog."
          }
        },
        "description": "Full list of all loaded objects for the catalog.  Organized in a normalized model"
      },
      "ClaimKeyRequest": {
        "title": "ClaimKeyRequest",
        "type": "object",
        "properties": {
          "external_key_type": {
            "title": "External Key Type",
            "type": "string",
            "default": "Type of the External Key"
          }
        },
        "description": "Attempt to claim a Key Claim from a Marketing Campaign."
      },
      "ClientType": {
        "title": "ClientType",
        "enum": [
          "UNKNOWN",
          "WIN",
          "MAC",
          "XBOXONE",
          "PS4",
          "SWITCH",
          "ANDROID",
          "IOS",
          "PS5",
          "LINUX",
          "XSX"
        ],
        "type": "string",
        "description": "Client type for Entitlements",
        "x-enum-varnames": [
          "UNKNOWN",
          "WIN",
          "MAC",
          "XBOXONE",
          "PS4",
          "SWITCH",
          "ANDROID",
          "IOS",
          "PS5",
          "LINUX",
          "XSX"
        ],
        "x-enum-descriptions": [
          "Unknown client type",
          "Windows client type",
          "Mac client type",
          "XboxOne client type",
          "Playstation 4 client type",
          "Nintendo Switch client type",
          "Android client type",
          "iOS client type",
          "Playstation 5 client type",
          "Linux client type",
          "XSX client type"
        ]
      },
      "CreateInventoryRequest": {
        "title": "CreateInventoryRequest",
        "required": [
          "item_id"
        ],
        "type": "object",
        "properties": {
          "bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "description": "Inventory Bucket for this Inventory Operation.",
            "default": "none"
          },
          "count": {
            "title": "Count",
            "type": "integer",
            "description": "Count for this Inventory Operation.",
            "default": 1
          },
          "expires": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Arbitrary data map that can be set to add additional data to Inventory."
          },
          "item_id": {
            "title": "Item Id",
            "type": "integer"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateInventoryType"
              }
            ],
            "default": "persistent"
          }
        },
        "description": "Request to Create a new Inventory."
      },
      "CreateInventoryRequests": {
        "title": "CreateInventoryRequests",
        "required": [
          "inventory"
        ],
        "type": "object",
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Source"
              }
            ],
            "description": "Source of this Inventory Operation.",
            "default": "CLIENT"
          },
          "client_order_ref_id": {
            "title": "Client Order Ref Id",
            "type": "string",
            "description": "Arbitrary UUID that can be used by clients to correlate Order requests with Order responses.",
            "format": "uuid"
          },
          "inventory": {
            "title": "Inventory",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryRequest"
            }
          }
        },
        "description": "Collection of Create Inventory Requests. This will create new Inventory for each request. Each individual entry will be processed in the order they are specified in the collection.\n\n<b>Note: Partial success is possible as each request is processed individually.</b>"
      },
      "CreateInventoryType": {
        "title": "CreateInventoryType",
        "enum": [
          "persistent",
          "transient"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "PERSISTENT",
          "TRANSIENT"
        ],
        "x-enum-descriptions": [
          "Inventory that persists between Inventory Sessions.",
          "Inventory that does not persist between Inventory Sessions."
        ]
      },
      "EntitlementErrorCode": {
        "title": "EntitlementErrorCode",
        "enum": [
          "none",
          "auth_token_failure",
          "missing_information",
          "failed_to_consume",
          "no_sku_found",
          "wrong_sku_type_provided",
          "durable_authority_type_not_valid",
          "durable_single_use_authority_type_not_valid",
          "consumable_authority_type_not_valid",
          "unknown_sku_type_provided",
          "failed_to_submit_order",
          "already_applied_durable_single_use",
          "quantity_zero",
          "previously_applied"
        ],
        "type": "string",
        "description": "Error codes for Entitlements",
        "x-enum-varnames": [
          "NONE",
          "AUTH_TOKEN_FAILURE",
          "MISSING_INFORMATION",
          "FAILED_TO_CONSUME",
          "NO_SKU_FOUND",
          "WRONG_SKU_TYPE_PROVIDED",
          "DURABLE_AUTHORITY_TYPE_NOT_VALID",
          "DURABLE_SINGLE_USE_AUTHORITY_TYPE_NOT_VALID",
          "CONSUMABLE_AUTHORITY_TYPE_NOT_VALID",
          "UNKNOWN_SKU_TYPE_PROVIDED",
          "FAILED_TO_SUBMIT_ORDER",
          "ALREADY_APPLIED_DURABLE_SINGLE_USE",
          "QUANTITY_ZERO",
          "PREVIOUSLY_APPLIED"
        ],
        "x-enum-descriptions": [
          "No error occured",
          "Failed to find or validate the auth token",
          "Missing information in the request",
          "Failed to consume the entitlement",
          "No SKU found for this entitlement on the backend",
          "Entitlement is defined with a different SKU type than the one provided",
          "Durable entitlements are not allowed by this platform",
          "Durable single use entitlements are not allowed by this platform",
          "Consumable entitlements are not allowed by this platform",
          "Unknown SKU type provided",
          "Failed to submit the order to the backend",
          "Durable single use entitlement has already been applied",
          "Quantity was zero, nothing to apply",
          "Entitlement was previously applied"
        ]
      },
      "EntitlementStatus": {
        "title": "EntitlementStatus",
        "enum": [
          "UNKNOWN",
          "SUBMITTED",
          "FULFILLED",
          "FAILED",
          "PREVIOUSLY_APPLIED"
        ],
        "type": "string",
        "description": "Status of an Entitlement",
        "x-enum-varnames": [
          "UNKNOWN",
          "SUBMITTED",
          "FULFILLED",
          "FAILED",
          "PREVIOUSLY_APPLIED"
        ],
        "x-enum-descriptions": [
          "Entitlement status is unknown",
          "Entitlement has been submitted to the backend",
          "Entitlement has been fulfilled",
          "Entitlement has failed, check error_code for more information",
          "Entitlement was previously applied"
        ]
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "HzApiErrorModel": {
        "title": "HzApiErrorModel",
        "required": [
          "error_code",
          "desc"
        ],
        "type": "object",
        "properties": {
          "auth_success": {
            "title": "Auth Success",
            "type": "boolean",
            "default": true
          },
          "error_code": {
            "title": "Error Code",
            "type": "string"
          },
          "desc": {
            "title": "Desc",
            "type": "string"
          }
        }
      },
      "Inventory": {
        "title": "Inventory",
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ItemInventory"
            },
            "description": "Item Inventories for this Inventory.",
            "default": {}
          },
          "cache_info": {
            "title": "Cache Info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CacheInfo"
              }
            ],
            "description": "Cache Info for this Inventory."
          }
        },
        "description": "Inventory for a Player organized by Item ID."
      },
      "InventoryBucket": {
        "title": "InventoryBucket",
        "enum": [
          "free",
          "sweat",
          "none",
          "anon",
          "amazon",
          "steam",
          "psn",
          "xbox_live",
          "google",
          "twitch",
          "nintendo_switch",
          "apple",
          "nintendo",
          "epic",
          "google_play",
          "nintendo_ppid"
        ],
        "type": "string",
        "description": "Grouping of Inventory Items. Inventory items are grouped into different buckets as each Platform that is supported has different requirements on how Inventory can be used on their Platform and other Platforms.",
        "x-enum-varnames": [
          "FREE",
          "SWEAT",
          "NONE",
          "ANON",
          "AMAZON",
          "STEAM",
          "PSN",
          "XBOX_LIVE",
          "GOOGLE",
          "TWITCH",
          "NINTENDO_SWITCH",
          "APPLE",
          "NINTENDO",
          "EPIC",
          "GOOGLE_PLAY",
          "NINTENDO_PPID"
        ],
        "x-enum-descriptions": [
          "Inventory given away for free.",
          "Inventory earned by players through in game activities.",
          "Inventory that doesn't belong to any known platform.",
          "Inventory assigned to the anonymous platform.",
          "Inventory assigned to the amazon platform.",
          "Inventory assigned to the steam platform.",
          "Inventory assigned to the playstation platform.",
          "Inventory assigned to the Xbox platform.",
          "Inventory assigned to the Google platform.",
          "Inventory assigned to the Twitch platform.",
          "Inventory assigned to the Nintendo Switch platform.",
          "Inventory assigned to the Apple platform.",
          "Inventory assigned to the Nintendo platform.",
          "Inventory assigned to the Epic platform.",
          "Inventory assigned to the Google Play platform.",
          "Inventory assigned to the Nintendo PPID platform."
        ]
      },
      "InventoryBucketUseRuleSet": {
        "title": "InventoryBucketUseRuleSet",
        "type": "object",
        "properties": {
          "rules": {
            "title": "Rules",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        },
        "description": "A collection of Inventory Bucket Use Rules."
      },
      "InventoryBucketUseRuleSets": {
        "title": "InventoryBucketUseRuleSets",
        "type": "object",
        "properties": {
          "rule_sets": {
            "title": "Rule Sets",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/InventoryBucketUseRuleSet"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        },
        "description": "A collection of Inventory Bucket Use Rule Sets. A rule set determine how item can be used across buckets."
      },
      "InventoryContextResponse": {
        "title": "InventoryContextResponse",
        "type": "object",
        "properties": {
          "inventory": {
            "title": "Inventory",
            "allOf": [
              {
                "$ref": "#/components/schemas/Inventory"
              }
            ],
            "description": "Inventory Context for a Player.",
            "default": {
              "items": {}
            }
          }
        },
        "description": "Inventory Context for a Player."
      },
      "InventoryOperation": {
        "title": "InventoryOperation",
        "enum": [
          "invalid",
          "add",
          "subtract",
          "set",
          "check_greater_than_or_equal",
          "check_less_than",
          "check_greater_than_or_equal_and_subtract"
        ],
        "type": "string",
        "description": "Determines how the Inventory Quantity will be acted upon and the sort order of Loot in a Vendor.\n\nSort Order:\n1. check_greater_then_or_equal/check_less_than\n2. check_greater_than_or_equal_and_subtract/subtract\n3. add/set",
        "x-enum-varnames": [
          "invalid",
          "add",
          "subtract",
          "set",
          "check_greater_than_or_equal",
          "check_less_than",
          "check_greater_than_or_equal_and_subtract"
        ],
        "x-enum-descriptions": [
          "Invalid Inventory Operation.",
          "Add the quantity or expiration of the Inventory.",
          "Subtract the quantity or expiration of the Inventory.",
          "Set the quantity or expiration of the Inventory.",
          "Check if the quantity or expiration of the Inventory is greater than or equal to the value.",
          "Check if the quantity or expiration of the Inventory is less than the value.",
          "Check if the quantity or expiration of the Inventory is greater than or equal to the value and subtract the value from the quantity or expiration."
        ]
      },
      "InventoryRecord": {
        "title": "InventoryRecord",
        "required": [
          "inventory_id",
          "type",
          "count",
          "acquired"
        ],
        "type": "object",
        "properties": {
          "inventory_id": {
            "title": "Inventory Id",
            "type": "string",
            "description": "Unique ID for this Inventory Record.",
            "format": "uuid"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryType"
              }
            ],
            "description": "Type of Inventory Record."
          },
          "legacy_inventory_id": {
            "title": "Legacy Inventory Id",
            "type": "integer",
            "description": "Legacy Inventory ID.",
            "format": "int64"
          },
          "bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "description": "Bucket for this Inventory Record.",
            "default": "none"
          },
          "count": {
            "title": "Count",
            "type": "integer",
            "description": "Instance count for this Inventory Record."
          },
          "acquired": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "expires": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Arbitrary map of data for this Inventory Record."
          }
        },
        "description": "Inventory Record for a Player"
      },
      "InventorySelector": {
        "title": "InventorySelector",
        "enum": [
          "invalid",
          "own",
          "rent",
          "rent_timeframe_locked",
          "own_transient",
          "inherit_entitlement_inventory"
        ],
        "type": "string",
        "description": "Determines way Inventory Selected and to be modified.",
        "x-enum-varnames": [
          "invalid",
          "own",
          "rent",
          "rent_timeframe_locked",
          "own_transient",
          "inherit_entitlement_inventory"
        ],
        "x-enum-descriptions": [
          "Invalid Inventory Selector.",
          "The Inventory will be stored across Inventory Sessions.",
          "The Inventory will be stored across Inventory Sessions but will expire after a period of time. Quantity modification will modify the Inventory's expiration time.",
          "The Inventory will be stored across Inventory Sessions by will expire after a period of time. Quantity modification will not modify the Inventory's expiration time but instead the quantity of the Inventory.",
          "The Inventory will by fulfilled as transient Inventory and will not persist across Inventory Sessions.",
          "Loot fulfilled will look for a parent Entitlement and then grant the Loot as transient Inventory with the rental expiration as the parent."
        ]
      },
      "InventorySession": {
        "title": "InventorySession",
        "required": [
          "session_id"
        ],
        "type": "object",
        "properties": {
          "session_id": {
            "title": "Session Id",
            "type": "string",
            "description": "Unique ID for this Inventory Session."
          },
          "session_platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Platform for this Inventory Session."
          },
          "applied_durable_loot": {
            "title": "Applied Durable Loot",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Durable Loot that has been applied when this Inventory Session was created.",
            "default": []
          }
        },
        "description": "Inventory Session for a Player."
      },
      "InventorySessionCreateRequest": {
        "title": "InventorySessionCreateRequest",
        "type": "object",
        "properties": {
          "session_platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "The platform for the session."
          }
        },
        "description": "Request body for creating a new Inventory Session."
      },
      "InventorySessionCreateResponse": {
        "title": "InventorySessionCreateResponse",
        "required": [
          "session_id"
        ],
        "type": "object",
        "properties": {
          "session_id": {
            "title": "Session Id",
            "type": "string",
            "description": "The ID of the session."
          },
          "session_platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "The platform for the session."
          },
          "order_id": {
            "title": "Order Id",
            "type": "string",
            "description": "The ID of the Order generated for any Loot given during the creation of the Inventory Session."
          }
        },
        "description": "Response body for creating a new Inventory Session."
      },
      "InventoryType": {
        "title": "InventoryType",
        "enum": [
          "persistent",
          "transient",
          "always_owned"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "PERSISTENT",
          "TRANSIENT",
          "ALWAYS_OWNED"
        ],
        "x-enum-descriptions": [
          "Inventory that persists between Inventory Sessions.",
          "Stays around for the length of the Inventory Sessions.",
          "Items that are given to all Players and cannot be modified."
        ]
      },
      "Item": {
        "title": "Item",
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemType"
              }
            ],
            "description": "The type of item.",
            "default": "unit"
          },
          "legacy_type": {
            "title": "Legacy Type",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "legacy_subtype": {
            "title": "Legacy Subtype",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "ref_item_id": {
            "title": "Ref Item Id",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "availability_flags": {
            "title": "Availability Flags",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "entitled_loot_id": {
            "title": "Entitled Loot Id",
            "type": "integer",
            "description": "This is only valid for an entitlement Item. When this item is granted and Inventory Session creation, this is the Loot ID that will be fulfilled.",
            "default": 0
          },
          "level_xp_table_id": {
            "title": "Level Xp Table Id",
            "type": "integer",
            "description": "The XP Table that is used to determine the Player's level for this XP. The level increase occurs when the quantity of this Item increases above the minimum XP of an XP Level. This is only valid for an unit Item.",
            "default": 0
          },
          "level_vendor_id": {
            "title": "Level Vendor Id",
            "type": "integer",
            "description": "The Vendor that is used filfill level up rewards for this item. The level of the Player is used as the index into the Vendor's Loot table. This is only valid for an unit Item.",
            "default": 0
          },
          "coupon_discount_currency_item_id": {
            "title": "Coupon Discount Currency Item Id",
            "type": "integer",
            "description": "The item of the currency used by this coupon. This is only valid for an unit Item.",
            "default": 0
          },
          "coupon_discount_percentage": {
            "title": "Coupon Discount Percentage",
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "The percentage of the discount. This is only valid for an unit Item.",
            "default": 0
          },
          "coupon_consume_on_use": {
            "title": "Coupon Consume On Use",
            "type": "boolean",
            "description": "If true, the coupon will be consumed when used; reducing the Player's Inventory quantity by 1. This is only valid for an unit Item.",
            "default": false
          },
          "item_portal_use_ruleset_id": {
            "title": "Item Portal Use Ruleset Id",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "inventory_bucket_use_rule_set_id": {
            "title": "Inventory Bucket Use Rule Set Id",
            "type": "string",
            "description": "The Inventory Bucket Use Rule Set ID that determines how this item can be used across buckets."
          },
          "coupon_discount_loot": {
            "title": "Coupon Discount Loot",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "List of Loot IDs this item can discount",
            "default": []
          },
          "cache_info": {
            "title": "Cache Info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CacheInfo"
              }
            ],
            "description": "Cache information for this item."
          }
        },
        "description": "An Item. Item come in a couple of different flavors; determined by the `type` field.\n`Unit` items are stored in a player's inventory.\n`Recipe` items are not stored in a player's inventory and are used to fulfill SubVendor Loot.\n`RecipeWithPriceReduction` items are not stored in a player's inventory and are used to fulfill SubVendor Loot but at a reduced cost if the Player owns some of the Loot.\n`Entitlement` items are stored in a player's inventory and are fulfilled to the player each time an Inventory Session is created and when the Entitlement is fulfilled to the Player."
      },
      "ItemInventory": {
        "title": "ItemInventory",
        "type": "object",
        "properties": {
          "records": {
            "title": "Records",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/InventoryRecord"
            },
            "description": "Inventory Records for this Item Inventory.",
            "default": {}
          },
          "cache_info": {
            "title": "Cache Info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CacheInfo"
              }
            ],
            "description": "Cache Info for this Item Inventory."
          }
        },
        "description": "Inventory of a particular Item for a Player organized by Inventory ID."
      },
      "ItemType": {
        "title": "ItemType",
        "enum": [
          "unit",
          "recipe",
          "recipe_with_price_reduction",
          "entitlement",
          "dynamic_bundle"
        ],
        "type": "string",
        "description": "The type of item.",
        "x-enum-varnames": [
          "unit",
          "recipe",
          "recipe_with_price_reduction",
          "entitlement",
          "dynamic_bundle"
        ],
        "x-enum-descriptions": [
          "An item that is stored in a player's inventory.",
          "A Loot with the ItemType receipt will fulfill SubVendor Loot and will not stored in a player's inventory.",
          "The same as `ItemType.recipe` but will reduce the price based on whether or not the player owns items in the SubVendor's Loot table.",
          "An entitlement is a special item that is stored in a player's inventory and is fulfilled to the player each time an Inventory Session is created and when the Entitlement is fulfilled to the Player.",
          "Not support at this time."
        ]
      },
      "Items": {
        "title": "Items",
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Item"
            },
            "description": "A collection of Items by Item ID",
            "default": {}
          },
          "cache_info": {
            "title": "Cache Info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CacheInfo"
              }
            ],
            "description": "Item's cache information."
          }
        },
        "description": "A collections of Items by Item ID."
      },
      "KeyClaim": {
        "title": "KeyClaim",
        "required": [
          "key_claim_uuid"
        ],
        "type": "object",
        "properties": {
          "portal_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Portal"
              }
            ],
            "description": "Platform the player is on"
          },
          "portal_user_id": {
            "title": "Portal User Id",
            "type": "string",
            "description": "The Platform's unique identifier for the player"
          },
          "key_claim_uuid": {
            "title": "Key Claim Uuid",
            "type": "string",
            "description": "The unique identifier for the KeyClaim",
            "format": "uuid"
          },
          "claimed": {
            "title": "Claimed",
            "type": "boolean",
            "description": "Whether the KeyClaim has been claimed",
            "default": false
          },
          "external_key": {
            "title": "External Key",
            "type": "string",
            "description": "The external key that was been claimed by the player. This is only filled out once the KeyClaim has been claimed"
          },
          "external_key_campaign_uuid": {
            "title": "External Key Campaign Uuid",
            "type": "string",
            "description": "The unique identifier for the MarketingCampaign that the external key was claimed from",
            "format": "uuid"
          },
          "external_key_type": {
            "title": "External Key Type",
            "type": "string",
            "description": "This can be used to allow the player to claim different types based on their preferrence.hile we don't have requirement for what should contain, it must match a key type assigned to the external campaign."
          },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "description": "The time the KeyClaim was created"
          },
          "last_modified_on": {
            "title": "Last Modified On",
            "type": "string",
            "description": "The time the KeyClaim was last modified"
          }
        },
        "description": "A KeyClaim is a reward a player for fulfilling requirements of an eternal marketing campaign. Once the player has completed the requirements of the campaign and have been assigned a sku of the campaign by the Platform, invoke Process Key Entitlements to consume the sku from the Platform for a Key Claim."
      },
      "KeyClaims": {
        "title": "KeyClaims",
        "required": [
          "claims"
        ],
        "type": "object",
        "properties": {
          "claims": {
            "title": "Claims",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyClaim"
            }
          }
        },
        "description": "List of Key Claims available to the player."
      },
      "KeyType": {
        "title": "KeyType",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string"
          }
        },
        "description": "A Key Type is a type of key that can be claimed from a Marketing Campaign."
      },
      "Loot": {
        "title": "Loot",
        "required": [
          "loot_id",
          "vendor_id"
        ],
        "type": "object",
        "properties": {
          "loot_id": {
            "title": "Loot Id",
            "type": "integer",
            "description": "The Loot ID"
          },
          "vendor_id": {
            "title": "Vendor Id",
            "type": "integer",
            "description": "The Vendor ID"
          },
          "item_id": {
            "title": "Item Id",
            "type": "integer",
            "description": "The Item ID. Optional Item that will be granted to the player if Sub Vendor ID is not specified."
          },
          "item": {
            "title": "Item",
            "allOf": [
              {
                "$ref": "#/components/schemas/Item"
              }
            ],
            "description": "In-line Item definition. Optional Item that will be granted to the player if Sub Vendor ID is not specified."
          },
          "sub_vendor_id": {
            "title": "Sub Vendor Id",
            "type": "integer",
            "description": "The Sub Vendor ID. Optional Vendor ID that will be used to fulfill the Loot instead of granting the Item."
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "The quantity of the Item or Sub Vendor to fulfill. This will be multiplied by the quantity of fulfilled Loot and the parent Loot if quantity_type is relative.",
            "default": 0
          },
          "inventory_selector_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventorySelector"
              }
            ],
            "description": "The Inventory Selector Type. Determine how the Inventory is selected and quantity is modified.",
            "default": "invalid"
          },
          "inventory_operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryOperation"
              }
            ],
            "description": "The Inventory Operation. Determine how the Loot quantity is modified based on the context it is fulfilled in. This also determines the order Loot will be fulfilled in when sort_order is the same.",
            "default": "invalid"
          },
          "active": {
            "title": "Active",
            "type": "boolean",
            "description": "Determines if the Loot is active. Inactive Loot will not be fulfilled.",
            "default": false
          },
          "sort_order": {
            "title": "Sort Order",
            "type": "integer",
            "description": "The sort order of the Loot. Lower sort order will be fulfilled first. Inventory Operation is used as a tie breaker when sort_order is the same.",
            "default": 0
          },
          "drop_weight": {
            "title": "Drop Weight",
            "type": "integer",
            "description": "The drop weight of the Loot. Higher drop weight will be more likely to be fulfilled.",
            "default": 0
          },
          "fill_in_new_order": {
            "title": "Fill In New Order",
            "type": "boolean",
            "description": "When dropped in a randomly sampled vendor, will this create a new order or fill inline?. The primary use case for this is when you want the same loot to be dropped multiple times in a randomly sampled vendor.",
            "default": false
          },
          "allow_partial_bundles": {
            "title": "Allow Partial Bundles",
            "type": "boolean",
            "description": "When dropped in a randomly sampled vendor, will the sub vendor allow dropping part of the the bundle?  False means it will only drop if the entire sub vendor can be given to the player",
            "default": true
          },
          "required_item_id": {
            "title": "Required Item Id",
            "type": "integer",
            "description": "Item required to be owned/rented to drop this Loot in a randomly sampled vendor"
          },
          "required_item_count": {
            "title": "Required Item Count",
            "type": "integer",
            "description": "Amount of the required_item_id to be owned/rented to drop this Loot in a randomly sampled vendor",
            "default": 0
          },
          "stack_limit": {
            "title": "Stack Limit",
            "type": "integer",
            "description": "Amount of owned/rented of this Loot's item that will prevent this Loot from dropping in a randomly sampled vendor",
            "default": 0
          },
          "ui_hint": {
            "title": "Ui Hint",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "effective_from": {
            "title": "Effective From",
            "type": "string",
            "format": "date-time",
            "deprecated": true
          },
          "quantity_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QuantityType"
              }
            ],
            "description": "Determines how the quantity is modified in the context it is fulfilled in.",
            "default": "relative"
          },
          "quantity_mult_inventory_item_id": {
            "title": "Quantity Mult Inventory Item Id",
            "type": "integer",
            "description": "When fulfilling Loot if this is set the quantity will be multiplied by the quantity of this Item in the Player's Inventory."
          },
          "is_claimable_by_client": {
            "title": "Is Claimable By Client",
            "type": "boolean",
            "description": "Determines if the Loot can be claimed by the client. This is dangerous without the correct loot confiuration as a client could claim Loot multiple times.",
            "default": false
          },
          "time_frame_id": {
            "title": "Time Frame Id",
            "type": "integer",
            "description": "The Time Frame ID. Optional Time Frame ID that will be used the expiration of Loot when it is fulfilled."
          },
          "use_inventory_bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "description": "Inventory Bucket to use for this Loot."
          },
          "xp_quantity_transform_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/XpQuantityTransform"
              }
            ],
            "description": "Allows treating quantity as additional levels to grant to the Player.",
            "default": "none"
          },
          "current_price_point_guid": {
            "title": "Current Price Point Guid",
            "minLength": 1,
            "type": "string",
            "description": "The current price point guid. Optional Price Point ID that will be used to determine the price of the Loot when it is fulfilled."
          },
          "pre_sale_price_point_guid": {
            "title": "Pre Sale Price Point Guid",
            "minLength": 1,
            "type": "string",
            "description": "The pre sale price point guid. Optional Price Point ID that will be used to show the previous price of the Loot."
          },
          "cache_info": {
            "title": "Cache Info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CacheInfo"
              }
            ],
            "description": "Cache info for the Loot."
          },
          "hard_quantity_maximum": {
            "title": "Hard Quantity Maximum",
            "type": "integer",
            "description": "Hard cap on quantity of an item this Loot can give. Disabled with 0",
            "default": 0
          }
        },
        "description": "Loot determines how an Item fulfilled. When Loot is fulfilled, the Item is granted to the player or the Sub Vendor is fulfilled but not both."
      },
      "Loots": {
        "title": "Loots",
        "type": "object",
        "properties": {
          "loot": {
            "title": "Loot",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Loot"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        },
        "description": "A collection of Loot by Loot ID."
      },
      "MarketingCampaign": {
        "title": "MarketingCampaign",
        "required": [
          "uuid",
          "name",
          "key_types"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "title": "Uuid",
            "type": "string",
            "description": "The unique identifier for the Marketing Campaign",
            "format": "uuid"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the Marketing Campaign"
          },
          "portal_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Portal"
              }
            ],
            "description": "Platform for the Marketing Campaign"
          },
          "key_types": {
            "title": "Key Types",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyType"
            },
            "description": "The types of keys that can be claimed from this campaign"
          },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "description": "The time the MarketingCampaign was created"
          },
          "last_modified_on": {
            "title": "Last Modified On",
            "type": "string",
            "description": "The time the MarketingCampaign was last modified"
          }
        },
        "description": "A Marketing Campaign is a set of external keys that can be claimed by players.The key claims are assigned to the player based on"
      },
      "MarketingCampaigns": {
        "title": "MarketingCampaigns",
        "required": [
          "campaigns"
        ],
        "type": "object",
        "properties": {
          "campaigns": {
            "title": "Campaigns",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketingCampaign"
            }
          }
        },
        "description": "List of external Marketing Campaigns."
      },
      "PageMeta": {
        "title": "PageMeta",
        "type": "object",
        "properties": {
          "starting_position": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "cursor": {
            "title": "Cursor",
            "type": "string",
            "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored"
          },
          "sort": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SortOrder"
              }
            ],
            "description": "The direction to search.",
            "default": "asc"
          },
          "limit": {
            "title": "Limit",
            "maximum": 50,
            "minimum": 1,
            "type": "integer",
            "description": "The number of Orders to return",
            "default": 10
          }
        },
        "description": "Metadata about the page of results"
      },
      "Platform": {
        "title": "Platform",
        "enum": [
          "Anon",
          "Basic",
          "XboxLive",
          "PSN",
          "NintendoNAID",
          "NintendoSwitch",
          "NintendoPPID",
          "Google",
          "GooglePlay",
          "Apple",
          "Epic",
          "Steam",
          "Amazon",
          "Twitch"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "ANON",
          "BASIC",
          "XBOX_LIVE",
          "PSN",
          "NINTENDO_NAID",
          "NINTENDO_SWITCH",
          "NINTENDO_PPID",
          "GOOGLE",
          "GOOGLE_PLAY",
          "APPLE",
          "EPIC",
          "STEAM",
          "AMAZON",
          "TWITCH"
        ],
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ]
      },
      "PlatformEntitlement": {
        "title": "PlatformEntitlement",
        "required": [
          "platform_sku",
          "platform_entitlement_id"
        ],
        "type": "object",
        "properties": {
          "platform_sku": {
            "title": "Platform Sku",
            "type": "string",
            "description": "platform identifier for this purchase type"
          },
          "platform_entitlement_id": {
            "title": "Platform Entitlement Id",
            "type": "string",
            "description": "unique identifier for this purchased item (instance owned by this user)"
          },
          "quantity": {
            "title": "Quantity",
            "minimum": 0,
            "type": "integer",
            "description": "number purchased",
            "default": 1
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntitlementStatus"
              }
            ],
            "description": "status of this entitlement",
            "default": "UNKNOWN"
          },
          "error_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntitlementErrorCode"
              }
            ],
            "description": "Error code for this entitlement",
            "default": "none"
          },
          "order_id": {
            "title": "Order Id",
            "type": "string",
            "description": "Order ID for this entitlement"
          }
        },
        "description": "Entitlement for a platform. This takes in a sku and platform entitlement id and checks to see if the user has the entitlement on the platform"
      },
      "PlatformEntitlementProcessRequest": {
        "title": "PlatformEntitlementProcessRequest",
        "required": [
          "transaction_id",
          "platform_token",
          "platform_id",
          "platform_region",
          "client_type"
        ],
        "type": "object",
        "properties": {
          "transaction_id": {
            "title": "Transaction Id",
            "type": "string",
            "description": "unique id for this transaction on the platform"
          },
          "platform_token": {
            "title": "Platform Token",
            "type": "string",
            "description": "Platform token that can be used to verify the identity of the user"
          },
          "platform_id": {
            "title": "Platform Id",
            "type": "string",
            "description": "Platform this entitlement was purchased was made on"
          },
          "platform_region": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlatformRegion"
              }
            ],
            "description": "region this purchase was made in"
          },
          "client_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientType"
              }
            ],
            "description": "client type this purchase was made on"
          },
          "entitlements": {
            "title": "Entitlements",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformEntitlement"
            },
            "description": "Platform entitlements to process",
            "default": []
          }
        },
        "description": "Request to process a platform entitlement"
      },
      "PlatformEntitlementProcessResult": {
        "title": "PlatformEntitlementProcessResult",
        "required": [
          "request_id",
          "client_type",
          "transaction_id",
          "platform_region",
          "platform_id",
          "platform_user_id"
        ],
        "type": "object",
        "properties": {
          "request_id": {
            "title": "Request Id",
            "type": "string",
            "description": "unique id to allow tracking the request"
          },
          "client_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientType"
              }
            ],
            "description": "client type this purchase was made on"
          },
          "transaction_id": {
            "title": "Transaction Id",
            "type": "string",
            "description": "unique id for this transaction on the platform"
          },
          "platform_region": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlatformRegion"
              }
            ],
            "description": "region this purchase was made in"
          },
          "status": {
            "title": "Status",
            "type": "string",
            "description": "status of this result",
            "default": "SUBMITTED"
          },
          "client_entitlements": {
            "title": "Client Entitlements",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformEntitlement"
            },
            "description": "Client entitlements that have been processed",
            "default": []
          },
          "server_entitlements": {
            "title": "Server Entitlements",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformEntitlement"
            },
            "description": "Server entitlements that have been processed",
            "default": []
          },
          "platform_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Platform these transactions were processed on"
          },
          "platform_user_id": {
            "title": "Platform User Id",
            "type": "string",
            "description": "Unique identifier for the platform user that processed this entitlement"
          },
          "skipped_server_entitlements": {
            "title": "Skipped Server Entitlements",
            "type": "boolean",
            "description": "True if the server entitlements were skipped",
            "default": false
          }
        },
        "description": "Result of processing a platform entitlement"
      },
      "PlatformRegion": {
        "title": "PlatformRegion",
        "enum": [
          "Unknown",
          "NA",
          "EU"
        ],
        "type": "string",
        "description": "Region for Entitlements",
        "x-enum-varnames": [
          "UNKNOWN",
          "NA",
          "EU"
        ],
        "x-enum-descriptions": [
          "Unknown region",
          "North America region",
          "Europe Union region"
        ]
      },
      "PlayerInventoryChange": {
        "title": "PlayerInventoryChange",
        "type": "object",
        "properties": {
          "before_item_id": {
            "title": "Before Item Id",
            "type": "integer",
            "description": "The Item ID of the Item before the change."
          },
          "after_item_id": {
            "title": "After Item Id",
            "type": "integer",
            "description": "The Item ID of the Item after the change."
          },
          "before": {
            "title": "Before",
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryRecord"
              }
            ],
            "description": "The Inventory Record before the change."
          },
          "after": {
            "title": "After",
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryRecord"
              }
            ],
            "description": "The Inventory Record after the change."
          }
        },
        "description": "Represents the change that occurred to an entry in the Player's Inventory. The before fields contain the state before the change, after fields contain the state after the change."
      },
      "PlayerOrder": {
        "title": "PlayerOrder",
        "required": [
          "order_id",
          "player_uuid",
          "created_time",
          "entries"
        ],
        "type": "object",
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Source"
              }
            ],
            "description": "The source of the Player Order.",
            "default": "CLIENT"
          },
          "client_order_ref_id": {
            "title": "Client Order Ref Id",
            "type": "string",
            "description": "Arbitrary UUID clients can use to track Orders between request to response.",
            "format": "uuid"
          },
          "portal_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Portal"
              }
            ],
            "description": "Portal of the Portal User the Player Order belongs to.",
            "deprecated": true
          },
          "portal_user_id": {
            "title": "Portal User Id",
            "type": "string",
            "description": "Portal User Id for the Player this Player Order belongs to."
          },
          "instance_id": {
            "title": "Instance Id",
            "type": "string",
            "description": "Instance Id for the Instance who submits the Player Order."
          },
          "match_id": {
            "title": "Match Id",
            "type": "string",
            "description": "Match Id for the Match that generated the Player Order."
          },
          "order_id": {
            "title": "Order Id",
            "type": "string",
            "description": "Unique Identifier for the Order."
          },
          "player_uuid": {
            "title": "Player Uuid",
            "type": "string",
            "description": "Player UUID of the Player this Player Order belongs to.",
            "format": "uuid"
          },
          "created_time": {
            "title": "Created Time",
            "type": "string",
            "description": "Time the Player Order was created.",
            "format": "date-time"
          },
          "entries": {
            "title": "Entries",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerOrderEntry"
            },
            "description": "List of Player Order Entries for the Player Order."
          }
        },
        "description": "Represents a Player Order."
      },
      "PlayerOrderCreate": {
        "title": "PlayerOrderCreate",
        "required": [
          "entries"
        ],
        "type": "object",
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Source"
              }
            ],
            "description": "The source of the Player Order.",
            "default": "CLIENT"
          },
          "client_order_ref_id": {
            "title": "Client Order Ref Id",
            "type": "string",
            "description": "Arbitrary UUID clients can use to track Orders between request to response.",
            "format": "uuid"
          },
          "portal_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Portal"
              }
            ],
            "description": "Portal of the Portal User the Player Order belongs to.",
            "deprecated": true
          },
          "portal_user_id": {
            "title": "Portal User Id",
            "type": "string",
            "description": "Portal User Id for the Player this Player Order belongs to."
          },
          "instance_id": {
            "title": "Instance Id",
            "type": "string",
            "description": "Instance Id for the Instance who submits the Player Order."
          },
          "match_id": {
            "title": "Match Id",
            "type": "string",
            "description": "Match Id for the Match that generated the Player Order."
          },
          "order_id": {
            "title": "Order Id",
            "type": "string",
            "description": "Unique Identifier for the Order."
          },
          "entries": {
            "title": "Entries",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerOrderEntryCreate"
            },
            "description": "List of Player Order Entries for the Player Order."
          }
        },
        "description": "Create a new Player Order.\n\n<b>Note: `use_inventory_bucket` will be ignored on the PlayerOrderEntryCreate if the `source` equals `CLIENT`.</b>"
      },
      "PlayerOrderDetail": {
        "title": "PlayerOrderDetail",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerOrderDetailType"
              }
            ],
            "description": "The type of detail."
          },
          "loot_id": {
            "title": "Loot Id",
            "type": "integer",
            "description": "The Loot ID."
          },
          "inv_change": {
            "title": "Inv Change",
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerInventoryChange"
              }
            ],
            "description": "The Inventory change that occurred as part of this detail."
          },
          "order": {
            "title": "Order",
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerOrderCreate"
              }
            ],
            "description": "Reference to the Player Order that this detail belongs to."
          }
        },
        "description": "Represents details of what occurred in a Player Order Entry."
      },
      "PlayerOrderDetailType": {
        "title": "PlayerOrderDetailType",
        "enum": [
          "unknown",
          "inventory_change",
          "dynamic_bundle_lti",
          "claim_promo_code",
          "return_promo_code",
          "new_order"
        ],
        "type": "string",
        "description": "Player Order Detail Type.",
        "x-enum-varnames": [
          "UNKNOWN",
          "INVENTORY_CHANGE",
          "DYNAMIC_BUNDLE_LTI",
          "CLAIM_PROMO_CODE",
          "RETURN_PROMO_CODE",
          "NEW_ORDER"
        ],
        "x-enum-descriptions": [
          "Unknown.",
          "Inventory change.",
          "Dynamic Bundle LTI.",
          "Claim Promo Code.",
          "Return Promo Code.",
          "New Order."
        ]
      },
      "PlayerOrderEntry": {
        "title": "PlayerOrderEntry",
        "required": [
          "type",
          "quantity",
          "entry_id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerOrderEntryType"
              }
            ],
            "description": "The type of entry."
          },
          "loot_id": {
            "title": "Loot Id",
            "type": "integer",
            "description": "Unique Identifier for the Loot"
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Quantity of Inventory"
          },
          "vendor_version": {
            "title": "Vendor Version",
            "type": "integer",
            "description": "Legacy version for the vendor owning the loot_id.  Use `vendor_etag` instead.",
            "format": "int64",
            "deprecated": true
          },
          "vendor_etag": {
            "title": "Vendor Etag",
            "type": "string",
            "description": "etag for the vendor owning the loot_id.  Will fail the fulfillment if they do not match"
          },
          "dynamic_bundle_loot_ids": {
            "title": "Dynamic Bundle Loot Ids",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "List of Loot IDs for the dynamic bundle."
          },
          "purchase_price": {
            "title": "Purchase Price",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurchasePrice"
              }
            ],
            "description": "The purchase price of the Loot."
          },
          "external_tran_id": {
            "title": "External Tran Id",
            "type": "string",
            "description": "External Transaction Id for source of the acquisition or a promotion code to claim. Required for [PROMOTION_CODE] types"
          },
          "external_item_sku": {
            "title": "External Item Sku",
            "type": "string",
            "description": "External item SKU for the Order Entry."
          },
          "use_inventory_bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "description": "Inventory Bucket to use for the Order Entry."
          },
          "player_portal_event_id": {
            "title": "Player Portal Event Id",
            "type": "integer",
            "description": "Player Portal Event Id for the Order Entry.",
            "format": "int64"
          },
          "inventory_id": {
            "title": "Inventory Id",
            "type": "string",
            "description": "Unique Identifier for the Inventory",
            "format": "uuid"
          },
          "legacy_inventory_id": {
            "title": "Legacy Inventory Id",
            "type": "integer",
            "description": "Legacy Inventory Id. This is only used when type equals [UPDATE_EXISTING_PERSISTENT_INVENTORY, UPDATE_EXISTING_TRANSIENT_INVENTORY]",
            "format": "int64"
          },
          "item_id": {
            "title": "Item Id",
            "type": "integer",
            "description": "Item Id used create or update Inventory directly. This is only used when type equals [CREATE_NEW_PERSISTENT_INVENTORY, CREATE_NEW_TRANSIENT_INVENTORY]"
          },
          "expires": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom Data Attributes for the Inventory. This is only used when type equals [CREATE_NEW_PERSISTENT_INVENTORY, UPDATE_EXISTING_PERSISTENT_INVENTORY, CREATE_NEW_TRANSIENT_INVENTORY, UPDATE_EXISTING_TRANSIENT_INVENTORY, UPDATE_INVENTORY]"
          },
          "entry_id": {
            "title": "Entry Id",
            "type": "string",
            "description": "Unique Identifier for the Order Entry."
          },
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerOrderEntryResult"
              }
            ],
            "description": "Entry result type."
          },
          "details": {
            "title": "Details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerOrderDetail"
            },
            "description": "Details for the Order Entry.",
            "default": []
          }
        },
        "description": "Represents a line item in the Player Order and the results of the line item."
      },
      "PlayerOrderEntryCreate": {
        "title": "PlayerOrderEntryCreate",
        "required": [
          "type",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlayerOrderEntryType"
              }
            ],
            "description": "The type of entry."
          },
          "loot_id": {
            "title": "Loot Id",
            "type": "integer",
            "description": "Unique Identifier for the Loot"
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Quantity of Inventory"
          },
          "vendor_version": {
            "title": "Vendor Version",
            "type": "integer",
            "description": "Legacy version for the vendor owning the loot_id.  Use `vendor_etag` instead.",
            "format": "int64",
            "deprecated": true
          },
          "vendor_etag": {
            "title": "Vendor Etag",
            "type": "string",
            "description": "etag for the vendor owning the loot_id.  Will fail the fulfillment if they do not match"
          },
          "dynamic_bundle_loot_ids": {
            "title": "Dynamic Bundle Loot Ids",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "List of Loot IDs for the dynamic bundle."
          },
          "purchase_price": {
            "title": "Purchase Price",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurchasePrice"
              }
            ],
            "description": "The purchase price of the Loot."
          },
          "external_tran_id": {
            "title": "External Tran Id",
            "type": "string",
            "description": "External Transaction Id for source of the acquisition or a promotion code to claim. Required for [PROMOTION_CODE] types"
          },
          "external_item_sku": {
            "title": "External Item Sku",
            "type": "string",
            "description": "External item SKU for the Order Entry."
          },
          "use_inventory_bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "description": "Inventory Bucket to use for the Order Entry."
          },
          "player_portal_event_id": {
            "title": "Player Portal Event Id",
            "type": "integer",
            "description": "Player Portal Event Id for the Order Entry.",
            "format": "int64"
          },
          "inventory_id": {
            "title": "Inventory Id",
            "type": "string",
            "description": "Unique Identifier for the Inventory",
            "format": "uuid"
          },
          "legacy_inventory_id": {
            "title": "Legacy Inventory Id",
            "type": "integer",
            "description": "Legacy Inventory Id. This is only used when type equals [UPDATE_EXISTING_PERSISTENT_INVENTORY, UPDATE_EXISTING_TRANSIENT_INVENTORY]",
            "format": "int64"
          },
          "item_id": {
            "title": "Item Id",
            "type": "integer",
            "description": "Item Id used create or update Inventory directly. This is only used when type equals [CREATE_NEW_PERSISTENT_INVENTORY, CREATE_NEW_TRANSIENT_INVENTORY]"
          },
          "expires": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom Data Attributes for the Inventory. This is only used when type equals [CREATE_NEW_PERSISTENT_INVENTORY, UPDATE_EXISTING_PERSISTENT_INVENTORY, CREATE_NEW_TRANSIENT_INVENTORY, UPDATE_EXISTING_TRANSIENT_INVENTORY, UPDATE_INVENTORY]"
          },
          "entry_id": {
            "title": "Entry Id",
            "type": "string",
            "description": "Unique Identifier for the Order Entry."
          }
        },
        "description": "Request to create a Player Order Entry."
      },
      "PlayerOrderEntryResult": {
        "title": "PlayerOrderEntryResult",
        "enum": [
          "success",
          "internal_error",
          "invalid_entry_type",
          "not_allowed_on_current_portal",
          "loot_not_found",
          "loot_not_active",
          "price_item_not_found",
          "price_not_allowed",
          "dynamic_bundle_invalid",
          "too_many_requests",
          "price_does_not_match",
          "vendor_version_does_not_match",
          "dynamic_bundle_ltis_do_not_match",
          "cannot_afford_price",
          "cannot_afford_coupon",
          "failed_to_spend_price",
          "failed_to_spend_coupon",
          "loot_not_for_sale_with_price_item",
          "coupons_disabled",
          "coupon_item_not_found",
          "coupon_item_not_active",
          "coupon_item_not_applicable_for_quantity",
          "coupon_item_not_applicable_for_price_item",
          "coupon_item_not_applicable_for_loot",
          "quantity_not_allowed",
          "promotion_expired",
          "promotion_not_found",
          "promotion_no_uses_left",
          "promotion_not_available",
          "promotion_claimed_already",
          "dynamic_bundles_not_available",
          "transient_single_loot_already_applied",
          "loot_not_fillable_from_client",
          "permission_denied",
          "failed_to_find_any_sub_loot",
          "failed_to_fill_any_sub_loot",
          "cannot_meet_loot_blocker",
          "cannot_meet_loot_required",
          "failed_to_consume_loot_required",
          "failed_to_submit_new_order",
          "failed_to_modify_inventory",
          "inventory_not_found",
          "item_not_found",
          "item_not_active",
          "too_many_inv_custom_attributes",
          "always_owned_inventory_cannot_be_modified",
          "available_until_is_in_past"
        ],
        "type": "string",
        "description": "Result of a Player Order Entry.",
        "x-enum-varnames": [
          "SUCCESS",
          "INTERNAL_ERROR",
          "INVALID_ENTRY_TYPE",
          "NOT_ALLOWED_ON_CURRENT_PORTAL",
          "LOOT_NOT_FOUND",
          "LOOT_NOT_ACTIVE",
          "PRICE_ITEM_NOT_FOUND",
          "PRICE_NOT_ALLOWED",
          "DYNAMIC_BUNDLE_INVALID",
          "TOO_MANY_REQUESTS",
          "PRICE_DOES_NOT_MATCH",
          "VENDOR_VERSION_DOES_NOT_MATCH",
          "DYNAMIC_BUNDLE_LTIS_DO_NOT_MATCH",
          "CANNOT_AFFORD_PRICE",
          "CANNOT_AFFORD_COUPON",
          "FAILED_TO_SPEND_PRICE",
          "FAILED_TO_SPEND_COUPON",
          "LOOT_NOT_FOR_SALE_WITH_PRICE_ITEM",
          "COUPONS_DISABLED",
          "COUPON_ITEM_NOT_FOUND",
          "COUPON_ITEM_NOT_ACTIVE",
          "COUPON_ITEM_NOT_APPLICABLE_FOR_QUANTITY",
          "COUPON_ITEM_NOT_APPLICABLE_FOR_PRICE_ITEM",
          "COUPON_ITEM_NOT_APPLICABLE_FOR_LOOT",
          "QUANTITY_NOT_ALLOWED",
          "PROMOTION_EXPIRED",
          "PROMOTION_NOT_FOUND",
          "PROMOTION_NO_USES_LEFT",
          "PROMOTION_NOT_AVAILABLE",
          "PROMOTION_CLAIMED_ALREADY",
          "DYNAMIC_BUNDLES_NOT_AVAILABLE",
          "TRANSIENT_SINGLE_LOOT_ALREADY_APPLIED",
          "LOOT_NOT_FILLABLE_FROM_CLIENT",
          "PERMISSION_DENIED",
          "FAILED_TO_FIND_ANY_SUB_LOOT",
          "FAILED_TO_FILL_ANY_SUB_LOOT",
          "CANNOT_MEET_LOOT_BLOCKER",
          "CANNOT_MEET_LOOT_REQUIRED",
          "FAILED_TO_CONSUME_LOOT_REQUIRED",
          "FAILED_TO_SUBMIT_NEW_ORDER",
          "FAILED_TO_MODIFY_INVENTORY",
          "INVENTORY_NOT_FOUND",
          "ITEM_NOT_FOUND",
          "ITEM_NOT_ACTIVE",
          "TOO_MANY_INV_CUSTOM_ATTRIBUTES",
          "ALWAYS_OWNED_INVENTORY_CANNOT_BE_MODIFIED",
          "AVAILABLE_UNTIL_IS_IN_PAST"
        ],
        "x-enum-descriptions": [
          "The Order Entry was successful.",
          "An internal error occurred when processing Order Entry.",
          "Order Entry type is invalid.",
          "Order Entry is not allowed on the current platform.",
          "The Loot was not found.",
          "The Loot was not active at the time of processing.",
          "The Item was configured as the Price was not found.",
          "The Price is not allowed for the given Loot.",
          "The given Dynamic Bundle was invalid.",
          "Too many requests were made in during the evaluation window.",
          "Given Price does not match the expected Price.",
          "Vendor version does not match the expected version.",
          "Dynamic Bundle Loot does not match expected Loot.",
          "Player cannot afford the given Price.",
          "Player cannot afford the given Coupon.",
          "Failed to spend the given Price.",
          "Failed to spend the given Coupon.",
          "The given Loot is not for sale with the given Price Item.",
          "Coupons are disabled.",
          "The Item configured for the Coupon was not found.",
          "The Coupon Item is not active.",
          "Coupon Item is not applicable for the given quantity.",
          "Coupon Item is not applicable for the given Price Item.",
          "Coupon Item is not applicable for the given Loot.",
          "Quantity is not allowed for the given Loot.",
          "Promotion has expired.",
          "Promotion was not found.",
          "Promotion has no uses left.",
          "Promotion is not available.",
          "Promotion has already been claimed.",
          "Dynamic Bundles are not available.",
          "Transient Single Loot has already been applied.",
          "Loot is not claimable from the client.",
          "Permission denied.",
          "Failed to find any sub loot.",
          "Failed to fill any sub loot.",
          "Loot fulfillment failed because the player failed a `check_less_than` Inventory Operation. This means the Players Inventory Quantity is equal or greater than Loot's quantity.",
          "Loot fulfillment failed because the player failed a `check_greater_than_or_equal` or `check_greater_than_or_equal_and_subtract` Inventory Operation. This means the player has less than the Loot's required quantity.",
          "Failed to consume the given Loot required.",
          "Failed to submit a new order.",
          "Failed to modify inventory.",
          "Inventory was not found.",
          "Item was not found.",
          "Item is not active.",
          "Too many inventory custom attributes provided.",
          "Always owned inventory cannot be modified.",
          "Available until is in the past."
        ]
      },
      "PlayerOrderEntryType": {
        "title": "PlayerOrderEntryType",
        "enum": [
          "fill_loot",
          "purchase_loot",
          "purchase_dynamic_bundle",
          "promotion_code",
          "fill_loot_single_transient",
          "fill_entitled_loot",
          "create_new_persistent_inventory",
          "update_existing_persistent_inventory",
          "create_new_transient_inventory",
          "update_existing_transient_inventory",
          "update_inventory"
        ],
        "type": "string",
        "description": "Player Order Entry Type.",
        "x-enum-varnames": [
          "FILL_LOOT",
          "PURCHASE_LOOT",
          "PURCHASE_DYNAMIC_BUNDLE",
          "PROMOTION_CODE",
          "FILL_LOOT_SINGLE_TRANSIENT",
          "FILL_ENTITLED_LOOT",
          "CREATE_NEW_PERSISTENT_INVENTORY",
          "UPDATE_EXISTING_PERSISTENT_INVENTORY",
          "CREATE_NEW_TRANSIENT_INVENTORY",
          "UPDATE_EXISTING_TRANSIENT_INVENTORY",
          "UPDATE_INVENTORY"
        ],
        "x-enum-descriptions": [
          "Fill a loot item.",
          "Purchase a loot item.",
          "Purchase a dynamic bundle.",
          "Claim a promotion code.",
          "Fill a transient loot item.",
          "Fill an loot entitlement.",
          "Create persistent Inventory.",
          "Deprecated. Use update_inventory instead.",
          "Create transient Inventory.",
          "Deprecated. Use update_inventory instead.",
          "Update existing Inventory."
        ]
      },
      "PlayerOrdersResponse": {
        "title": "PlayerOrdersResponse",
        "required": [
          "page"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerOrder"
            },
            "description": "A collection of Player Orders.",
            "default": []
          },
          "page": {
            "title": "Page",
            "allOf": [
              {
                "$ref": "#/components/schemas/PageMeta"
              }
            ],
            "description": "Page metadata for the Player Orders."
          }
        },
        "description": "A collection of Player Orders."
      },
      "Portal": {
        "title": "Portal",
        "enum": [
          -2,
          -1,
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33
        ],
        "type": "integer",
        "description": "An enumeration.",
        "x-enum-varnames": [
          "FREE",
          "SWEAT",
          "UNKNOWN",
          "STANDARD",
          "ANON",
          "KONGREGATE",
          "AMAZON",
          "STEAM",
          "TCLS",
          "LEVELUP_LATAM",
          "LEVELUP_BRA",
          "PSN",
          "XBOX_LIVE",
          "BASIC",
          "FACEBOOK",
          "GOOGLE",
          "UNUSED_14",
          "RIVALS_MOBILE",
          "TWITCH",
          "PALADINS_STRIKE",
          "SMITE_BLITZ",
          "FACEBOOK_SMITE",
          "FACEBOOK_PALADINS",
          "FACEBOOK_HOTG",
          "NINTENDO_SWITCH",
          "TUNE",
          "APPLE",
          "DISCORD",
          "NINTENDO",
          "UNUSED_27",
          "EPIC",
          "FORTE",
          "SIMULMEDIA",
          "LUNA",
          "GOOGLE_PLAY",
          "NINTENDO_PPID"
        ],
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ]
      },
      "PortalUseRuleset": {
        "title": "PortalUseRuleset",
        "type": "object",
        "properties": {
          "rules": {
            "title": "Rules",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Portal"
              }
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        },
        "description": "A collection of Portal Use Rules."
      },
      "PortalUseRulesets": {
        "title": "PortalUseRulesets",
        "type": "object",
        "properties": {
          "rulesets": {
            "title": "Rulesets",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PortalUseRuleset"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        },
        "description": "A collection of Portal Use Rulesets. A ruleset determine how item can be used across portals."
      },
      "PriceBreakpoint": {
        "title": "PriceBreakpoint",
        "required": [
          "price_item_id",
          "quantity",
          "price"
        ],
        "type": "object",
        "properties": {
          "price_item_id": {
            "title": "Price Item Id",
            "type": "integer"
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer"
          },
          "price": {
            "title": "Price",
            "type": "integer"
          }
        },
        "description": "Price based on quantity and the Item ID of the currency used."
      },
      "PricePoint": {
        "title": "PricePoint",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the Price Point."
          },
          "strict_flag": {
            "title": "Strict Flag",
            "type": "boolean",
            "description": "Forces the quantity to be equal to a quantity on a Price Breakpoint.",
            "default": false
          },
          "cap_flag": {
            "title": "Cap Flag",
            "type": "boolean",
            "description": "Only allows quantity to be fulfilled up the highest quantity on the Price Breakpoints",
            "default": false
          },
          "current_breakpoints": {
            "title": "Current Breakpoints",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceBreakpoint"
            },
            "description": "Current Price Breakpoints.",
            "default": []
          },
          "pre_sale_breakpoints": {
            "title": "Pre Sale Breakpoints",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceBreakpoint"
            },
            "description": "Previous Price Breakpoints.",
            "default": []
          },
          "cache_info": {
            "title": "Cache Info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CacheInfo"
              }
            ],
            "description": "Cache info for the Price Point."
          }
        },
        "description": "A collection of Price Breakpoints (volume pricing)."
      },
      "PricePoints": {
        "title": "PricePoints",
        "type": "object",
        "properties": {
          "price_points": {
            "title": "Price Points",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PricePoint"
            },
            "description": "Price Points mapped by Price Point ID.",
            "default": {}
          },
          "cache_info": {
            "title": "Cache Info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CacheInfo"
              }
            ],
            "description": "Cache info for the Price Points."
          }
        },
        "description": "A collection of Price Points by Price Point ID."
      },
      "PurchasePrice": {
        "title": "PurchasePrice",
        "required": [
          "price_item_id",
          "price"
        ],
        "type": "object",
        "properties": {
          "price_item_id": {
            "title": "Price Item Id",
            "type": "integer",
            "description": "The Item used as the currency for the purchase."
          },
          "price": {
            "title": "Price",
            "type": "integer",
            "description": "The price of the Item."
          },
          "price_coupon_item_id": {
            "title": "Price Coupon Item Id",
            "type": "integer",
            "description": "The Item used as the coupon for the purchase."
          }
        },
        "description": "The purchase price of an Item."
      },
      "QuantityType": {
        "title": "QuantityType",
        "enum": [
          "relative",
          "absolute"
        ],
        "type": "string",
        "description": "Determines how the quantity is to be modified.\n\nRelative looks at the context in which is fulfilled; e.g. If Loot A has a quantity of 2 and 5 is being fulfill, the resulting quantity modification will be 10.\n\nAbsolute ignores the context in which it is fulfilled; e.g. If Loot B has a quantity of 3 and 5 is being fulfill 5, the resulting quantity modification will be 3.",
        "x-enum-varnames": [
          "relative",
          "absolute"
        ],
        "x-enum-descriptions": [
          "The quantity will be modified relative to the context in which it is fulfilled.",
          "The quantity will be modified regardless of the context in which it is fulfilled."
        ]
      },
      "SortOrder": {
        "title": "SortOrder",
        "enum": [
          "asc",
          "desc"
        ],
        "type": "string",
        "description": "Determine the direction of the sort",
        "x-enum-varnames": [
          "ASCENDING",
          "DESCENDING"
        ],
        "x-enum-descriptions": [
          "Determine the direction of the sort",
          "Determine the direction of the sort"
        ]
      },
      "Source": {
        "title": "Source",
        "enum": [
          "UNKNOWN",
          "WEB_ORDER_REPAIR",
          "IN_GAME",
          "WEB_SITE",
          "NO_SALE",
          "SUPPORT",
          "ACTIVITY",
          "REFUND",
          "SYSTEM",
          "REWARDS",
          "ESPORTS",
          "TREASURE",
          "CONSOLE",
          "ODYSSEY",
          "STEAM",
          "RETURN",
          "JSON_GATE",
          "SEND_GIFT",
          "RECEIVE_GIFT",
          "STEAM_DLC",
          "TWITCH_MILESTONE",
          "TWITCH_PRIME",
          "PSN",
          "XBOX",
          "PTS_GRANT",
          "INSTANCE",
          "ACCOUNT_TRANSFER",
          "PROMOCODE",
          "TRIUMPH_SYSTEM",
          "LOGIN_GRANT",
          "EOM_UNCAPPED",
          "EOM_CAPPED",
          "FACEBOOK_DROP",
          "DATABASE_SCRIPT",
          "ACCOUNT_LINKING",
          "CLAN",
          "CONVERSION",
          "APPLE",
          "GOOGLE",
          "GOOGLE_PLAY",
          "PORTAL_DURABLE",
          "PARTNER_ACHIEVEMENT",
          "MIXER_DROP",
          "NINTENDO",
          "STREAM_VIEWING_PROGRESS",
          "DISCORD",
          "FIRST_LOGIN_GRANT",
          "TWITCH_FUEL",
          "DISCORD_DLC",
          "NETEASE",
          "EPIC_GAMES",
          "FORTE",
          "FACEBOOK",
          "HIREZ",
          "DAILY_REWARD",
          "ADD_ACCOUNT_EMAIL_REWARD",
          "CLIENT_CLAIM",
          "CLIENT",
          "ENTITLEMENTS",
          "AMAZON",
          "SIMULMEDIA",
          "LUNA"
        ],
        "type": "string",
        "description": "The source of Player Orders.",
        "x-enum-varnames": [
          "UNKNOWN",
          "WEB_ORDER_REPAIR",
          "IN_GAME",
          "WEB_SITE",
          "NO_SALE",
          "SUPPORT",
          "ACTIVITY",
          "REFUND",
          "SYSTEM",
          "REWARDS",
          "ESPORTS",
          "TREASURE",
          "CONSOLE",
          "ODYSSEY",
          "STEAM",
          "RETURN",
          "JSON_GATE",
          "SEND_GIFT",
          "RECEIVE_GIFT",
          "STEAM_DLC",
          "TWITCH_MILESTONE",
          "TWITCH_PRIME",
          "PSN",
          "XBOX",
          "PTS_GRANT",
          "INSTANCE",
          "ACCOUNT_TRANSFER",
          "PROMOCODE",
          "TRIUMPH_SYSTEM",
          "LOGIN_GRANT",
          "EOM_UNCAPPED",
          "EOM_CAPPED",
          "FACEBOOK_DROP",
          "DATABASE_SCRIPT",
          "ACCOUNT_LINKING",
          "CLAN",
          "CONVERSION",
          "APPLE",
          "GOOGLE",
          "GOOGLE_PLAY",
          "PORTAL_DURABLE",
          "PARTNER_ACHIEVEMENT",
          "MIXER_DROP",
          "NINTENDO",
          "STREAM_VIEWING_PROGRESS",
          "DISCORD",
          "FIRST_LOGIN_GRANT",
          "TWITCH_FUEL",
          "DISCORD_DLC",
          "NETEASE",
          "EPIC_GAMES",
          "FORTE",
          "FACEBOOK",
          "HIREZ",
          "DAILY_REWARD",
          "ADD_ACCOUNT_EMAIL_REWARD",
          "CLIENT_CLAIM",
          "CLIENT",
          "ENTITLEMENTS",
          "AMAZON",
          "SIMULMEDIA",
          "LUNA"
        ],
        "x-enum-descriptions": [
          "Unknown source.",
          "Repair Order send from the Web to fix up Inventory mistakes.",
          "Order granted in-game.",
          "Order send from the Web site.",
          "No sale.",
          "Order granted by Support.",
          "Order granted by an activity.",
          "Order granted by a refund.",
          "Order granted by the system.",
          "Order granted by as a reward.",
          "Order granted by Esports.",
          "Order granted by Treasure.",
          "Order granted by Console.",
          "Order granted by Odyssey.",
          "Order granted by Steam.",
          "Order granted by a return.",
          "Order granted by the JSON gate.",
          "Order granted by sending a gift.",
          "Order granted by receiving a gift.",
          "Order granted by Steam DLC.",
          "Order granted by hitting a Twitch milestone.",
          "Order granted by Twitch Prime.",
          "Order granted by PSN.",
          "Order granted by Xbox.",
          "Order granted by PTS.",
          "Order granted by an instance.",
          "Order granted by an account transfer.",
          "Order granted by a promocode.",
          "Order granted by the Triumph system.",
          "Order granted by logging in.",
          "Order granted by an uncapped EOM .",
          "Order granted by a capped EOM reward.",
          "Order granted by a Facebook drop.",
          "Order granted by a database script.",
          "Order granted by account linking.",
          "Order granted by a clan.",
          "Order granted by a conversion.",
          "Order granted by Apple.",
          "Order granted by Google.",
          "Order granted by Google Play.",
          "Order granted by a portal durable.",
          "Order granted by a partner achievement.",
          "Order granted by a Mixer drop.",
          "Order granted by Nintendo.",
          "Order granted by stream viewing progress.",
          "Order granted by Discord.",
          "Order granted by first login.",
          "Order granted by Twitch Fuel.",
          "Order granted by Discord DLC.",
          "Order granted by NetEase.",
          "Order granted by Epic Games.",
          "Order granted by Forte.",
          "Order granted by Facebook.",
          "Order granted by Hi-Rez.",
          "Order granted by a daily reward.",
          "Order granted by adding an account email.",
          "Order granted by a client claim.",
          "Order granted by the client.",
          "Order granted by entitlements.",
          "Order granted by Amazon.",
          "Order granted by Simulmedia.",
          "Order granted by Luna."
        ]
      },
      "TimeFrame": {
        "title": "TimeFrame",
        "required": [
          "start",
          "end"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the Time Frame."
          },
          "active": {
            "title": "Active",
            "type": "boolean",
            "description": "Whether or not the Time Frame is active.",
            "default": false
          },
          "episode": {
            "title": "Episode",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "episode_type": {
            "title": "Episode Type",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "hour_interval": {
            "title": "Hour Interval",
            "type": "integer",
            "description": "Number of hours that this time frame lasts until restarting.0 interval means no repeating.",
            "default": 0
          },
          "start": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "end": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "cache_info": {
            "title": "Cache Info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CacheInfo"
              }
            ],
            "description": "Cache info for the Time Frame."
          }
        },
        "description": "Time Frames are used to calculate the expiration of Inventory"
      },
      "TimeFrames": {
        "title": "TimeFrames",
        "type": "object",
        "properties": {
          "time_frames": {
            "title": "Time Frames",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/TimeFrame"
            },
            "description": "Time Frames mapped by Time Frame ID.",
            "default": {}
          },
          "cache_info": {
            "title": "Cache Info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CacheInfo"
              }
            ],
            "description": "Cache info for the Time Frames."
          }
        },
        "description": "A collection of Time Frames by Time Frame ID."
      },
      "UpdateInventoryRequest": {
        "title": "UpdateInventoryRequest",
        "type": "object",
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Source"
              }
            ],
            "description": "Source of this Inventory Operation.",
            "default": "CLIENT"
          },
          "client_order_ref_id": {
            "title": "Client Order Ref Id",
            "type": "string",
            "description": "Arbitrary UUID that can be used by clients to correlate Order requests with Order responses.",
            "format": "uuid"
          },
          "bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "description": "Inventory Bucket for this Inventory Operation.",
            "default": "none"
          },
          "count": {
            "title": "Count",
            "type": "integer",
            "description": "Count for this Inventory Operation.",
            "default": 1
          },
          "expires": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Arbitrary data map that can be set to add additional data to Inventory."
          },
          "item_id": {
            "title": "Item Id",
            "type": "integer",
            "description": "Item ID for this Inventory Operation. If the Item ID is not set during an Update Inventory Request, then the Item ID will not be modified on the existing Inventory Record."
          }
        },
        "description": "Request to Update an existing Inventory entry. If the Inventory entry does not exist, then the request will fail."
      },
      "UpdateInventoryRequestById": {
        "title": "UpdateInventoryRequestById",
        "required": [
          "inventory_id"
        ],
        "type": "object",
        "properties": {
          "bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "description": "Inventory Bucket for this Inventory Operation.",
            "default": "none"
          },
          "count": {
            "title": "Count",
            "type": "integer",
            "description": "Count for this Inventory Operation.",
            "default": 1
          },
          "expires": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Arbitrary data map that can be set to add additional data to Inventory."
          },
          "item_id": {
            "title": "Item Id",
            "type": "integer",
            "description": "Item ID for this Inventory Operation. If the Item ID is not set during an Update Inventory Request, then the Item ID will not be modified on the existing Inventory Record."
          },
          "inventory_id": {
            "title": "Inventory Id",
            "type": "string",
            "description": "Inventory ID for this Inventory Operation.",
            "format": "uuid"
          }
        },
        "description": "Request to Update Inventory by an existing Inventory ID. If the Inventory entry does not exist, then the request will fail."
      },
      "UpdateInventoryRequests": {
        "title": "UpdateInventoryRequests",
        "required": [
          "inventory"
        ],
        "type": "object",
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Source"
              }
            ],
            "description": "Source of this Inventory Operation.",
            "default": "CLIENT"
          },
          "client_order_ref_id": {
            "title": "Client Order Ref Id",
            "type": "string",
            "description": "Arbitrary UUID that can be used by clients to correlate Order requests with Order responses.",
            "format": "uuid"
          },
          "inventory": {
            "title": "Inventory",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateInventoryRequestById"
            },
            "description": "Collection of Update Inventory Requests."
          }
        },
        "description": "Collection of Update Inventory Requests. The Inventory referenced in the Update Inventory Requests must exist otherwise the request will fail. Each individual entry will be processed in the order they are specified in the collection.\n\n<b>Note: Partial success is possible as each request is processed individually.</b>"
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "Vendor": {
        "title": "Vendor",
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VendorType"
              }
            ],
            "description": "Determines how the Vendor fulfills the loot",
            "default": "recipe"
          },
          "legacy_type": {
            "title": "Legacy Type",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "legacy_config_version": {
            "title": "Legacy Config Version",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "loot": {
            "title": "Loot",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Loot"
            },
            "description": "The Loot the Vendor will fulfill mapped by Loot ID.",
            "default": {}
          },
          "cache_info": {
            "title": "Cache Info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CacheInfo"
              }
            ],
            "description": "Cache info for the Vendor."
          }
        },
        "description": "A collection of Loot and how to fulfill them."
      },
      "VendorType": {
        "title": "VendorType",
        "enum": [
          "recipe",
          "randomly_sampled"
        ],
        "type": "string",
        "description": "Determines how the Vendor fulfills the loot.",
        "x-enum-varnames": [
          "recipe",
          "randomly_sampled"
        ],
        "x-enum-descriptions": [
          "A Vendor that will always drop all of the Loot in the Loot table.",
          "A Vendor that will only fulfill one of the Loot in the Loot table based on the drop weights of the Loot."
        ]
      },
      "Vendors": {
        "title": "Vendors",
        "type": "object",
        "properties": {
          "vendors": {
            "title": "Vendors",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Vendor"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        },
        "description": "A collection of Vendors by Vendor ID."
      },
      "XpQuantityTransform": {
        "title": "XpQuantityTransform",
        "enum": [
          "none",
          "from_current_xp_to_target_additional_level_min_xp",
          "from_current_level_min_xp_to_target_additional_level_min_xp",
          "from_zero_to_target_exact_level_min_xp"
        ],
        "type": "string",
        "description": "Allows granting xp levels as Loot. If the player is already max level, the Loot will not be fulfilled. Requires the Item assigned to the Loot to have an XP Table ID.\n\nThe following examples assume the player is level 3 with 150 total xp. The quantity configured on the Loot being fulfilled is 1. The XP Table is configured like so:\n1: 20\n2: 50\n3: 100\n4: 200\n5: 400\n\nfrom_current_xp_to_target_additional_level_min_xp - The Loot will grant the player enough xp to reach min xp of the next level.\nExample 1: fulfill quantity 1\n    Player will be level 4 with 200 total xp.\nExample 2: fulfill quantity 2\n    Player will be level 5 with 400 total xp.\nExample 3: fulfill quantity 3\n    Player will be level 5 with 400 total xp.\n\nfrom_current_level_min_xp_to_target_additional_level_min_xp - The Loot will grant the player the amount of xp required to reach the min xp of the next level from the min xp of the current level.\nExample 1: fulfill quantity 1\n    Player will be level 4 with 250 total xp.\nExample 2: fulfill quantity 2\n    Player will be level 5 with 450 total xp.\nExample 3: fulfill quantity 3\n    Player will be level 5 with 450 total xp.\n\nfrom_zero_to_target_exact_level_min_xp - The Loot will grant the player the amount of xp required to reach the min xp of the target level from zero xp.\nExample 1: fulfill quantity 1\n    Player will be level 3 with 170 total xp.\nExample 2: fulfill quantity 2\n    Player will be level 4 with 200 total xp.\nExample 3: fulfill quantity 3\n    Player will be level 4 with 250 total xp.",
        "x-enum-varnames": [
          "none",
          "from_current_xp_to_target_additional_level_min_xp",
          "from_current_level_min_xp_to_target_additional_level_min_xp",
          "from_zero_to_target_exact_level_min_xp"
        ],
        "x-enum-descriptions": [
          "Quantity will be treated as XP and will not be transformed.",
          "Quantity will be treated as level to fulfill and will be transformed to the amount of XP required to reach the min xp of the fulfilled levels.",
          "Quantity will be treated as levels to fulfill and will be transformed to the amount of XP required to reach the min xp of the fulfilled levels from the min xp of the current level.",
          "Quantity will be treated as levels to fulfill and will be transformed to the amount of XP required to reach the min xp of the fulfilled levels from zero xp."
        ]
      },
      "XpTable": {
        "title": "XpTable",
        "type": "object",
        "properties": {
          "xp_entries": {
            "title": "Xp Entries",
            "type": "object",
            "additionalProperties": {
              "minimum": 0,
              "type": "integer"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        },
        "description": "A collection of XP Levels from 1 to N. Each level has a minimum XP value."
      },
      "XpTables": {
        "title": "XpTables",
        "type": "object",
        "properties": {
          "xp_tables": {
            "title": "Xp Tables",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/XpTable"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        },
        "description": "A collection of XP Tables. Each table is a collection of XP Levels from 1 to N. Each level has a minimum XP value."
      }
    },
    "securitySchemes": {
      "HTTPBearerHeadersOrCookie": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "Inventory",
      "description": "Operations on inventory data"
    },
    {
      "name": "Catalog",
      "description": "Operations on catalog data"
    },
    {
      "name": "Entitlements",
      "description": "Operations on entitlements. Key Entitlements are used to grant Players Key Claims for an external Marketing Campaign."
    },
    {
      "name": "Key Claims",
      "description": "Operations to Fetch and Claim Key Claims. Key Claims are used to give Players keys as a reward to fulfilling the requirements of an external Marketing Campaign. Examples: Beta Keys, Extra Game keys for Friends, etc."
    },
    {
      "name": "Marketing",
      "description": "Operations on Market Campaigns. There is currently no way to add Market Campaigns via API. Reach out to your Rally Here representative to add a new campaign."
    }
  ]
}
