{
  "openapi": "3.0.2",
  "info": {
    "title": "inventory-api",
    "description": "Hi-Rez Studios inventory-api.",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "/inventory"
    }
  ],
  "paths": {
    "/v1/catalog": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog All",
        "operationId": "get_catalog_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/xp": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Xp All",
        "operationId": "get_catalog_xp_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XpTables"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/xp/{xp_table_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Xp Table",
        "operationId": "get_catalog_xp_table",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Xp Table Id",
              "type": "integer"
            },
            "name": "xp_table_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XpTable"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/portal-use-ruleset": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Portal Use Rulesets All",
        "operationId": "get_catalog_portal_use_rulesets_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalUseRulesets"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/portal-use-ruleset/{portal_use_ruleset_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Portal Use Ruleset",
        "operationId": "get_catalog_portal_use_ruleset",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Portal Use Ruleset Id",
              "type": "integer"
            },
            "name": "portal_use_ruleset_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalUseRuleset"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/inventory-bucket-use-rule-set": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Inventory Bucket Use Rule Sets All",
        "operationId": "get_catalog_inventory_bucket_use_rule_sets_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryBucketUseRuleSets"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/inventory-bucket-use-rule-set/{inventory_bucket_use_ruleset_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Inventory Bucket Use Rule Set",
        "operationId": "get_catalog_inventory_bucket_use_rule_set",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Inventory Bucket Use Ruleset Id",
              "type": "string"
            },
            "name": "inventory_bucket_use_ruleset_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryBucketUseRuleSet"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/price-point": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Price Points All",
        "operationId": "get_catalog_price_points_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricePoints"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/price-point/{price_point_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Price Point",
        "operationId": "get_catalog_price_point",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Price Point Id",
              "minLength": 1,
              "type": "string"
            },
            "name": "price_point_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricePoint"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/item": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Items All",
        "operationId": "get_catalog_items_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Items"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/item/{item_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Item",
        "operationId": "get_catalog_item",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Item Id",
              "type": "integer"
            },
            "name": "item_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/vendor": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Vendors All",
        "operationId": "get_catalog_vendors_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendors"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/vendor/{vendor_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Vendor",
        "operationId": "get_catalog_vendor",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Vendor Id",
              "type": "integer"
            },
            "name": "vendor_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/loot": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Loots All",
        "operationId": "get_catalog_loots_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Loots"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/loot/{loot_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Loot",
        "operationId": "get_catalog_loot",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Loot Id",
              "type": "integer"
            },
            "name": "loot_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Loot"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/time-frame": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Time Frames All",
        "operationId": "get_catalog_time_frames_all",
        "parameters": [
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeFrames"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/catalog/time-frame/{time_frame_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Time Frame",
        "operationId": "get_catalog_time_frame",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Time Frame Id",
              "type": "integer"
            },
            "name": "time_frame_id",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed.",
            "required": false,
            "schema": {
              "title": "If-None-Match",
              "type": "string",
              "description": "If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeFrame"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Inventory Uuid Self",
        "operationId": "get_player_inventory_uuid_self",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Item Ids",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "default": []
            },
            "name": "item_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryContextResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request, when the server should have the resource available",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Many Player Inventory Uuid Self",
        "operationId": "modify_many_player_inventory_uuid_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create Player Inventory Uuid Self",
        "operationId": "create_player_inventory_uuid_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Inventory Uuid",
        "operationId": "get_player_inventory_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Item Ids",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "default": []
            },
            "name": "item_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryContextResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request, when the server should have the resource available",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Many Player Inventory Uuid",
        "operationId": "modify_many_player_inventory_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create Player Inventory Uuid",
        "operationId": "create_player_inventory_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/me/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Inventory Self",
        "operationId": "get_player_inventory_self",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Item Ids",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "default": []
            },
            "name": "item_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryContextResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request, when the server should have the resource available",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Many Player Inventory Self",
        "operationId": "modify_many_player_inventory_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create Player Inventory Self",
        "operationId": "create_player_inventory_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_id}/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Inventory",
        "operationId": "get_player_inventory",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Item Ids",
              "type": "array",
              "items": {
                "type": "integer"
              },
              "default": []
            },
            "name": "item_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryContextResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "503": {
            "description": "Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time",
            "headers": {
              "Retry-After": {
                "description": "Number of seconds after which to retry the request, when the server should have the resource available",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Many Player Inventory",
        "operationId": "modify_many_player_inventory",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create Player Inventory",
        "operationId": "create_player_inventory",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryRequests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/inventory/{inventory_id}": {
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Player Inventory Uuid Self",
        "operationId": "modify_player_inventory_uuid_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Inventory Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "inventory_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/inventory/{inventory_id}": {
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Player Inventory Uuid",
        "operationId": "modify_player_inventory_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Inventory Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "inventory_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/me/inventory/{inventory_id}": {
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Player Inventory Self",
        "operationId": "modify_player_inventory_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Inventory Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "inventory_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_id}/inventory/{inventory_id}": {
      "put": {
        "tags": [
          "Inventory"
        ],
        "summary": "Modify Player Inventory",
        "operationId": "modify_player_inventory",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Inventory Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "inventory_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/session": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Inventory Session Info By Player Uuid Self",
        "operationId": "get_inventory_session_info_by_player_uuid_self",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySession"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Inventory Session By Player Uuid Self",
        "operationId": "create_new_inventory_session_by_player_uuid_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventorySessionCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySessionCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/session": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Inventory Session Info By Player Uuid",
        "operationId": "get_inventory_session_info_by_player_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySession"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Inventory Session By Player Uuid",
        "operationId": "create_new_inventory_session_by_player_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventorySessionCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySessionCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/me/session": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Inventory Session Info Self",
        "operationId": "get_inventory_session_info_self",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySession"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Inventory Session Self",
        "operationId": "create_new_inventory_session_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventorySessionCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySessionCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_id}/session": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Inventory Session Info",
        "operationId": "get_inventory_session_info",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySession"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Inventory Session",
        "operationId": "create_new_inventory_session",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventorySessionCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventorySessionCreateResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/entitlement": {
      "post": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Process Platform Entitlement For Me",
        "description": "Process platform entitlements, consuming from the platform inventory where possible and generating orders.  \n\nNote that some orders may not be fulfilled at the completion of this request and need to be polled separately for results",
        "operationId": "process_platform_entitlement_for_me",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformEntitlementProcessRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformEntitlementProcessResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/entitlement": {
      "post": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Process Platform Entitlements By Player Uuid",
        "description": "Process platform entitlements, consuming from the platform inventory where possible and generating orders.  \n\nNote that some orders may not be fulfilled at the completion of this request and need to be polled separately for results",
        "operationId": "process_platform_entitlements_by_player_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformEntitlementProcessRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformEntitlementProcessResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/entitlement/request/{request_id}": {
      "get": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Retrieve Entitlements For Me",
        "description": "Get the status of a platform entitlement request by request id",
        "operationId": "retrieve_entitlements_for_me",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Request Id",
              "type": "string"
            },
            "name": "request_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformEntitlementProcessResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/entitlement/request/{request_id}": {
      "get": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Retrieve Entitlements By Player Uuid",
        "description": "Get the status of a platform entitlement request by request id",
        "operationId": "retrieve_entitlements_by_player_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Request Id",
              "type": "string"
            },
            "name": "request_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformEntitlementProcessResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/order": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Uuid Orders Self",
        "description": "Get recent player orders about a player. Empty results means there were no recent orders.If starting_position and cursor are given, starting_position will be ignored in favor of cursor",
        "operationId": "get_player_uuid_orders_self",
        "parameters": [
          {
            "description": "Inclusive starting time for the first order",
            "required": false,
            "schema": {
              "title": "Time Zone Aware Datetime",
              "type": "string",
              "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
              "format": "date-time"
            },
            "name": "starting_position",
            "in": "query"
          },
          {
            "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored",
            "required": false,
            "schema": {
              "title": "Cursor",
              "type": "string",
              "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The direction to search.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "The direction to search.",
              "default": "asc"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "The number of Orders to return",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of Orders to return",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrdersResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Player Uuid Order Self",
        "operationId": "create_new_player_uuid_order_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerOrderCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/order": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Uuid Orders",
        "description": "Get recent player orders about a player. Empty results means there were no recent orders.If starting_position and cursor are given, starting_position will be ignored in favor of cursor",
        "operationId": "get_player_uuid_orders",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "description": "Inclusive starting time for the first order",
            "required": false,
            "schema": {
              "title": "Time Zone Aware Datetime",
              "type": "string",
              "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
              "format": "date-time"
            },
            "name": "starting_position",
            "in": "query"
          },
          {
            "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored",
            "required": false,
            "schema": {
              "title": "Cursor",
              "type": "string",
              "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The direction to search.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "The direction to search.",
              "default": "asc"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "The number of Orders to return",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of Orders to return",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrdersResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Player Uuid Order",
        "operationId": "create_new_player_uuid_order",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerOrderCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/me/order": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Orders Self",
        "description": "Get recent player orders about a player. Empty results means there were no recent orders.If starting_position and cursor are given, starting_position will be ignored in favor of cursor",
        "operationId": "get_player_orders_self",
        "parameters": [
          {
            "description": "Inclusive starting time for the first order",
            "required": false,
            "schema": {
              "title": "Time Zone Aware Datetime",
              "type": "string",
              "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
              "format": "date-time"
            },
            "name": "starting_position",
            "in": "query"
          },
          {
            "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored",
            "required": false,
            "schema": {
              "title": "Cursor",
              "type": "string",
              "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The direction to search.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "The direction to search.",
              "default": "asc"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "The number of Orders to return",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of Orders to return",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrdersResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Player Order Self",
        "operationId": "create_new_player_order_self",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerOrderCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_id}/order": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Orders",
        "description": "Get recent player orders about a player. Empty results means there were no recent orders.If starting_position and cursor are given, starting_position will be ignored in favor of cursor",
        "operationId": "get_player_orders",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "description": "Inclusive starting time for the first order",
            "required": false,
            "schema": {
              "title": "Time Zone Aware Datetime",
              "type": "string",
              "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
              "format": "date-time"
            },
            "name": "starting_position",
            "in": "query"
          },
          {
            "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored",
            "required": false,
            "schema": {
              "title": "Cursor",
              "type": "string",
              "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The direction to search.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "The direction to search.",
              "default": "asc"
            },
            "name": "sort",
            "in": "query"
          },
          {
            "description": "The number of Orders to return",
            "required": false,
            "schema": {
              "title": "Limit",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "description": "The number of Orders to return",
              "default": 10
            },
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrdersResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create New Player Order",
        "operationId": "create_new_player_order",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerOrderCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrderCreate"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/order/{order_id}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Uuid Order By Id Self",
        "description": "Get a single Order for a player by order id. This API only returns recent Orders for Players",
        "operationId": "get_player_uuid_order_by_id_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Order Id",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Order was not found for player",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/order/{order_id}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Uuid Order By Id",
        "description": "Get a single Order for a player by order id. This API only returns recent Orders for Players",
        "operationId": "get_player_uuid_order_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Order Id",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Order was not found for player",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/me/order/{order_id}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Order By Id Self",
        "description": "Get a single Order for a player by order id. This API only returns recent Orders for Players",
        "operationId": "get_player_order_by_id_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Order Id",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Order was not found for player",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_id}/order/{order_id}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Player Order By Id",
        "description": "Get a single Order for a player by order id. This API only returns recent Orders for Players",
        "operationId": "get_player_order_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Order Id",
              "type": "string"
            },
            "name": "order_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayerOrder"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Order was not found for player",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/portal/{portal_id}/processKeyEntitlements": {
      "post": {
        "tags": [
          "Key Entitlements"
        ],
        "summary": "Process Player Uuid Entitlements Self",
        "description": "Process entitlements for the current player with the given Platform. The end result will consume entitlements from the Platform and grant unclaimed Key Claims to the player.",
        "operationId": "process_player_uuid_entitlements_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Portal"
            },
            "name": "portal_id",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/portal/{portal_id}/processKeyEntitlements": {
      "post": {
        "tags": [
          "Key Entitlements"
        ],
        "summary": "Process Key Entitlements Player Uuid",
        "description": "Process entitlements for the given player with the given portal. The end result will consume entitlements from the Platform and grant unclaimed Key Claims to the player.",
        "operationId": "process_key_entitlements_player_uuid",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Portal"
            },
            "name": "portal_id",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/me/portal/{portal_id}/processKeyEntitlements": {
      "post": {
        "tags": [
          "Key Entitlements"
        ],
        "summary": "Process Key Entitlements Self",
        "description": "Process entitlements for the given player with the given portal. The end result will consume entitlements from the Platform and grant unclaimed Key Claims to the player.",
        "operationId": "process_key_entitlements_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Portal"
            },
            "name": "portal_id",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_id}/portal/{portal_id}/processKeyEntitlements": {
      "post": {
        "tags": [
          "Key Entitlements"
        ],
        "summary": "Process Key Entitlements",
        "description": "Process entitlements for the given player with the given portal. The end result will consume entitlements from the Platform and grant unclaimed Key Claims to the player.",
        "operationId": "process_key_entitlements",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Portal"
            },
            "name": "portal_id",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/keyClaim": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Key Claims For My Uuid",
        "description": "Get All Key Claims for all external Key campaigns for the current player.",
        "operationId": "get_key_claims_for_my_uuid",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaims"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/keyClaim": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Player Uuid Key Claims",
        "description": "Get All Key Claims for all external Key campaigns for the given player.",
        "operationId": "get_player_uuid_key_claims",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaims"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/me/keyClaim": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Key Claims For Me",
        "description": "Get All Key Claims for all external Key campaigns for the current player.",
        "operationId": "get_key_claims_for_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaims"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_id}/keyClaim": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Key Claims",
        "description": "Get All Key Claims for all external Key campaigns for the given player.",
        "operationId": "get_key_claims",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaims"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/me/keyClaim/{key_claim_uuid}": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Player Uuid Key Claim Self",
        "description": "Get Key Claim by uuid for the current player.",
        "operationId": "get_player_uuid_key_claim_self",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Claim Player Uuid Unclaimed Key Claim For Me",
        "description": "Claim the Key Claim by uuid for the current player. The external_key will be set to a value if any key matching the external_key_type is available.",
        "operationId": "claim_player_uuid_unclaimed_key_claim_for_me",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/keyClaim/{key_claim_uuid}": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Player Uuid Key Claim",
        "description": "Get Key Claim by uuid for the given player.",
        "operationId": "get_player_uuid_key_claim",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Claim Player Uuid Unclaimed Key Claim",
        "description": "Claim the Key Claim by uuid for the given player. The external_key will be set to a value if any key matching the external_key_type is available.",
        "operationId": "claim_player_uuid_unclaimed_key_claim",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/me/keyClaim/{key_claim_uuid}": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Key Claim For Me",
        "description": "Get Key Claim by uuid for the current player.",
        "operationId": "get_key_claim_for_me",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Claim Unclaimed Key Claim For Me",
        "description": "Claim the Key Claim by uuid for the current player. The external_key will be set to a value if any key matching the external_key_type is available.",
        "operationId": "claim_unclaimed_key_claim_for_me",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/player/{player_id}/keyClaim/{key_claim_uuid}": {
      "get": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Get Key Claim",
        "description": "Get Key Claim by uuid for the given player.",
        "operationId": "get_key_claim",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "post": {
        "tags": [
          "Key Claims"
        ],
        "summary": "Claim Unclaimed Key Claim",
        "description": "Claim the Key Claim by uuid for the given player. The external_key will be set to a value if any key matching the external_key_type is available.",
        "operationId": "claim_unclaimed_key_claim",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Player Id",
              "type": "integer"
            },
            "name": "player_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Key Claim Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "key_claim_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyClaim"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v1/marketing/campaign": {
      "get": {
        "tags": [
          "Marketing"
        ],
        "summary": "Get Marketing Campaigns",
        "description": "Get all marketing campaigns. There is currently no way to add Market Campaigns via API. Reach out to your Rally Here representative to add a new campaign.",
        "operationId": "get_marketing_campaigns",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketingCampaigns"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "CacheInfo": {
        "title": "CacheInfo",
        "required": [
          "etag"
        ],
        "type": "object",
        "properties": {
          "etag": {
            "title": "Etag",
            "minLength": 1,
            "type": "string"
          },
          "str_rep": {
            "title": "Str Rep",
            "type": "string"
          }
        }
      },
      "Catalog": {
        "title": "Catalog",
        "type": "object",
        "properties": {
          "xp_tables": {
            "$ref": "#/components/schemas/XpTables"
          },
          "portal_use_rulesets": {
            "$ref": "#/components/schemas/PortalUseRulesets"
          },
          "inventory_bucket_use_rule_sets": {
            "$ref": "#/components/schemas/InventoryBucketUseRuleSets"
          },
          "vendors": {
            "$ref": "#/components/schemas/Vendors"
          },
          "loot": {
            "$ref": "#/components/schemas/Loots"
          },
          "items": {
            "$ref": "#/components/schemas/Items"
          },
          "price_points": {
            "$ref": "#/components/schemas/PricePoints"
          },
          "time_frames": {
            "$ref": "#/components/schemas/TimeFrames"
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        },
        "description": "Full list of all loaded objects for the catalog.  Organized in a normalized model"
      },
      "ClaimKeyRequest": {
        "title": "ClaimKeyRequest",
        "type": "object",
        "properties": {
          "external_key_type": {
            "title": "External Key Type",
            "type": "string",
            "default": "Type of the External Key"
          }
        },
        "description": "Attempt to claim a Key Claim from a Marketing Campaign."
      },
      "ClientType": {
        "title": "ClientType",
        "enum": [
          "UNKNOWN",
          "WIN",
          "MAC",
          "XBOXONE",
          "PS4",
          "SWITCH",
          "ANDROID",
          "IOS",
          "PS5",
          "LINUX",
          "XSX"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "Unknown client type",
          "Windows client type",
          "Mac client type",
          "XboxOne client type",
          "Playstation 4 client type",
          "Nintendo Switch client type",
          "Android client type",
          "iOS client type",
          "Playstation 5 client type",
          "Linux client type",
          "XSX client type"
        ],
        "x-enum-varnames": [
          "UNKNOWN",
          "WIN",
          "MAC",
          "XBOXONE",
          "PS4",
          "SWITCH",
          "ANDROID",
          "IOS",
          "PS5",
          "LINUX",
          "XSX"
        ]
      },
      "CreateInventoryRequest": {
        "title": "CreateInventoryRequest",
        "required": [
          "item_id"
        ],
        "type": "object",
        "properties": {
          "bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "default": "none"
          },
          "count": {
            "title": "Count",
            "type": "integer",
            "default": 1
          },
          "expires": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "item_id": {
            "title": "Item Id",
            "type": "integer"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateInventoryType"
              }
            ],
            "default": "persistent"
          }
        }
      },
      "CreateInventoryRequests": {
        "title": "CreateInventoryRequests",
        "required": [
          "inventory"
        ],
        "type": "object",
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Source"
              }
            ],
            "default": "CLIENT"
          },
          "client_order_ref_id": {
            "title": "Client Order Ref Id",
            "type": "string",
            "format": "uuid"
          },
          "inventory": {
            "title": "Inventory",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateInventoryRequest"
            }
          }
        }
      },
      "CreateInventoryType": {
        "title": "CreateInventoryType",
        "enum": [
          "persistent",
          "transient"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "PERSISTENT",
          "TRANSIENT"
        ]
      },
      "EntitlementErrorCode": {
        "title": "EntitlementErrorCode",
        "enum": [
          "none",
          "auth_token_failure",
          "missing_information",
          "failed_to_consume",
          "no_sku_found",
          "wrong_sku_type_provided",
          "durable_authority_type_not_valid",
          "durable_single_use_authority_type_not_valid",
          "consumable_authority_type_not_valid",
          "unknown_sku_type_provided",
          "failed_to_submit_order",
          "already_applied_durable_single_use",
          "quantity_zero",
          "previously_applied"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "No error occured",
          "Failed to find or validate the auth token",
          "Missing information in the request",
          "Failed to consume the entitlement",
          "No SKU found for this entitlement on the backend",
          "Entitlement is defined with a different SKU type than the one provided",
          "Durable entitlements are not allowed by this platform",
          "Durable single use entitlements are not allowed by this platform",
          "Consumable entitlements are not allowed by this platform",
          "Unknown SKU type provided",
          "Failed to submit the order to the backend",
          "Durable single use entitlement has already been applied",
          "Quantity was zero, nothing to apply",
          "Entitlement was previously applied"
        ],
        "x-enum-varnames": [
          "NONE",
          "AUTH_TOKEN_FAILURE",
          "MISSING_INFORMATION",
          "FAILED_TO_CONSUME",
          "NO_SKU_FOUND",
          "WRONG_SKU_TYPE_PROVIDED",
          "DURABLE_AUTHORITY_TYPE_NOT_VALID",
          "DURABLE_SINGLE_USE_AUTHORITY_TYPE_NOT_VALID",
          "CONSUMABLE_AUTHORITY_TYPE_NOT_VALID",
          "UNKNOWN_SKU_TYPE_PROVIDED",
          "FAILED_TO_SUBMIT_ORDER",
          "ALREADY_APPLIED_DURABLE_SINGLE_USE",
          "QUANTITY_ZERO",
          "PREVIOUSLY_APPLIED"
        ]
      },
      "EntitlementStatus": {
        "title": "EntitlementStatus",
        "enum": [
          "UNKNOWN",
          "SUBMITTED",
          "FULFILLED",
          "FAILED",
          "PREVIOUSLY_APPLIED"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "Entitlement status is unknown",
          "Entitlement has been submitted to the backend",
          "Entitlement has been fulfilled",
          "Entitlement has failed, check error_code for more information",
          "Entitlement was previously applied"
        ],
        "x-enum-varnames": [
          "UNKNOWN",
          "SUBMITTED",
          "FULFILLED",
          "FAILED",
          "PREVIOUSLY_APPLIED"
        ]
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "HzApiErrorModel": {
        "title": "HzApiErrorModel",
        "required": [
          "error_code",
          "desc"
        ],
        "type": "object",
        "properties": {
          "auth_success": {
            "title": "Auth Success",
            "type": "boolean",
            "default": true
          },
          "error_code": {
            "title": "Error Code",
            "type": "string"
          },
          "desc": {
            "title": "Desc",
            "type": "string"
          }
        }
      },
      "Inventory": {
        "title": "Inventory",
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ItemInventory"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "InventoryBucket": {
        "title": "InventoryBucket",
        "enum": [
          "free",
          "sweat",
          "none",
          "anon",
          "amazon",
          "steam",
          "psn",
          "xbox_live",
          "google",
          "twitch",
          "nintendo_switch",
          "apple",
          "nintendo",
          "epic",
          "google_play",
          "nintendo_ppid"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "Inventory given away for free.",
          "Inventory earned by players through in game activities.",
          "Inventory that doesn't belong to any known platform.",
          "Inventory assigned to the anonymous platform.",
          "Inventory assigned to the amazon platform.",
          "Inventory assigned to the steam platform.",
          "Inventory assigned to the playstation platform.",
          "Inventory assigned to the Xbox platform.",
          "Inventory assigned to the Google platform.",
          "Inventory assigned to the Twitch platform.",
          "Inventory assigned to the Nintendo Switch platform.",
          "Inventory assigned to the Apple platform.",
          "Inventory assigned to the Nintendo platform.",
          "Inventory assigned to the Epic platform.",
          "Inventory assigned to the Google Play platform.",
          "Inventory assigned to the Nintendo PPID platform."
        ],
        "x-enum-varnames": [
          "FREE",
          "SWEAT",
          "NONE",
          "ANON",
          "AMAZON",
          "STEAM",
          "PSN",
          "XBOX_LIVE",
          "GOOGLE",
          "TWITCH",
          "NINTENDO_SWITCH",
          "APPLE",
          "NINTENDO",
          "EPIC",
          "GOOGLE_PLAY",
          "NINTENDO_PPID"
        ]
      },
      "InventoryBucketUseRuleSet": {
        "title": "InventoryBucketUseRuleSet",
        "type": "object",
        "properties": {
          "rules": {
            "title": "Rules",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "InventoryBucketUseRuleSets": {
        "title": "InventoryBucketUseRuleSets",
        "type": "object",
        "properties": {
          "rule_sets": {
            "title": "Rule Sets",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/InventoryBucketUseRuleSet"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "InventoryContextResponse": {
        "title": "InventoryContextResponse",
        "type": "object",
        "properties": {
          "inventory": {
            "title": "Inventory",
            "allOf": [
              {
                "$ref": "#/components/schemas/Inventory"
              }
            ],
            "default": {
              "items": {}
            }
          }
        }
      },
      "InventoryOperation": {
        "title": "InventoryOperation",
        "enum": [
          "invalid",
          "add",
          "subtract",
          "set",
          "check_greater_than_or_equal",
          "check_less_than",
          "check_greater_than_or_equal_and_subtract"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "invalid",
          "add",
          "subtract",
          "set",
          "check_greater_than_or_equal",
          "check_less_than",
          "check_greater_than_or_equal_and_subtract"
        ]
      },
      "InventoryRecord": {
        "title": "InventoryRecord",
        "required": [
          "inventory_id",
          "type",
          "count",
          "acquired"
        ],
        "type": "object",
        "properties": {
          "inventory_id": {
            "title": "Inventory Id",
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/InventoryType"
          },
          "legacy_inventory_id": {
            "title": "Legacy Inventory Id",
            "type": "integer"
          },
          "bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "default": "none"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "acquired": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "expires": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "InventorySelector": {
        "title": "InventorySelector",
        "enum": [
          "invalid",
          "own",
          "rent",
          "rent_timeframe_locked",
          "own_transient",
          "inherit_entitlement_inventory"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "invalid",
          "own",
          "rent",
          "rent_timeframe_locked",
          "own_transient",
          "inherit_entitlement_inventory"
        ]
      },
      "InventorySession": {
        "title": "InventorySession",
        "required": [
          "session_id",
          "applied_durable_loot"
        ],
        "type": "object",
        "properties": {
          "session_id": {
            "title": "Session Id",
            "type": "string"
          },
          "session_platform": {
            "$ref": "#/components/schemas/Platform"
          },
          "applied_durable_loot": {
            "title": "Applied Durable Loot",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "InventorySessionCreateRequest": {
        "title": "InventorySessionCreateRequest",
        "type": "object",
        "properties": {
          "session_platform": {
            "$ref": "#/components/schemas/Platform"
          }
        }
      },
      "InventorySessionCreateResponse": {
        "title": "InventorySessionCreateResponse",
        "required": [
          "session_id"
        ],
        "type": "object",
        "properties": {
          "session_id": {
            "title": "Session Id",
            "type": "string"
          },
          "session_platform": {
            "$ref": "#/components/schemas/Platform"
          },
          "order_id": {
            "title": "Order Id",
            "type": "string"
          }
        }
      },
      "InventoryType": {
        "title": "InventoryType",
        "enum": [
          "persistent",
          "transient",
          "always_owned"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "PERSISTENT",
          "TRANSIENT",
          "ALWAYS_OWNED"
        ]
      },
      "Item": {
        "title": "Item",
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemType"
              }
            ],
            "default": "unit"
          },
          "legacy_type": {
            "title": "Legacy Type",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "legacy_subtype": {
            "title": "Legacy Subtype",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "ref_item_id": {
            "title": "Ref Item Id",
            "type": "integer",
            "default": 0
          },
          "availability_flags": {
            "title": "Availability Flags",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "entitled_loot_id": {
            "title": "Entitled Loot Id",
            "type": "integer",
            "default": 0
          },
          "level_xp_table_id": {
            "title": "Level Xp Table Id",
            "type": "integer",
            "default": 0
          },
          "level_vendor_id": {
            "title": "Level Vendor Id",
            "type": "integer",
            "default": 0
          },
          "coupon_discount_currency_item_id": {
            "title": "Coupon Discount Currency Item Id",
            "type": "integer",
            "default": 0
          },
          "coupon_discount_percentage": {
            "title": "Coupon Discount Percentage",
            "type": "number",
            "default": 0
          },
          "coupon_consume_on_use": {
            "title": "Coupon Consume On Use",
            "type": "boolean",
            "default": false
          },
          "item_portal_use_ruleset_id": {
            "title": "Item Portal Use Ruleset Id",
            "type": "integer",
            "default": 0
          },
          "inventory_bucket_use_rule_set_id": {
            "title": "Inventory Bucket Use Rule Set Id",
            "type": "string"
          },
          "coupon_discount_loot": {
            "title": "Coupon Discount Loot",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "List of Loot IDs this item can discount",
            "default": []
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "ItemInventory": {
        "title": "ItemInventory",
        "type": "object",
        "properties": {
          "records": {
            "title": "Records",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/InventoryRecord"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "ItemType": {
        "title": "ItemType",
        "enum": [
          "unit",
          "recipe",
          "recipe_with_price_reduction",
          "entitlement",
          "dynamic_bundle"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "unit",
          "recipe",
          "recipe_with_price_reduction",
          "entitlement",
          "dynamic_bundle"
        ]
      },
      "Items": {
        "title": "Items",
        "type": "object",
        "properties": {
          "items": {
            "title": "Items",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Item"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "KeyClaim": {
        "title": "KeyClaim",
        "required": [
          "key_claim_uuid"
        ],
        "type": "object",
        "properties": {
          "portal_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Portal"
              }
            ],
            "description": "Platform the player is on"
          },
          "portal_user_id": {
            "title": "Portal User Id",
            "type": "string",
            "description": "The Platform's unique identifier for the player"
          },
          "key_claim_uuid": {
            "title": "Key Claim Uuid",
            "type": "string",
            "description": "The unique identifier for the KeyClaim",
            "format": "uuid"
          },
          "claimed": {
            "title": "Claimed",
            "type": "boolean",
            "description": "Whether the KeyClaim has been claimed",
            "default": false
          },
          "external_key": {
            "title": "External Key",
            "type": "string",
            "description": "The external key that was been claimed by the player. This is only filled out once the KeyClaim has been claimed"
          },
          "external_key_campaign_uuid": {
            "title": "External Key Campaign Uuid",
            "type": "string",
            "description": "The unique identifier for the MarketingCampaign that the external key was claimed from",
            "format": "uuid"
          },
          "external_key_type": {
            "title": "External Key Type",
            "type": "string",
            "description": "This can be used to allow the player to claim different types based on their preferrence.hile we don't have requirement for what should contain, it must match a key type assigned to the external campaign."
          },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "description": "The time the KeyClaim was created"
          },
          "last_modified_on": {
            "title": "Last Modified On",
            "type": "string",
            "description": "The time the KeyClaim was last modified"
          }
        },
        "description": "A KeyClaim is a reward a player for fulfilling requirements of an eternal marketing campaign. Once the player has completed the requirements of the campaign and have been assigned a sku of the campaign by the Platform, invoke Process Key Entitlements to consume the sku from the Platform for a Key Claim."
      },
      "KeyClaims": {
        "title": "KeyClaims",
        "required": [
          "claims"
        ],
        "type": "object",
        "properties": {
          "claims": {
            "title": "Claims",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyClaim"
            }
          }
        },
        "description": "List of Key Claims available to the player."
      },
      "KeyType": {
        "title": "KeyType",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string"
          }
        }
      },
      "Loot": {
        "title": "Loot",
        "required": [
          "loot_id",
          "vendor_id"
        ],
        "type": "object",
        "properties": {
          "loot_id": {
            "title": "Loot Id",
            "type": "integer"
          },
          "vendor_id": {
            "title": "Vendor Id",
            "type": "integer"
          },
          "item_id": {
            "title": "Item Id",
            "type": "integer"
          },
          "item": {
            "$ref": "#/components/schemas/Item"
          },
          "sub_vendor_id": {
            "title": "Sub Vendor Id",
            "type": "integer"
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "default": 0
          },
          "inventory_selector_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventorySelector"
              }
            ],
            "default": "invalid"
          },
          "inventory_operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryOperation"
              }
            ],
            "default": "invalid"
          },
          "active": {
            "title": "Active",
            "type": "boolean",
            "default": false
          },
          "sort_order": {
            "title": "Sort Order",
            "type": "integer",
            "default": 0
          },
          "drop_weight": {
            "title": "Drop Weight",
            "type": "integer",
            "default": 0
          },
          "fill_in_new_order": {
            "title": "Fill In New Order",
            "type": "boolean",
            "description": "When dropped in a randomly sampled vendor, will this create a new order or fill inline?",
            "default": false
          },
          "allow_partial_bundles": {
            "title": "Allow Partial Bundles",
            "type": "boolean",
            "description": "When dropped in a randomly sampled vendor, will the sub vendor allow dropping part of the the bundle?  False means it will only drop if the entire sub vendor can be given to the player",
            "default": true
          },
          "required_item_id": {
            "title": "Required Item Id",
            "type": "integer",
            "description": "Item required to be owned/rented to drop this Loot in a randomly sampled vendor"
          },
          "required_item_count": {
            "title": "Required Item Count",
            "type": "integer",
            "description": "Amount of the required_item_id to be owned/rented to drop this Loot in a randomly sampled vendor",
            "default": 0
          },
          "stack_limit": {
            "title": "Stack Limit",
            "type": "integer",
            "description": "Amount of owned/rented of this Loot's item that will prevent this loot from droppping in a randomly sampled vendor",
            "default": 0
          },
          "ui_hint": {
            "title": "Ui Hint",
            "type": "integer",
            "default": 0
          },
          "effective_from": {
            "title": "Effective From",
            "type": "string",
            "format": "date-time"
          },
          "quantity_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QuantityType"
              }
            ],
            "default": "relative"
          },
          "quantity_mult_inventory_item_id": {
            "title": "Quantity Mult Inventory Item Id",
            "type": "integer"
          },
          "is_claimable_by_client": {
            "title": "Is Claimable By Client",
            "type": "boolean",
            "default": false
          },
          "time_frame_id": {
            "title": "Time Frame Id",
            "type": "integer"
          },
          "use_inventory_bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "description": "Inventory Bucket to use for this Loot."
          },
          "xp_quantity_transform_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/XpQuantityTransform"
              }
            ],
            "default": "none"
          },
          "current_price_point_guid": {
            "title": "Current Price Point Guid",
            "minLength": 1,
            "type": "string"
          },
          "pre_sale_price_point_guid": {
            "title": "Pre Sale Price Point Guid",
            "minLength": 1,
            "type": "string"
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          },
          "hard_quantity_maximum": {
            "title": "Hard Quantity Maximum",
            "type": "integer",
            "description": "Hard cap on quantity of an item this Loot can give. Disabled with 0",
            "default": 0
          }
        }
      },
      "Loots": {
        "title": "Loots",
        "type": "object",
        "properties": {
          "loot": {
            "title": "Loot",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Loot"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "MarketingCampaign": {
        "title": "MarketingCampaign",
        "required": [
          "uuid",
          "name",
          "key_types"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "title": "Uuid",
            "type": "string",
            "description": "The unique identifier for the Marketing Campaign",
            "format": "uuid"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the Marketing Campaign"
          },
          "portal_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Portal"
              }
            ],
            "description": "Platform for the Marketing Campaign"
          },
          "key_types": {
            "title": "Key Types",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyType"
            },
            "description": "The types of keys that can be claimed from this campaign"
          },
          "created_on": {
            "title": "Created On",
            "type": "string",
            "description": "The time the MarketingCampaign was created"
          },
          "last_modified_on": {
            "title": "Last Modified On",
            "type": "string",
            "description": "The time the MarketingCampaign was last modified"
          }
        },
        "description": "A Marketing Campaign is a set of external keys that can be claimed by players.The key claims are assigned to the player based on"
      },
      "MarketingCampaigns": {
        "title": "MarketingCampaigns",
        "required": [
          "campaigns"
        ],
        "type": "object",
        "properties": {
          "campaigns": {
            "title": "Campaigns",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketingCampaign"
            }
          }
        },
        "description": "List of external Marketing Campaigns."
      },
      "PageMeta": {
        "title": "PageMeta",
        "type": "object",
        "properties": {
          "starting_position": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "cursor": {
            "title": "Cursor",
            "type": "string",
            "description": "The cursor value pointing to the next page of results. If cursor is provided, starting_position is ignored"
          },
          "sort": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SortOrder"
              }
            ],
            "description": "The direction to search.",
            "default": "asc"
          },
          "limit": {
            "title": "Limit",
            "maximum": 50,
            "minimum": 1,
            "type": "integer",
            "description": "The number of Orders to return",
            "default": 10
          }
        }
      },
      "Platform": {
        "title": "Platform",
        "enum": [
          "Anon",
          "Basic",
          "XboxLive",
          "PSN",
          "NintendoNAID",
          "NintendoSwitch",
          "NintendoPPID",
          "Google",
          "GooglePlay",
          "Apple",
          "Epic",
          "Steam",
          "Amazon",
          "Twitch"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "ANON",
          "BASIC",
          "XBOX_LIVE",
          "PSN",
          "NINTENDO_NAID",
          "NINTENDO_SWITCH",
          "NINTENDO_PPID",
          "GOOGLE",
          "GOOGLE_PLAY",
          "APPLE",
          "EPIC",
          "STEAM",
          "AMAZON",
          "TWITCH"
        ]
      },
      "PlatformEntitlement": {
        "title": "PlatformEntitlement",
        "required": [
          "platform_sku",
          "platform_entitlement_id"
        ],
        "type": "object",
        "properties": {
          "platform_sku": {
            "title": "Platform Sku",
            "type": "string",
            "description": "platform identifier for this purchase type"
          },
          "platform_entitlement_id": {
            "title": "Platform Entitlement Id",
            "type": "string",
            "description": "unique identifier for this purchased item (instance owned by this user)"
          },
          "quantity": {
            "title": "Quantity",
            "minimum": 0,
            "type": "integer",
            "description": "number purchased",
            "default": 1
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntitlementStatus"
              }
            ],
            "description": "status of this entitlement",
            "default": "UNKNOWN"
          },
          "error_code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntitlementErrorCode"
              }
            ],
            "description": "Error code for this entitlement",
            "default": "none"
          },
          "order_id": {
            "title": "Order Id",
            "type": "string",
            "description": "Order ID for this entitlement"
          }
        }
      },
      "PlatformEntitlementProcessRequest": {
        "title": "PlatformEntitlementProcessRequest",
        "required": [
          "transaction_id",
          "platform_token",
          "platform_id",
          "platform_region",
          "client_type"
        ],
        "type": "object",
        "properties": {
          "transaction_id": {
            "title": "Transaction Id",
            "type": "string",
            "description": "unique id for this transaction on the platform"
          },
          "platform_token": {
            "title": "Platform Token",
            "type": "string",
            "description": "Platform token that can be used to verify the identity of the user"
          },
          "platform_id": {
            "title": "Platform Id",
            "type": "string",
            "description": "Platform this entitlement was purchased was made on"
          },
          "platform_region": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlatformRegion"
              }
            ],
            "description": "region this purchase was made in"
          },
          "client_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientType"
              }
            ],
            "description": "client type this purchase was made on"
          },
          "entitlements": {
            "title": "Entitlements",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformEntitlement"
            },
            "description": "Platform entitlements to process",
            "default": []
          }
        }
      },
      "PlatformEntitlementProcessResult": {
        "title": "PlatformEntitlementProcessResult",
        "required": [
          "request_id",
          "client_type",
          "transaction_id",
          "platform_region",
          "platform_id",
          "platform_user_id"
        ],
        "type": "object",
        "properties": {
          "request_id": {
            "title": "Request Id",
            "type": "string",
            "description": "unique id to allow tracking the request"
          },
          "client_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientType"
              }
            ],
            "description": "client type this purchase was made on"
          },
          "transaction_id": {
            "title": "Transaction Id",
            "type": "string",
            "description": "unique id for this transaction on the platform"
          },
          "platform_region": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlatformRegion"
              }
            ],
            "description": "region this purchase was made in"
          },
          "status": {
            "title": "Status",
            "type": "string",
            "description": "status of this result",
            "default": "SUBMITTED"
          },
          "client_entitlements": {
            "title": "Client Entitlements",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformEntitlement"
            },
            "description": "Client entitlements that have been processed",
            "default": []
          },
          "server_entitlements": {
            "title": "Server Entitlements",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatformEntitlement"
            },
            "description": "Server entitlements that have been processed",
            "default": []
          },
          "platform_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Platform these transactions were processed on"
          },
          "platform_user_id": {
            "title": "Platform User Id",
            "type": "string",
            "description": "Unique identifier for the platform user that processed this entitlement"
          },
          "skipped_server_entitlements": {
            "title": "Skipped Server Entitlements",
            "type": "boolean",
            "description": "True if the server entitlements were skipped",
            "default": false
          }
        }
      },
      "PlatformRegion": {
        "title": "PlatformRegion",
        "enum": [
          "Unknown",
          "NA",
          "EU"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "Unknown region",
          "North America region",
          "Europe Union region"
        ],
        "x-enum-varnames": [
          "UNKNOWN",
          "NA",
          "EU"
        ]
      },
      "PlayerInventoryChange": {
        "title": "PlayerInventoryChange",
        "type": "object",
        "properties": {
          "before_item_id": {
            "title": "Before Item Id",
            "type": "integer"
          },
          "after_item_id": {
            "title": "After Item Id",
            "type": "integer"
          },
          "before": {
            "$ref": "#/components/schemas/InventoryRecord"
          },
          "after": {
            "$ref": "#/components/schemas/InventoryRecord"
          }
        }
      },
      "PlayerOrder": {
        "title": "PlayerOrder",
        "required": [
          "order_id",
          "player_uuid",
          "created_time",
          "entries"
        ],
        "type": "object",
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Source"
              }
            ],
            "default": "CLIENT"
          },
          "client_order_ref_id": {
            "title": "Client Order Ref Id",
            "type": "string",
            "format": "uuid"
          },
          "portal_id": {
            "$ref": "#/components/schemas/Portal"
          },
          "portal_user_id": {
            "title": "Portal User Id",
            "type": "string"
          },
          "instance_id": {
            "title": "Instance Id",
            "type": "string"
          },
          "match_id": {
            "title": "Match Id",
            "type": "string"
          },
          "order_id": {
            "title": "Order Id",
            "type": "string"
          },
          "player_uuid": {
            "title": "Player Uuid",
            "type": "string",
            "format": "uuid"
          },
          "created_time": {
            "title": "Created Time",
            "type": "string",
            "format": "date-time"
          },
          "entries": {
            "title": "Entries",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerOrderEntry"
            }
          }
        }
      },
      "PlayerOrderCreate": {
        "title": "PlayerOrderCreate",
        "required": [
          "entries"
        ],
        "type": "object",
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Source"
              }
            ],
            "default": "CLIENT"
          },
          "client_order_ref_id": {
            "title": "Client Order Ref Id",
            "type": "string",
            "format": "uuid"
          },
          "portal_id": {
            "$ref": "#/components/schemas/Portal"
          },
          "portal_user_id": {
            "title": "Portal User Id",
            "type": "string"
          },
          "instance_id": {
            "title": "Instance Id",
            "type": "string"
          },
          "match_id": {
            "title": "Match Id",
            "type": "string"
          },
          "order_id": {
            "title": "Order Id",
            "type": "string"
          },
          "entries": {
            "title": "Entries",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerOrderEntryCreate"
            }
          }
        },
        "description": "Create a new Player Order. `use_inventory_bucket` will be ignored on the PlayerOrderEntryCreate if the `source` equals `CLIENT`."
      },
      "PlayerOrderDetail": {
        "title": "PlayerOrderDetail",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PlayerOrderDetailType"
          },
          "loot_id": {
            "title": "Loot Id",
            "type": "integer"
          },
          "inv_change": {
            "$ref": "#/components/schemas/PlayerInventoryChange"
          },
          "order": {
            "$ref": "#/components/schemas/PlayerOrderCreate"
          }
        }
      },
      "PlayerOrderDetailType": {
        "title": "PlayerOrderDetailType",
        "enum": [
          "unknown",
          "inventory_change",
          "dynamic_bundle_lti",
          "claim_promo_code",
          "return_promo_code",
          "new_order"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "UNKNOWN",
          "INVENTORY_CHANGE",
          "DYNAMIC_BUNDLE_LTI",
          "CLAIM_PROMO_CODE",
          "RETURN_PROMO_CODE",
          "NEW_ORDER"
        ]
      },
      "PlayerOrderEntry": {
        "title": "PlayerOrderEntry",
        "required": [
          "type",
          "quantity",
          "entry_id"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PlayerOrderEntryType"
          },
          "loot_id": {
            "title": "Loot Id",
            "type": "integer",
            "description": "Unique Identifier for the Loot"
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Quantity of Inventory"
          },
          "vendor_version": {
            "title": "Vendor Version",
            "type": "integer",
            "description": "Legacy version for the vendor owning the loot_id.  Use `vendor_etag` instead.",
            "format": "int64",
            "deprecated": true
          },
          "vendor_etag": {
            "title": "Vendor Etag",
            "type": "string",
            "description": "etag for the vendor owning the loot_id.  Will fail the fulfillment if they do not match"
          },
          "dynamic_bundle_loot_ids": {
            "title": "Dynamic Bundle Loot Ids",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "purchase_price": {
            "$ref": "#/components/schemas/PurchasePrice"
          },
          "external_tran_id": {
            "title": "External Tran Id",
            "type": "string",
            "description": "External Transaction Id for source of the acquisition or a promotion code to claim. Required for [PROMOTION_CODE] types"
          },
          "external_item_sku": {
            "title": "External Item Sku",
            "type": "string"
          },
          "use_inventory_bucket": {
            "$ref": "#/components/schemas/InventoryBucket"
          },
          "player_portal_event_id": {
            "title": "Player Portal Event Id",
            "type": "integer",
            "format": "int64"
          },
          "inventory_id": {
            "title": "Inventory Id",
            "type": "string",
            "description": "Unique Identifier for the Inventory",
            "format": "uuid"
          },
          "legacy_inventory_id": {
            "title": "Legacy Inventory Id",
            "type": "integer",
            "description": "Legacy Inventory Id. This is only used when type equals [UPDATE_EXISTING_PERSISTENT_INVENTORY, UPDATE_EXISTING_TRANSIENT_INVENTORY]",
            "format": "int64"
          },
          "item_id": {
            "title": "Item Id",
            "type": "integer",
            "description": "Item Id used create or update Inventory directly. This is only used when type equals [CREATE_NEW_PERSISTENT_INVENTORY, CREATE_NEW_TRANSIENT_INVENTORY]"
          },
          "expires": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom Data Attributes for the Inventory. This is only used when type equals [CREATE_NEW_PERSISTENT_INVENTORY, UPDATE_EXISTING_PERSISTENT_INVENTORY, CREATE_NEW_TRANSIENT_INVENTORY, UPDATE_EXISTING_TRANSIENT_INVENTORY, UPDATE_INVENTORY]"
          },
          "entry_id": {
            "title": "Entry Id",
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/PlayerOrderEntryResult"
          },
          "details": {
            "title": "Details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerOrderDetail"
            },
            "default": []
          }
        }
      },
      "PlayerOrderEntryCreate": {
        "title": "PlayerOrderEntryCreate",
        "required": [
          "type",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PlayerOrderEntryType"
          },
          "loot_id": {
            "title": "Loot Id",
            "type": "integer",
            "description": "Unique Identifier for the Loot"
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer",
            "description": "Quantity of Inventory"
          },
          "vendor_version": {
            "title": "Vendor Version",
            "type": "integer",
            "description": "Legacy version for the vendor owning the loot_id.  Use `vendor_etag` instead.",
            "format": "int64",
            "deprecated": true
          },
          "vendor_etag": {
            "title": "Vendor Etag",
            "type": "string",
            "description": "etag for the vendor owning the loot_id.  Will fail the fulfillment if they do not match"
          },
          "dynamic_bundle_loot_ids": {
            "title": "Dynamic Bundle Loot Ids",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "purchase_price": {
            "$ref": "#/components/schemas/PurchasePrice"
          },
          "external_tran_id": {
            "title": "External Tran Id",
            "type": "string",
            "description": "External Transaction Id for source of the acquisition or a promotion code to claim. Required for [PROMOTION_CODE] types"
          },
          "external_item_sku": {
            "title": "External Item Sku",
            "type": "string"
          },
          "use_inventory_bucket": {
            "$ref": "#/components/schemas/InventoryBucket"
          },
          "player_portal_event_id": {
            "title": "Player Portal Event Id",
            "type": "integer",
            "format": "int64"
          },
          "inventory_id": {
            "title": "Inventory Id",
            "type": "string",
            "description": "Unique Identifier for the Inventory",
            "format": "uuid"
          },
          "legacy_inventory_id": {
            "title": "Legacy Inventory Id",
            "type": "integer",
            "description": "Legacy Inventory Id. This is only used when type equals [UPDATE_EXISTING_PERSISTENT_INVENTORY, UPDATE_EXISTING_TRANSIENT_INVENTORY]",
            "format": "int64"
          },
          "item_id": {
            "title": "Item Id",
            "type": "integer",
            "description": "Item Id used create or update Inventory directly. This is only used when type equals [CREATE_NEW_PERSISTENT_INVENTORY, CREATE_NEW_TRANSIENT_INVENTORY]"
          },
          "expires": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom Data Attributes for the Inventory. This is only used when type equals [CREATE_NEW_PERSISTENT_INVENTORY, UPDATE_EXISTING_PERSISTENT_INVENTORY, CREATE_NEW_TRANSIENT_INVENTORY, UPDATE_EXISTING_TRANSIENT_INVENTORY, UPDATE_INVENTORY]"
          },
          "entry_id": {
            "title": "Entry Id",
            "type": "string"
          }
        }
      },
      "PlayerOrderEntryResult": {
        "title": "PlayerOrderEntryResult",
        "enum": [
          "success",
          "internal_error",
          "invalid_entry_type",
          "not_allowed_on_current_portal",
          "loot_not_found",
          "loot_not_active",
          "price_item_not_found",
          "price_not_allowed",
          "dynamic_bundle_invalid",
          "too_many_requests",
          "price_does_not_match",
          "vendor_version_does_not_match",
          "dynamic_bundle_ltis_do_not_match",
          "cannot_afford_price",
          "cannot_afford_coupon",
          "failed_to_spend_price",
          "failed_to_spend_coupon",
          "loot_not_for_sale_with_price_item",
          "coupons_disabled",
          "coupon_item_not_found",
          "coupon_item_not_active",
          "coupon_item_not_applicable_for_quantity",
          "coupon_item_not_applicable_for_price_item",
          "coupon_item_not_applicable_for_loot",
          "quantity_not_allowed",
          "promotion_expired",
          "promotion_not_found",
          "promotion_no_uses_left",
          "promotion_not_available",
          "promotion_claimed_already",
          "dynamic_bundles_not_available",
          "transient_single_loot_already_applied",
          "loot_not_fillable_from_client",
          "permission_denied",
          "failed_to_find_any_sub_loot",
          "failed_to_fill_any_sub_loot",
          "cannot_meet_loot_blocker",
          "cannot_meet_loot_required",
          "failed_to_consume_loot_required",
          "failed_to_submit_new_order",
          "failed_to_modify_inventory",
          "inventory_not_found",
          "item_not_found",
          "item_not_active",
          "too_many_inv_custom_attributes",
          "always_owned_inventory_cannot_be_modified",
          "available_until_is_in_past"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "SUCCESS",
          "INTERNAL_ERROR",
          "INVALID_ENTRY_TYPE",
          "NOT_ALLOWED_ON_CURRENT_PORTAL",
          "LOOT_NOT_FOUND",
          "LOOT_NOT_ACTIVE",
          "PRICE_ITEM_NOT_FOUND",
          "PRICE_NOT_ALLOWED",
          "DYNAMIC_BUNDLE_INVALID",
          "TOO_MANY_REQUESTS",
          "PRICE_DOES_NOT_MATCH",
          "VENDOR_VERSION_DOES_NOT_MATCH",
          "DYNAMIC_BUNDLE_LTIS_DO_NOT_MATCH",
          "CANNOT_AFFORD_PRICE",
          "CANNOT_AFFORD_COUPON",
          "FAILED_TO_SPEND_PRICE",
          "FAILED_TO_SPEND_COUPON",
          "LOOT_NOT_FOR_SALE_WITH_PRICE_ITEM",
          "COUPONS_DISABLED",
          "COUPON_ITEM_NOT_FOUND",
          "COUPON_ITEM_NOT_ACTIVE",
          "COUPON_ITEM_NOT_APPLICABLE_FOR_QUANTITY",
          "COUPON_ITEM_NOT_APPLICABLE_FOR_PRICE_ITEM",
          "COUPON_ITEM_NOT_APPLICABLE_FOR_LOOT",
          "QUANTITY_NOT_ALLOWED",
          "PROMOTION_EXPIRED",
          "PROMOTION_NOT_FOUND",
          "PROMOTION_NO_USES_LEFT",
          "PROMOTION_NOT_AVAILABLE",
          "PROMOTION_CLAIMED_ALREADY",
          "DYNAMIC_BUNDLES_NOT_AVAILABLE",
          "TRANSIENT_SINGLE_LOOT_ALREADY_APPLIED",
          "LOOT_NOT_FILLABLE_FROM_CLIENT",
          "PERMISSION_DENIED",
          "FAILED_TO_FIND_ANY_SUB_LOOT",
          "FAILED_TO_FILL_ANY_SUB_LOOT",
          "CANNOT_MEET_LOOT_BLOCKER",
          "CANNOT_MEET_LOOT_REQUIRED",
          "FAILED_TO_CONSUME_LOOT_REQUIRED",
          "FAILED_TO_SUBMIT_NEW_ORDER",
          "FAILED_TO_MODIFY_INVENTORY",
          "INVENTORY_NOT_FOUND",
          "ITEM_NOT_FOUND",
          "ITEM_NOT_ACTIVE",
          "TOO_MANY_INV_CUSTOM_ATTRIBUTES",
          "ALWAYS_OWNED_INVENTORY_CANNOT_BE_MODIFIED",
          "AVAILABLE_UNTIL_IS_IN_PAST"
        ]
      },
      "PlayerOrderEntryType": {
        "title": "PlayerOrderEntryType",
        "enum": [
          "fill_loot",
          "purchase_loot",
          "purchase_dynamic_bundle",
          "promotion_code",
          "fill_loot_single_transient",
          "fill_entitled_loot",
          "create_new_persistent_inventory",
          "update_existing_persistent_inventory",
          "create_new_transient_inventory",
          "update_existing_transient_inventory",
          "update_inventory"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "Fill a loot item.",
          "Purchase a loot item.",
          "Purchase a dynamic bundle.",
          "Claim a promotion code.",
          "Fill a transient loot item.",
          "Fill an loot entitlement.",
          "Create persistent Inventory.",
          "Deprecated. Use update_inventory instead.",
          "Create transient Inventory.",
          "Deprecated. Use update_inventory instead.",
          "Update existing Inventory."
        ],
        "x-enum-varnames": [
          "FILL_LOOT",
          "PURCHASE_LOOT",
          "PURCHASE_DYNAMIC_BUNDLE",
          "PROMOTION_CODE",
          "FILL_LOOT_SINGLE_TRANSIENT",
          "FILL_ENTITLED_LOOT",
          "CREATE_NEW_PERSISTENT_INVENTORY",
          "UPDATE_EXISTING_PERSISTENT_INVENTORY",
          "CREATE_NEW_TRANSIENT_INVENTORY",
          "UPDATE_EXISTING_TRANSIENT_INVENTORY",
          "UPDATE_INVENTORY"
        ]
      },
      "PlayerOrdersResponse": {
        "title": "PlayerOrdersResponse",
        "required": [
          "page"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerOrder"
            },
            "default": []
          },
          "page": {
            "$ref": "#/components/schemas/PageMeta"
          }
        }
      },
      "Portal": {
        "title": "Portal",
        "enum": [
          -2,
          -1,
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33
        ],
        "type": "integer",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "FREE",
          "SWEAT",
          "UNKNOWN",
          "STANDARD",
          "ANON",
          "KONGREGATE",
          "AMAZON",
          "STEAM",
          "TCLS",
          "LEVELUP_LATAM",
          "LEVELUP_BRA",
          "PSN",
          "XBOX_LIVE",
          "BASIC",
          "FACEBOOK",
          "GOOGLE",
          "UNUSED_14",
          "RIVALS_MOBILE",
          "TWITCH",
          "PALADINS_STRIKE",
          "SMITE_BLITZ",
          "FACEBOOK_SMITE",
          "FACEBOOK_PALADINS",
          "FACEBOOK_HOTG",
          "NINTENDO_SWITCH",
          "TUNE",
          "APPLE",
          "DISCORD",
          "NINTENDO",
          "UNUSED_27",
          "EPIC",
          "FORTE",
          "SIMULMEDIA",
          "LUNA",
          "GOOGLE_PLAY",
          "NINTENDO_PPID"
        ]
      },
      "PortalUseRuleset": {
        "title": "PortalUseRuleset",
        "type": "object",
        "properties": {
          "rules": {
            "title": "Rules",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Portal"
              }
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "PortalUseRulesets": {
        "title": "PortalUseRulesets",
        "type": "object",
        "properties": {
          "rulesets": {
            "title": "Rulesets",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PortalUseRuleset"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "PriceBreakpoint": {
        "title": "PriceBreakpoint",
        "required": [
          "price_item_id",
          "quantity",
          "price"
        ],
        "type": "object",
        "properties": {
          "price_item_id": {
            "title": "Price Item Id",
            "type": "integer"
          },
          "quantity": {
            "title": "Quantity",
            "type": "integer"
          },
          "price": {
            "title": "Price",
            "type": "integer"
          }
        }
      },
      "PricePoint": {
        "title": "PricePoint",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "strict_flag": {
            "title": "Strict Flag",
            "type": "boolean",
            "default": false
          },
          "cap_flag": {
            "title": "Cap Flag",
            "type": "boolean",
            "default": false
          },
          "current_breakpoints": {
            "title": "Current Breakpoints",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceBreakpoint"
            },
            "default": []
          },
          "pre_sale_breakpoints": {
            "title": "Pre Sale Breakpoints",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceBreakpoint"
            },
            "default": []
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "PricePoints": {
        "title": "PricePoints",
        "type": "object",
        "properties": {
          "price_points": {
            "title": "Price Points",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PricePoint"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "PurchasePrice": {
        "title": "PurchasePrice",
        "required": [
          "price_item_id",
          "price"
        ],
        "type": "object",
        "properties": {
          "price_item_id": {
            "title": "Price Item Id",
            "type": "integer"
          },
          "price": {
            "title": "Price",
            "type": "integer"
          },
          "price_coupon_item_id": {
            "title": "Price Coupon Item Id",
            "type": "integer"
          }
        }
      },
      "QuantityType": {
        "title": "QuantityType",
        "enum": [
          "relative",
          "absolute"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "relative",
          "absolute"
        ]
      },
      "SortOrder": {
        "title": "SortOrder",
        "enum": [
          "asc",
          "desc"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "ASCENDING",
          "DESCENDING"
        ]
      },
      "Source": {
        "title": "Source",
        "enum": [
          "UNKNOWN",
          "WEB_ORDER_REPAIR",
          "IN_GAME",
          "WEB_SITE",
          "NO_SALE",
          "SUPPORT",
          "ACTIVITY",
          "REFUND",
          "SYSTEM",
          "REWARDS",
          "ESPORTS",
          "TREASURE",
          "CONSOLE",
          "ODYSSEY",
          "STEAM",
          "RETURN",
          "JSON_GATE",
          "SEND_GIFT",
          "RECEIVE_GIFT",
          "STEAM_DLC",
          "TWITCH_MILESTONE",
          "TWITCH_PRIME",
          "PSN",
          "XBOX",
          "PTS_GRANT",
          "INSTANCE",
          "ACCOUNT_TRANSFER",
          "PROMOCODE",
          "TRIUMPH_SYSTEM",
          "LOGIN_GRANT",
          "EOM_UNCAPPED",
          "EOM_CAPPED",
          "FACEBOOK_DROP",
          "DATABASE_SCRIPT",
          "ACCOUNT_LINKING",
          "CLAN",
          "CONVERSION",
          "APPLE",
          "GOOGLE",
          "GOOGLE_PLAY",
          "PORTAL_DURABLE",
          "PARTNER_ACHIEVEMENT",
          "MIXER_DROP",
          "NINTENDO",
          "STREAM_VIEWING_PROGRESS",
          "DISCORD",
          "FIRST_LOGIN_GRANT",
          "TWITCH_FUEL",
          "DISCORD_DLC",
          "NETEASE",
          "EPIC_GAMES",
          "FORTE",
          "FACEBOOK",
          "HIREZ",
          "DAILY_REWARD",
          "ADD_ACCOUNT_EMAIL_REWARD",
          "CLIENT_CLAIM",
          "CLIENT",
          "ENTITLEMENTS",
          "AMAZON",
          "SIMULMEDIA",
          "LUNA"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "UNKNOWN",
          "WEB_ORDER_REPAIR",
          "IN_GAME",
          "WEB_SITE",
          "NO_SALE",
          "SUPPORT",
          "ACTIVITY",
          "REFUND",
          "SYSTEM",
          "REWARDS",
          "ESPORTS",
          "TREASURE",
          "CONSOLE",
          "ODYSSEY",
          "STEAM",
          "RETURN",
          "JSON_GATE",
          "SEND_GIFT",
          "RECEIVE_GIFT",
          "STEAM_DLC",
          "TWITCH_MILESTONE",
          "TWITCH_PRIME",
          "PSN",
          "XBOX",
          "PTS_GRANT",
          "INSTANCE",
          "ACCOUNT_TRANSFER",
          "PROMOCODE",
          "TRIUMPH_SYSTEM",
          "LOGIN_GRANT",
          "EOM_UNCAPPED",
          "EOM_CAPPED",
          "FACEBOOK_DROP",
          "DATABASE_SCRIPT",
          "ACCOUNT_LINKING",
          "CLAN",
          "CONVERSION",
          "APPLE",
          "GOOGLE",
          "GOOGLE_PLAY",
          "PORTAL_DURABLE",
          "PARTNER_ACHIEVEMENT",
          "MIXER_DROP",
          "NINTENDO",
          "STREAM_VIEWING_PROGRESS",
          "DISCORD",
          "FIRST_LOGIN_GRANT",
          "TWITCH_FUEL",
          "DISCORD_DLC",
          "NETEASE",
          "EPIC_GAMES",
          "FORTE",
          "FACEBOOK",
          "HIREZ",
          "DAILY_REWARD",
          "ADD_ACCOUNT_EMAIL_REWARD",
          "CLIENT_CLAIM",
          "CLIENT",
          "ENTITLEMENTS",
          "AMAZON",
          "SIMULMEDIA",
          "LUNA"
        ]
      },
      "TimeFrame": {
        "title": "TimeFrame",
        "required": [
          "start",
          "end"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "active": {
            "title": "Active",
            "type": "boolean",
            "default": false
          },
          "episode": {
            "title": "Episode",
            "type": "integer",
            "default": 0
          },
          "episode_type": {
            "title": "Episode Type",
            "type": "integer",
            "default": 0
          },
          "hour_interval": {
            "title": "Hour Interval",
            "type": "integer",
            "description": "Number of hours that this time frame lasts until restarting.0 interval means no repeating.",
            "default": 0
          },
          "start": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "end": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "TimeFrames": {
        "title": "TimeFrames",
        "type": "object",
        "properties": {
          "time_frames": {
            "title": "Time Frames",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/TimeFrame"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "UpdateInventoryRequest": {
        "title": "UpdateInventoryRequest",
        "type": "object",
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Source"
              }
            ],
            "default": "CLIENT"
          },
          "client_order_ref_id": {
            "title": "Client Order Ref Id",
            "type": "string",
            "format": "uuid"
          },
          "bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "default": "none"
          },
          "count": {
            "title": "Count",
            "type": "integer",
            "default": 1
          },
          "expires": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "item_id": {
            "title": "Item Id",
            "type": "integer"
          }
        }
      },
      "UpdateInventoryRequestById": {
        "title": "UpdateInventoryRequestById",
        "required": [
          "inventory_id"
        ],
        "type": "object",
        "properties": {
          "bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "default": "none"
          },
          "count": {
            "title": "Count",
            "type": "integer",
            "default": 1
          },
          "expires": {
            "title": "Time Zone Aware Datetime",
            "type": "string",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "format": "date-time"
          },
          "custom_data": {
            "title": "Custom Data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "item_id": {
            "title": "Item Id",
            "type": "integer"
          },
          "inventory_id": {
            "title": "Inventory Id",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "UpdateInventoryRequests": {
        "title": "UpdateInventoryRequests",
        "required": [
          "inventory"
        ],
        "type": "object",
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Source"
              }
            ],
            "default": "CLIENT"
          },
          "client_order_ref_id": {
            "title": "Client Order Ref Id",
            "type": "string",
            "format": "uuid"
          },
          "inventory": {
            "title": "Inventory",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateInventoryRequestById"
            }
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "Vendor": {
        "title": "Vendor",
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VendorType"
              }
            ],
            "default": "recipe"
          },
          "legacy_type": {
            "title": "Legacy Type",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "legacy_config_version": {
            "title": "Legacy Config Version",
            "type": "integer",
            "default": 0,
            "deprecated": true
          },
          "loot": {
            "title": "Loot",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Loot"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "VendorType": {
        "title": "VendorType",
        "enum": [
          "recipe",
          "randomly_sampled"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "recipe",
          "randomly_sampled"
        ]
      },
      "Vendors": {
        "title": "Vendors",
        "type": "object",
        "properties": {
          "vendors": {
            "title": "Vendors",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Vendor"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "XpQuantityTransform": {
        "title": "XpQuantityTransform",
        "enum": [
          "none",
          "from_current_xp_to_target_additional_level_min_xp",
          "from_current_level_min_xp_to_target_additional_level_min_xp",
          "from_zero_to_target_exact_level_min_xp"
        ],
        "type": "string",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "none",
          "from_current_xp_to_target_additional_level_min_xp",
          "from_current_level_min_xp_to_target_additional_level_min_xp",
          "from_zero_to_target_exact_level_min_xp"
        ]
      },
      "XpTable": {
        "title": "XpTable",
        "type": "object",
        "properties": {
          "xp_entries": {
            "title": "Xp Entries",
            "type": "object",
            "additionalProperties": {
              "minimum": 0,
              "type": "integer"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      },
      "XpTables": {
        "title": "XpTables",
        "type": "object",
        "properties": {
          "xp_tables": {
            "title": "Xp Tables",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/XpTable"
            },
            "default": {}
          },
          "cache_info": {
            "$ref": "#/components/schemas/CacheInfo"
          }
        }
      }
    },
    "securitySchemes": {
      "HTTPBearerHeadersOrCookie": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "Inventory",
      "description": "Operations on inventory data"
    },
    {
      "name": "Catalog",
      "description": "Operations on catalog data"
    },
    {
      "name": "Entitlements",
      "description": "Operations on entitlements. Key Entitlements are used to grant Players Key Claims for an external Marketing Campaign."
    },
    {
      "name": "Key Claims",
      "description": "Operations to Fetch and Claim Key Claims. Key Claims are used to give Players keys as a reward to fulfilling the requirements of an external Marketing Campaign. Examples: Beta Keys, Extra Game keys for Friends, etc."
    },
    {
      "name": "Marketing",
      "description": "Operations on Market Campaigns. There is currently no way to add Market Campaigns via API. Reach out to your Rally Here representative to add a new campaign."
    }
  ]
}
