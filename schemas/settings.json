{
  "openapi": "3.1.0",
  "info": {
    "title": "settings-api",
    "description": "API for managing user settings documents",
    "version": "6.5.0"
  },
  "servers": [
    {
      "url": "/settings"
    }
  ],
  "paths": {
    "/v1/setting_type": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Config For All Setting Types",
        "description": "Get all setting types and their configuration.\n    \nRequired Permissions:\n\n- For any player (including themselves) any of: `setting-config:read`, `setting:*:*`",
        "operationId": "get_config_for_all_setting_types",
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "if-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information",
              "title": "If-Match"
            },
            "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information"
          },
          {
            "name": "if-none-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information",
              "title": "If-None-Match"
            },
            "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information"
          },
          {
            "name": "if-modified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information",
              "title": "If-Modified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information"
          },
          {
            "name": "if-unmodified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information",
              "title": "If-Unmodified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/SettingType"
                  },
                  "title": "Response Get Config For All Setting Types"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource does not meet the provided preconditions."
          },
          "304": {
            "description": "The resource has not been modified from the provided preconditions.",
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/setting_type/{setting_type_id}/v": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Config For Single Setting Type All Versions",
        "description": "Get a configuration and all versions for a given setting type ID.\n    \nRequired Permissions:\n\n- For any player (including themselves) any of: `setting-config:read`, `setting:*:*`",
        "operationId": "get_config_for_single_setting_type_all_versions",
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "setting_type_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Setting Type Id"
            }
          },
          {
            "name": "if-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information",
              "title": "If-Match"
            },
            "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information"
          },
          {
            "name": "if-none-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information",
              "title": "If-None-Match"
            },
            "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information"
          },
          {
            "name": "if-modified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information",
              "title": "If-Modified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information"
          },
          {
            "name": "if-unmodified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information",
              "title": "If-Unmodified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/SettingTypeVersion"
                  },
                  "title": "Response Get Config For Single Setting Type All Versions"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource does not meet the provided preconditions."
          },
          "304": {
            "description": "The resource has not been modified from the provided preconditions.",
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/setting_type/{setting_type_id}/v/{setting_version_id}": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Config For Single Setting Type And Version",
        "description": "Get a specific version of a specific setting type.\n    \nRequired Permissions:\n\n- For any player (including themselves) any of: `setting-config:read`, `setting:*:*`",
        "operationId": "get_config_for_single_setting_type_and_version",
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "setting_type_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Setting Type Id"
            }
          },
          {
            "name": "setting_version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Setting Version Id"
            }
          },
          {
            "name": "if-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information",
              "title": "If-Match"
            },
            "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information"
          },
          {
            "name": "if-none-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information",
              "title": "If-None-Match"
            },
            "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information"
          },
          {
            "name": "if-modified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information",
              "title": "If-Modified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information"
          },
          {
            "name": "if-unmodified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information",
              "title": "If-Unmodified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingTypeVersion"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource does not meet the provided preconditions."
          },
          "304": {
            "description": "The resource has not been modified from the provided preconditions.",
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `setting_version_id_not_found` - The setting Version was not found for that type\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/player/me/setting_type/{setting_type_id}/key": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get All Player Uuid Settings For Setting Type Self",
        "description": "Get a list of all player setting documents for a specific Setting Type\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `setting:*:*`, `setting:read`\n\n- For the player themselves : `setting:read:self`",
        "operationId": "get_all_player_uuid_settings_for_setting_type_self",
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "setting_type_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Type to get settings for. Must be one of the known setting types",
              "title": "Setting Type Id"
            },
            "description": "Setting Type to get settings for. Must be one of the known setting types"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1,
                "maxLength": 256
              },
              "description": "Setting Key to get settings for. If not specified, all settings for the setting type will be returned",
              "title": "Key"
            },
            "description": "Setting Key to get settings for. If not specified, all settings for the setting type will be returned"
          },
          {
            "name": "if-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information",
              "title": "If-Match"
            },
            "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information"
          },
          {
            "name": "if-none-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information",
              "title": "If-None-Match"
            },
            "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information"
          },
          {
            "name": "if-modified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information",
              "title": "If-Modified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information"
          },
          {
            "name": "if-unmodified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information",
              "title": "If-Unmodified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/SettingData"
                  },
                  "title": "Response Get All Player Uuid Settings For Setting Type Self"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource does not meet the provided preconditions."
          },
          "304": {
            "description": "The resource has not been modified from the provided preconditions.",
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete All Player Uuid Settings For Setting Type Self",
        "description": "Delete all player setting documents for a specific type\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `setting:*:*`, `setting:write`\n\n- For the player themselves : `setting:write:self`",
        "operationId": "delete_all_player_uuid_settings_for_setting_type_self",
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "setting_type_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Type to delete settings for.  Must be one of the known setting types",
              "title": "Setting Type Id"
            },
            "description": "Setting Type to delete settings for.  Must be one of the known setting types"
          },
          {
            "name": "if-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information",
              "title": "If-Match"
            },
            "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information"
          },
          {
            "name": "if-none-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information",
              "title": "If-None-Match"
            },
            "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information"
          },
          {
            "name": "if-unmodified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information",
              "title": "If-Unmodified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource does not meet the provided preconditions."
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `does_not_exist` - Setting Key(s) do not exist\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/player/{player_uuid}/setting_type/{setting_type_id}/key": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get All Player Uuid Settings For Setting Type",
        "description": "Get a list of all player setting documents for a specific Setting Type\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `setting:*:*`, `setting:read`\n\n- For the player themselves : `setting:read:self`",
        "operationId": "get_all_player_uuid_settings_for_setting_type",
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "player_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Player to get settings for",
              "title": "Player Uuid"
            },
            "description": "Player to get settings for"
          },
          {
            "name": "setting_type_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Type to get settings for. Must be one of the known setting types",
              "title": "Setting Type Id"
            },
            "description": "Setting Type to get settings for. Must be one of the known setting types"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1,
                "maxLength": 256
              },
              "description": "Setting Key to get settings for. If not specified, all settings for the setting type will be returned",
              "title": "Key"
            },
            "description": "Setting Key to get settings for. If not specified, all settings for the setting type will be returned"
          },
          {
            "name": "if-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information",
              "title": "If-Match"
            },
            "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information"
          },
          {
            "name": "if-none-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information",
              "title": "If-None-Match"
            },
            "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information"
          },
          {
            "name": "if-modified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information",
              "title": "If-Modified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information"
          },
          {
            "name": "if-unmodified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information",
              "title": "If-Unmodified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/SettingData"
                  },
                  "title": "Response Get All Player Uuid Settings For Setting Type"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource does not meet the provided preconditions."
          },
          "304": {
            "description": "The resource has not been modified from the provided preconditions.",
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete All Player Uuid Settings For Setting Type",
        "description": "Delete all player setting documents for a specific type\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `setting:*:*`, `setting:write`\n\n- For the player themselves : `setting:write:self`",
        "operationId": "delete_all_player_uuid_settings_for_setting_type",
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "player_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Player to delete setting for",
              "title": "Player Uuid"
            },
            "description": "Player to delete setting for"
          },
          {
            "name": "setting_type_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Type to delete settings for.  Must be one of the known setting types",
              "title": "Setting Type Id"
            },
            "description": "Setting Type to delete settings for.  Must be one of the known setting types"
          },
          {
            "name": "if-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information",
              "title": "If-Match"
            },
            "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information"
          },
          {
            "name": "if-none-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information",
              "title": "If-None-Match"
            },
            "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information"
          },
          {
            "name": "if-unmodified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information",
              "title": "If-Unmodified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource does not meet the provided preconditions."
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `does_not_exist` - Setting Key(s) do not exist\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/player/me/setting_type/{setting_type_id}/key/{key}": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Single Player Uuid Setting Self",
        "description": "Get a single player setting document\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `setting:*:*`, `setting:read`\n\n- For the player themselves : `setting:read:self`",
        "operationId": "get_single_player_uuid_setting_self",
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "setting_type_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Type to get settings for. Must be one of the known setting types",
              "title": "Setting Type Id"
            },
            "description": "Setting Type to get settings for. Must be one of the known setting types"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Key to get settings for",
              "title": "Key"
            },
            "description": "Setting Key to get settings for"
          },
          {
            "name": "if-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information",
              "title": "If-Match"
            },
            "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information"
          },
          {
            "name": "if-none-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information",
              "title": "If-None-Match"
            },
            "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information"
          },
          {
            "name": "if-modified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information",
              "title": "If-Modified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information"
          },
          {
            "name": "if-unmodified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information",
              "title": "If-Unmodified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingData"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource does not meet the provided preconditions."
          },
          "304": {
            "description": "The resource has not been modified from the provided preconditions.",
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `not_found` - The setting key was not found\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Set Single Player Uuid Setting Self",
        "description": "Update the value of a single player setting document.\n    \nRequired Permissions:\n\n- For any player (including themselves) any of: `setting:*:*`, `setting:write`\n\n- For the player themselves : `setting:write:self`\n\n\nIf Legacy types are enabled, to maintain compatibility with legacy applications, the following settings have special-case handling:\n* Setting Type `case` - Version `1` - key `create` - creates a new case set and returns the new key and document in the response. \n* Setting Type `case` - Version `1` - key is integer - Modify an existing case set.  If it does not exist, a 404 response with the `does_not_exist` error code. \n* Setting Type `loadout` - Version `1` - key `create` - creates a new loadout and returns the new key and document in the response.  All items keys will be given a new key \n* Setting Type `loadout` - Version `1` - key is integer - Modify an existing loadout.  If it does not exist, a 404 response with the `does_not_exist` error code.  When modifying loadout items, item keys that convert into integers/longs are treated as updates (and will error the update if they are not valid), all others are treated as creates and will be given a new key.",
        "operationId": "set_single_player_uuid_setting_self",
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "setting_type_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Type to update settings for. Must be one of the known setting types",
              "title": "Setting Type Id"
            },
            "description": "Setting Type to update settings for. Must be one of the known setting types"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Key to update setting for.  Must conform to the setting type key format",
              "title": "Key"
            },
            "description": "Setting Key to update setting for.  Must conform to the setting type key format"
          },
          {
            "name": "if-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information",
              "title": "If-Match"
            },
            "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information"
          },
          {
            "name": "if-none-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information",
              "title": "If-None-Match"
            },
            "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information"
          },
          {
            "name": "if-unmodified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information",
              "title": "If-Unmodified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetSinglePlayerSettingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/SettingData"
                  },
                  "title": "Response Set Single Player Uuid Setting Self"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource does not meet the provided preconditions."
          },
          "304": {
            "description": "The resource has not been modified from the provided preconditions.",
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete Single Player Uuid Setting Self",
        "description": "Delete a single player setting document\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `setting:*:*`, `setting:write`\n\n- For the player themselves : `setting:write:self`",
        "operationId": "delete_single_player_uuid_setting_self",
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "setting_type_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Type to delete settings for.  Must be one of the known setting types",
              "title": "Setting Type Id"
            },
            "description": "Setting Type to delete settings for.  Must be one of the known setting types"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Key to delete setting for",
              "title": "Key"
            },
            "description": "Setting Key to delete setting for"
          },
          {
            "name": "if-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information",
              "title": "If-Match"
            },
            "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information"
          },
          {
            "name": "if-none-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information",
              "title": "If-None-Match"
            },
            "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information"
          },
          {
            "name": "if-unmodified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information",
              "title": "If-Unmodified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource does not meet the provided preconditions."
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `does_not_exist` - Setting Key(s) do not exist\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/player/{player_uuid}/setting_type/{setting_type_id}/key/{key}": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Single Player Uuid Setting",
        "description": "Get a single player setting document\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `setting:*:*`, `setting:read`\n\n- For the player themselves : `setting:read:self`",
        "operationId": "get_single_player_uuid_setting",
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "player_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Player to get settings for",
              "title": "Player Uuid"
            },
            "description": "Player to get settings for"
          },
          {
            "name": "setting_type_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Type to get settings for. Must be one of the known setting types",
              "title": "Setting Type Id"
            },
            "description": "Setting Type to get settings for. Must be one of the known setting types"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Key to get settings for",
              "title": "Key"
            },
            "description": "Setting Key to get settings for"
          },
          {
            "name": "if-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information",
              "title": "If-Match"
            },
            "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information"
          },
          {
            "name": "if-none-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information",
              "title": "If-None-Match"
            },
            "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information"
          },
          {
            "name": "if-modified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information",
              "title": "If-Modified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information"
          },
          {
            "name": "if-unmodified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information",
              "title": "If-Unmodified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingData"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource does not meet the provided preconditions."
          },
          "304": {
            "description": "The resource has not been modified from the provided preconditions.",
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `not_found` - The setting key was not found\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Set Single Player Uuid Setting",
        "description": "Update the value of a single player setting document.\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `setting:*:*`, `setting:write`\n\n- For the player themselves : `setting:write:self`\n\n\nIf Legacy types are enabled, to maintain compatibility with legacy applications, the following settings have special-case handling:\n* Setting Type `case` - Version `1` - key `create` - creates a new case set and returns the new key and document in the response. \n* Setting Type `case` - Version `1` - key is integer - Modify an existing case set.  If it does not exist, a 404 response with the `does_not_exist` error code. \n* Setting Type `loadout` - Version `1` - key `create` - creates a new loadout and returns the new key and document in the response.  All items keys will be given a new key \n* Setting Type `loadout` - Version `1` - key is integer - Modify an existing loadout.  If it does not exist, a 404 response with the `does_not_exist` error code.  When modifying loadout items, item keys that convert into integers/longs are treated as updates (and will error the update if they are not valid), all others are treated as creates and will be given a new key.",
        "operationId": "set_single_player_uuid_setting",
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "player_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Player to update setting for",
              "title": "Player Uuid"
            },
            "description": "Player to update setting for"
          },
          {
            "name": "setting_type_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Type to update settings for. Must be one of the known setting types",
              "title": "Setting Type Id"
            },
            "description": "Setting Type to update settings for. Must be one of the known setting types"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Key to update setting for.  Must conform to the setting type key format",
              "title": "Key"
            },
            "description": "Setting Key to update setting for.  Must conform to the setting type key format"
          },
          {
            "name": "if-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information",
              "title": "If-Match"
            },
            "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information"
          },
          {
            "name": "if-none-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information",
              "title": "If-None-Match"
            },
            "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information"
          },
          {
            "name": "if-unmodified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information",
              "title": "If-Unmodified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetSinglePlayerSettingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/SettingData"
                  },
                  "title": "Response Set Single Player Uuid Setting"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource does not meet the provided preconditions."
          },
          "304": {
            "description": "The resource has not been modified from the provided preconditions.",
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete Single Player Uuid Setting",
        "description": "Delete a single player setting document\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `setting:*:*`, `setting:write`\n\n- For the player themselves : `setting:write:self`",
        "operationId": "delete_single_player_uuid_setting",
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "player_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Player to delete setting for",
              "title": "Player Uuid"
            },
            "description": "Player to delete setting for"
          },
          {
            "name": "setting_type_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Type to delete settings for.  Must be one of the known setting types",
              "title": "Setting Type Id"
            },
            "description": "Setting Type to delete settings for.  Must be one of the known setting types"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Key to delete setting for",
              "title": "Key"
            },
            "description": "Setting Key to delete setting for"
          },
          {
            "name": "if-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information",
              "title": "If-Match"
            },
            "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information"
          },
          {
            "name": "if-none-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information",
              "title": "If-None-Match"
            },
            "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information"
          },
          {
            "name": "if-unmodified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information",
              "title": "If-Unmodified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource does not meet the provided preconditions."
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `does_not_exist` - Setting Key(s) do not exist\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/player/{player_id}/setting_type/{setting_type_id}/key/{key}": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Single Player Id Setting",
        "description": "**DEPRECATED** - Use v2 instead.  Get a single player setting document\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `setting:*:*`, `setting:read`\n\n- For the player themselves : `setting:read:self`",
        "operationId": "get_single_player_id_setting",
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "player_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Player to get settings for",
              "title": "Player Id"
            },
            "description": "Player to get settings for"
          },
          {
            "name": "setting_type_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Type to get settings for. Must be one of the known setting types",
              "title": "Setting Type Id"
            },
            "description": "Setting Type to get settings for. Must be one of the known setting types"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Key to get settings for",
              "title": "Key"
            },
            "description": "Setting Key to get settings for"
          },
          {
            "name": "if-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information",
              "title": "If-Match"
            },
            "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information"
          },
          {
            "name": "if-none-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information",
              "title": "If-None-Match"
            },
            "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information"
          },
          {
            "name": "if-modified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information",
              "title": "If-Modified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information"
          },
          {
            "name": "if-unmodified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information",
              "title": "If-Unmodified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingData"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource does not meet the provided preconditions."
          },
          "304": {
            "description": "The resource has not been modified from the provided preconditions.",
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `not_found` - The setting key was not found\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Set Single Player Id Setting",
        "description": "**DEPRECATED** - Use the v2 endpoint instead.  This endpoint will be removed in a future release.  Update the value of a single player setting document.\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `setting:*:*`, `setting:write`\n\n- For the player themselves : `setting:write:self`\n\n\nIf Legacy types are enabled, to maintain compatibility with legacy applications, the following settings have special-case handling:\n* Setting Type `case` - Version `1` - key `create` - creates a new case set and returns the new key and document in the response. \n* Setting Type `case` - Version `1` - key is integer - Modify an existing case set.  If it does not exist, a 404 response with the `does_not_exist` error code. \n* Setting Type `loadout` - Version `1` - key `create` - creates a new loadout and returns the new key and document in the response.  All items keys will be given a new key \n* Setting Type `loadout` - Version `1` - key is integer - Modify an existing loadout.  If it does not exist, a 404 response with the `does_not_exist` error code.  When modifying loadout items, item keys that convert into integers/longs are treated as updates (and will error the update if they are not valid), all others are treated as creates and will be given a new key.",
        "operationId": "set_single_player_id_setting",
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "player_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Player to update setting for",
              "title": "Player Id"
            },
            "description": "Player to update setting for"
          },
          {
            "name": "setting_type_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Type to update settings for. Must be one of the known setting types",
              "title": "Setting Type Id"
            },
            "description": "Setting Type to update settings for. Must be one of the known setting types"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Key to update setting for.  Must conform to the setting type key format",
              "title": "Key"
            },
            "description": "Setting Key to update setting for.  Must conform to the setting type key format"
          },
          {
            "name": "if-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information",
              "title": "If-Match"
            },
            "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information"
          },
          {
            "name": "if-none-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information",
              "title": "If-None-Match"
            },
            "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information"
          },
          {
            "name": "if-unmodified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information",
              "title": "If-Unmodified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetSinglePlayerSettingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/SettingData"
                  },
                  "title": "Response Set Single Player Id Setting"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource does not meet the provided preconditions."
          },
          "304": {
            "description": "The resource has not been modified from the provided preconditions.",
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete Single Player Id Setting",
        "description": "**DEPRECATED** - Use v2 instead. Delete a single player setting document\n    \nRequired Permissions:\n\n- For any player (including themselves) any of: `setting:*:*`, `setting:write`\n\n- For the player themselves : `setting:write:self`",
        "operationId": "delete_single_player_id_setting",
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "player_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Player to delete setting for",
              "title": "Player Id"
            },
            "description": "Player to delete setting for"
          },
          {
            "name": "setting_type_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Type to delete settings for.  Must be one of the known setting types",
              "title": "Setting Type Id"
            },
            "description": "Setting Type to delete settings for.  Must be one of the known setting types"
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Key to delete setting for",
              "title": "Key"
            },
            "description": "Setting Key to delete setting for"
          },
          {
            "name": "if-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information",
              "title": "If-Match"
            },
            "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information"
          },
          {
            "name": "if-none-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information",
              "title": "If-None-Match"
            },
            "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information"
          },
          {
            "name": "if-unmodified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information",
              "title": "If-Unmodified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource does not meet the provided preconditions."
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `does_not_exist` - Setting Key(s) do not exist\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/player/{player_id}/setting_type/{setting_type_id}/key": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get All Player Id Settings For Setting Type",
        "description": "**DEPRECATED** - Use v2 instead.  Get a list of all player setting documents for a specific Setting Type.\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `setting:*:*`, `setting:read`\n\n- For the player themselves : `setting:read:self`",
        "operationId": "get_all_player_id_settings_for_setting_type",
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "player_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Player to get settings for",
              "title": "Player Id"
            },
            "description": "Player to get settings for"
          },
          {
            "name": "setting_type_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Setting Type to get settings for. Must be one of the known setting types",
              "title": "Setting Type Id"
            },
            "description": "Setting Type to get settings for. Must be one of the known setting types"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1,
                "maxLength": 256
              },
              "description": "Setting Key to get settings for. If not specified, all settings for the setting type will be returned",
              "title": "Key"
            },
            "description": "Setting Key to get settings for. If not specified, all settings for the setting type will be returned"
          },
          {
            "name": "if-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information",
              "title": "If-Match"
            },
            "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information"
          },
          {
            "name": "if-none-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information",
              "title": "If-None-Match"
            },
            "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information"
          },
          {
            "name": "if-modified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information",
              "title": "If-Modified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information"
          },
          {
            "name": "if-unmodified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information",
              "title": "If-Unmodified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/SettingData"
                  },
                  "title": "Response Get All Player Id Settings For Setting Type"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource does not meet the provided preconditions."
          },
          "304": {
            "description": "The resource has not been modified from the provided preconditions.",
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                },
                "description": "The ETag for the resource.  Used for caching and preconditions."
              },
              "Last-Modified": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                },
                "description": "The Last-Modified date for the resource.  Used for caching and preconditions."
              }
            }
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Settings"
        ],
        "summary": "Delete All Player Id Settings For Setting Type",
        "description": "**DEPRECATED** - Use v2 instead. Delete all player setting documents for a specific type\n\nRequired Permissions:\n\n- For any player (including themselves) any of: `setting:*:*`, `setting:write`\n\n- For the player themselves : `setting:write:self`",
        "operationId": "delete_all_player_id_settings_for_setting_type",
        "deprecated": true,
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "player_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Player Id"
            }
          },
          {
            "name": "setting_type_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Setting Type Id"
            }
          },
          {
            "name": "if-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information",
              "title": "If-Match"
            },
            "description": "Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information"
          },
          {
            "name": "if-none-match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information",
              "title": "If-None-Match"
            },
            "description": "Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.  \n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information"
          },
          {
            "name": "if-unmodified-since",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information",
              "title": "If-Unmodified-Since"
            },
            "description": "Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.\n\nSee https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource does not meet the provided preconditions."
          },
          "400": {
            "description": "\nError Codes:\n- `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `setting_type_id_not_found` - The setting type ID was not found\n- `does_not_exist` - Setting Key(s) do not exist\n        ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HzApiErrorModel": {
        "properties": {
          "auth_success": {
            "type": "boolean",
            "title": "Auth Success",
            "default": true
          },
          "error_code": {
            "type": "string",
            "title": "Error Code"
          },
          "desc": {
            "type": "string",
            "title": "Desc"
          }
        },
        "type": "object",
        "required": [
          "error_code",
          "desc"
        ],
        "title": "HzApiErrorModel"
      },
      "SetSinglePlayerSettingRequest": {
        "properties": {
          "v": {
            "type": "integer",
            "title": "V",
            "description": "Setting Type Version to update setting for.  Must be a valid version for the setting type"
          },
          "value": {
            "title": "Value",
            "description": "New value document for the setting.  Must conform to the jsonschema defined for the setting type+version"
          }
        },
        "type": "object",
        "required": [
          "v",
          "value"
        ],
        "title": "SetSinglePlayerSettingRequest",
        "description": "Updatable contents of a setting document for a player"
      },
      "SettingData": {
        "properties": {
          "v": {
            "type": "integer",
            "title": "V",
            "description": "Version of the Setting Type schema that was used to validate the value document."
          },
          "value": {
            "title": "Value",
            "description": "Setting Value document"
          },
          "etag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Etag",
            "description": "ETag identifying the current version+value of the document"
          },
          "last_modified": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time",
                "title": "Time Zone Aware Datetime",
                "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
                "example": "2023-01-23T21:07:02.000000+00:00"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified",
            "description": "Timestamp when this setting was last modified"
          }
        },
        "type": "object",
        "required": [
          "v",
          "value"
        ],
        "title": "SettingData",
        "description": "Setting version/value document from a specific setting type/key for a player"
      },
      "SettingType": {
        "properties": {
          "versions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/SettingTypeVersion"
            },
            "type": "object",
            "title": "Versions",
            "description": "Map of setting type version ids to the version"
          }
        },
        "type": "object",
        "required": [
          "versions"
        ],
        "title": "SettingType"
      },
      "SettingTypeVersion": {
        "properties": {
          "allow_update": {
            "type": "boolean",
            "title": "Allow Update",
            "description": "Are players allowed to set/update keys to this version of the setting type?  Does not affect getting or deleting existing settings.",
            "default": true
          },
          "key_regex": {
            "type": "string",
            "title": "Key Regex",
            "description": "Regex that is used to verify keys at assignment time",
            "default": "^.+$"
          },
          "value_jsonschema": {
            "type": "object",
            "title": "Value Jsonschema",
            "description": "[jsonschema](https://json-schema.org/understanding-json-schema/index.html) that is used to verify values at assignment time"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data that was provided when the setting type was created",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "value_jsonschema"
        ],
        "title": "SettingTypeVersion"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearerHeadersOrCookie": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "Settings",
      "description": "\nEndpoints to get setting configuration and player settings\n\nPlayer Settings are meant to be used as a document storage for players settings.\n\nSettings are organized around Setting Types.  Each Setting Type can contain one or more Setting Versions.  Each Type+Version pair includes a jsonschema that is used to validate any update that apply to the setting.  This does NOT validate data for the get endpoints.  If the data is invalid, the get endpoint will return the data as it was stored.\n"
    }
  ]
}
