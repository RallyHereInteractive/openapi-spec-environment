{
  "openapi": "3.1.0",
  "info": {
    "title": "friends-api",
    "description": "RallyHere Friends API. These set of APIS will are used to manage a Players list of Friends and Blocked Players.\n*Note*: When the other Player declines the Player's Friend request, the FriendShip status is set to \"FRIENDSHIP_DECLINED_BY_OTHER_PLAYER\" and counts towards the Player's Friend limit. Clients are expected to delete the relationship and optionally inform the Player about the declined request.\n",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "/friends"
    }
  ],
  "paths": {
    "/v2/player/{player_uuid}/friend": {
      "get": {
        "tags": [
          "Friends"
        ],
        "summary": "Get Friends List For Player V2",
        "description": "Fetch the friend's list for the Player and their relationship status with those friends.\n    \n*Note*: This API supports etags and will return the etag header when with the response. \n\nClients can utilize the `if-none-match` header to avoid having to reload the response if it has not changed.",
        "operationId": "get_friends_list_for_player_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0.0,
              "title": "Page",
              "default": 0
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000.0,
              "minimum": 1.0,
              "title": "Limit",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendsList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Friends"
        ],
        "summary": "Delete Friends V2",
        "description": "Remove the friend's relationship status with the other players",
        "operationId": "delete_friends_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Friends"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/friend/{other_player_uuid}": {
      "get": {
        "tags": [
          "Friends"
        ],
        "summary": "Get Friend Relationship V2",
        "description": "Get the relationship status with the other Player.\n                    \n*Note*: This API supports etags and will return the etag header when with the response.\n\nClients can then utilize the `if-none-match` header to avoid having to reload the response if it has not changed or to use it to modify the relationship without loosing updates.\n\nPermissions Required: friend:friend_list:read",
        "operationId": "get_friend_relationship_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Other Player Uuid"
            },
            "name": "other_player_uuid",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendRelationship"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Friends"
        ],
        "summary": "Add Friend V2",
        "description": "Modify the friend's relationship status with the other Player. There is a max number of friends that can be added for a Player.\n                    \nThe limit can determined using [this API](/#/Configuration%20V1/get_friends_and_block_limits). This API allows you optionally update the player's notes for the other player. If you do not want to update or set the notes when adding the other player, then do not include a body.\n\n*Note*: This API supports etags and will return the etag header when with the response and will match the etag value provided when [fetching Friend Relationship between these two players](/#/Friends%20V1/get_friend_relationship). It is highly recommended to provide the etag value with the `if-match` header to avoid lost updates.\n\nPermissions Required: friend:friend_list:write",
        "operationId": "add_friend_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Other Player Uuid"
            },
            "name": "other_player_uuid",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-Match",
              "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed."
            },
            "name": "if-match",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Notes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendRelationship"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource's Etag does not match the Etag provided. Get the Etag from the Get request and try again"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Friends"
        ],
        "summary": "Delete Friend V2",
        "description": "Remove the friend's relationship status with the other Player. \n                    \nThis should be used for declining Friend requests, deleting sent Friends Requests, and deleting Friends\n\n*Note*: This API supports etags and will return the etag header when with the response and will match the etag value provided when [fetching Friend Relationship between these two players](#/Friends V1/get_friend_relationship). It is highly recommended to provide the etag value with the `if-match` header to avoid lost updates.\n \nPermissions Required: friend:friend_list:write",
        "operationId": "delete_friend_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Other Player Uuid"
            },
            "name": "other_player_uuid",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-Match",
              "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed."
            },
            "name": "if-match",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "412": {
            "description": "The resource's Etag does not match the Etag provided. Get the Etag from the Get request and try again"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/friend/{other_player_uuid}/notes": {
      "put": {
        "tags": [
          "Friends"
        ],
        "summary": "Add Notes V2",
        "description": "Update Player's notes on the other player. Players can only add notes for players they have relationship's with. The notes will be removed when the relationship is ended.\n\nPermissions Required: friend:friend_list:write",
        "operationId": "add_notes_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Other Player Uuid"
            },
            "name": "other_player_uuid",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-Match",
              "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed."
            },
            "name": "if-match",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Notes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendRelationship"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Friends"
        ],
        "summary": "Delete Notes V2",
        "description": "Remove the Player's notes on the other player. Players can only add notes for players they have relationship's with. The notes will be removed when the relationship is ended.\n    \nPermissions Required: friend:friend_list:write",
        "operationId": "delete_notes_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Other Player Uuid"
            },
            "name": "other_player_uuid",
            "in": "path"
          },
          {
            "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-Match",
              "description": "If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed."
            },
            "name": "if-match",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/block": {
      "get": {
        "tags": [
          "Friends"
        ],
        "summary": "Get Blocked List For Player V2",
        "description": "Fetch the blocked list for the Player.\n    \n*Note*: This API supports etags and will return the etag header when with the response. \n                        \nClients can utilize the `if-none-match` header to avoid having to reload the response if it has not changed.\n\nPermissions Required: friend:block_list:read",
        "operationId": "get_blocked_list_for_player_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0.0,
              "title": "Page",
              "default": 0
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000.0,
              "minimum": 1.0,
              "title": "Limit",
              "default": 50
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "If-None-Match",
              "description": "If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed."
            },
            "name": "if-none-match",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "headers": {
              "ETag": {
                "description": "Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "304": {
            "description": "Content still has the same etag and has not changed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    },
    "/v2/player/{player_uuid}/block/{other_player_uuid}": {
      "get": {
        "tags": [
          "Friends"
        ],
        "summary": "Get Blocked V2",
        "description": "Get the Blocked Player\n    \nPermissions Required: friend:block_list:read",
        "operationId": "get_blocked_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Other Player Uuid"
            },
            "name": "other_player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedPlayer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "put": {
        "tags": [
          "Friends"
        ],
        "summary": "Block V2",
        "description": "Block the other Player. There is a max number of Players that can be blocked per Player.\n\nThe limit can determined using [this API](/#/Configuration%20V1/get_friends_and_block_limits).\n\nPermissions Required: friend:block_list:write",
        "operationId": "block_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Other Player Uuid"
            },
            "name": "other_player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedPlayer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Friends"
        ],
        "summary": "Unblock V2",
        "description": "Unblock the other Player\n    \nPermissions Required: friend:block_list:write",
        "operationId": "unblock_v2",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Player Uuid"
            },
            "name": "player_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Other Player Uuid"
            },
            "name": "other_player_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "BlockedList": {
        "properties": {
          "player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Player's UUID"
          },
          "blocked": {
            "items": {
              "$ref": "#/components/schemas/BlockedPlayer"
            },
            "type": "array",
            "title": "Player's Block list"
          },
          "page": {
            "$ref": "#/components/schemas/PageMeta"
          }
        },
        "type": "object",
        "required": [
          "player_uuid",
          "blocked",
          "page"
        ],
        "title": "BlockedList",
        "description": "The list of players that is blocked."
      },
      "BlockedPlayer": {
        "properties": {
          "blocked_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Player UUID of Blocked Player"
          },
          "last_modified_on": {
            "type": "string",
            "format": "date-time",
            "title": "The time when the friends relationship was last modified"
          }
        },
        "type": "object",
        "required": [
          "blocked_player_uuid",
          "last_modified_on"
        ],
        "title": "BlockedPlayer",
        "description": "The player that is being blocked."
      },
      "FriendRelationship": {
        "properties": {
          "friends_player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Player UUID of Friend"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FriendshipStatus"
              }
            ],
            "title": "The status of the friendship"
          },
          "notes": {
            "type": "string",
            "title": "Player's notes about the other player"
          },
          "last_modified_on": {
            "type": "string",
            "format": "date-time",
            "title": "The time when the friends relationship was last modified"
          }
        },
        "type": "object",
        "required": [
          "friends_player_uuid",
          "status",
          "last_modified_on"
        ],
        "title": "FriendRelationship",
        "description": "Represents the relationship with a potential friend."
      },
      "Friends": {
        "properties": {
          "friends": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "maxItems": 50,
            "minItems": 1,
            "title": "List of Player UUIDs to operate on"
          }
        },
        "type": "object",
        "required": [
          "friends"
        ],
        "title": "Friends",
        "description": "List of player_uuids to operate on."
      },
      "FriendsList": {
        "properties": {
          "player_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Player's UUID"
          },
          "friends": {
            "items": {
              "$ref": "#/components/schemas/FriendRelationship"
            },
            "type": "array",
            "title": "Players Friend list"
          },
          "page": {
            "$ref": "#/components/schemas/PageMeta"
          }
        },
        "type": "object",
        "required": [
          "player_uuid",
          "friends",
          "page"
        ],
        "title": "FriendsList",
        "description": "List of the player's friends. Includes sent friend requests and received friends requests."
      },
      "FriendshipStatus": {
        "type": "string",
        "enum": [
          "NONE",
          "FRIENDS",
          "FRIEND_REQUEST_SENT",
          "FRIEND_REQUEST_PENDING",
          "FRIEND_REQUEST_DECLINED_BY_OTHER"
        ],
        "title": "FriendshipStatus",
        "description": "An enumeration."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HzApiErrorModel": {
        "properties": {
          "auth_success": {
            "type": "boolean",
            "title": "Auth Success",
            "default": true
          },
          "error_code": {
            "type": "string",
            "title": "Error Code"
          },
          "desc": {
            "type": "string",
            "title": "Desc"
          }
        },
        "type": "object",
        "required": [
          "error_code",
          "desc"
        ],
        "title": "HzApiErrorModel"
      },
      "Notes": {
        "properties": {
          "notes": {
            "type": "string",
            "maxLength": 4000,
            "minLength": 1,
            "title": "Notes to set for the Player's friend. If you don't want to modify notes, no not include a body when adding a friend."
          }
        },
        "type": "object",
        "title": "Notes",
        "description": "Notes to set for the Player's friend. If you don't want to modify notes, no not include in body when adding a friend."
      },
      "PageMeta": {
        "properties": {
          "page": {
            "type": "integer",
            "title": "Requested page"
          },
          "limit": {
            "type": "integer",
            "title": "Page size"
          },
          "total": {
            "type": "integer",
            "title": "Total collection size"
          }
        },
        "type": "object",
        "required": [
          "page",
          "limit",
          "total"
        ],
        "title": "PageMeta"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearerHeadersOrCookie": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "Friends",
      "description": "Operations to fetch and modify a player's friends, blocked list, and configuration"
    }
  ]
}
