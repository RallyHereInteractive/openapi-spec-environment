{
  "openapi": "3.1.0",
  "info": {
    "title": "file-api",
    "description": "RallyHere file-api.",
    "version": "0.2.0"
  },
  "servers": [
    {
      "url": "/file"
    }
  ],
  "paths": {
    "/v1/{file_type}/{entity_type}": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Get Entity Directory Information",
        "description": "Get information about a entity types storage container. Very resource intensive, use sparingly.",
        "operationId": "get_entity_directory_information",
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "file_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/FileType"
            }
          },
          {
            "name": "entity_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageInformation"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "File"
        ],
        "summary": "Delete Entity Directory",
        "operationId": "delete_entity_directory",
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "file_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/FileType"
            }
          },
          {
            "name": "entity_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{file_type}/{entity_type}/{entity_id}/{file_name}": {
      "put": {
        "tags": [
          "File"
        ],
        "summary": "Create Entity Directory File",
        "description": "Upload a file to entity storage for the provided entity_id. \nThis endpoint will accept a multipart/form-data by default when the request's content-type is not provided. \nWhen a content-type is provided, the request body will be as raw bytes.",
        "operationId": "create_entity_directory_file",
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "file_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/FileType"
            }
          },
          {
            "name": "file_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Name"
            }
          },
          {
            "name": "entity_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityType"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Entity Id"
            }
          },
          {
            "name": "content-type",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Content-Type"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_entity_directory_file"
              }
            },
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Download Entity Directory File",
        "operationId": "download_entity_directory_file",
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "entity_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityType"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Entity Id"
            }
          },
          {
            "name": "file_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Name"
            }
          },
          {
            "name": "file_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/FileType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "\nError Codes:\n- `file_not_found` - File not found.\n",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "File"
        ],
        "summary": "Delete Entity Directory File",
        "operationId": "delete_entity_directory_file",
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "entity_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityType"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Entity Id"
            }
          },
          {
            "name": "file_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Name"
            }
          },
          {
            "name": "file_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/FileType"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{file_type}/{entity_type}/{entity_id}": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "List Entity Directory Files",
        "operationId": "list_entity_directory_files",
        "security": [
          {
            "HTTPBearerHeadersOrCookie": []
          }
        ],
        "parameters": [
          {
            "name": "entity_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityType"
            }
          },
          {
            "name": "entity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Entity Id"
            }
          },
          {
            "name": "file_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/FileType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileListResponse"
                }
              }
            }
          },
          "403": {
            "description": "\nError Codes:\n- `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token\n- `auth_invalid_version` - Invalid Authorization - version\n- `auth_malformed_access` - Invalid Authorization - malformed access token\n- `auth_not_jwt` - Invalid Authorization\n- `auth_token_expired` - Token is expired\n- `auth_token_format` - Invalid Authorization - {}\n- `auth_token_invalid_claim` - Token contained invalid claim value: {}\n- `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type\n- `auth_token_sig_invalid` - Token Signature is invalid\n- `auth_token_unknown` - Failed to parse token\n- `insufficient_permissions` - Insufficient Permissions\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HzApiErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_create_entity_directory_file": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "title": "Body_create_entity_directory_file"
      },
      "EntityType": {
        "type": "string",
        "enum": [
          "match",
          "unknown"
        ],
        "title": "EntityType",
        "x-enum-descriptions": [
          "",
          ""
        ],
        "x-enum-varnames": [
          "match",
          "unknown"
        ]
      },
      "FileListResponse": {
        "properties": {
          "files": {
            "items": {
              "$ref": "#/components/schemas/FileResponse"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "required": [
          "files"
        ],
        "title": "FileListResponse"
      },
      "FileResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "content_type": {
            "type": "string",
            "title": "Content Type"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone",
            "example": "2023-01-23T21:07:02.000000+00:00"
          }
        },
        "type": "object",
        "required": [
          "name",
          "size",
          "content_type",
          "created_timestamp"
        ],
        "title": "FileResponse"
      },
      "FileType": {
        "type": "string",
        "enum": [
          "file",
          "developer-file"
        ],
        "title": "FileType",
        "x-enum-descriptions": [
          "",
          ""
        ],
        "x-enum-varnames": [
          "file",
          "developer_file"
        ]
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HzApiErrorModel": {
        "properties": {
          "auth_success": {
            "type": "boolean",
            "title": "Auth Success",
            "default": true
          },
          "error_code": {
            "type": "string",
            "title": "Error Code"
          },
          "desc": {
            "type": "string",
            "title": "Desc"
          }
        },
        "type": "object",
        "required": [
          "error_code",
          "desc"
        ],
        "title": "HzApiErrorModel"
      },
      "StorageInformation": {
        "properties": {
          "total_files": {
            "type": "integer",
            "title": "Total Files",
            "default": 0
          },
          "total_size_bytes": {
            "type": "integer",
            "title": "Total Size Bytes",
            "default": 0
          },
          "total_size_mb": {
            "type": "integer",
            "title": "Total Size Mb",
            "default": 0
          }
        },
        "type": "object",
        "title": "StorageInformation"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearerHeadersOrCookie": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "File",
      "description": "Operations on file-api"
    }
  ]
}
